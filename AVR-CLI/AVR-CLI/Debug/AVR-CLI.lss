
AVR-CLI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001024  000010b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001024  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000224  00800120  00800120  000010d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d1d  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001009  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001229  00000000  00000000  0000408e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  000052b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088c  00000000  00000000  00005710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000160f  00000000  00000000  00005f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  000075ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
       2:	00 00       	nop
       4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
      26:	00 00       	nop
      28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
      32:	00 00       	nop
      34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
      46:	00 00       	nop
      48:	66 c0       	rjmp	.+204    	; 0x116 <__vector_18>
      4a:	00 00       	nop
      4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
      62:	00 00       	nop
      64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
      66:	00 00       	nop
      68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	56 01       	movw	r10, r12
      8e:	79 01       	movw	r14, r18
      90:	9c 01       	movw	r18, r24
      92:	bf 01       	movw	r22, r30
      94:	e2 01       	movw	r28, r4
      96:	05 02       	muls	r16, r21
      98:	2b 02       	muls	r18, r27
      9a:	59 02       	muls	r21, r25
      9c:	64 02       	muls	r22, r20
      9e:	6f 02       	muls	r22, r31
      a0:	7a 02       	muls	r23, r26
      a2:	85 02       	muls	r24, r21
      a4:	90 02       	muls	r25, r16
      a6:	9d 02       	muls	r25, r29

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d0 e1       	ldi	r29, 0x10	; 16
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	e4 e2       	ldi	r30, 0x24	; 36
      bc:	f0 e1       	ldi	r31, 0x10	; 16
      be:	00 e0       	ldi	r16, 0x00	; 0
      c0:	0b bf       	out	0x3b, r16	; 59
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
      c4:	07 90       	elpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a0 32       	cpi	r26, 0x20	; 32
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
      ce:	23 e0       	ldi	r18, 0x03	; 3
      d0:	a0 e2       	ldi	r26, 0x20	; 32
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a4 34       	cpi	r26, 0x44	; 68
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	8a d4       	rcall	.+2324   	; 0x9f4 <main>
      e0:	9f c7       	rjmp	.+3902   	; 0x1020 <_exit>

000000e2 <__bad_interrupt>:
      e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <apInit>:
﻿#include "ap.h"


void apInit(void)
{
	uartOpen(_DEF_UART0, 115200);
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	52 ec       	ldi	r21, 0xC2	; 194
      e8:	61 e0       	ldi	r22, 0x01	; 1
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	5d c0       	rjmp	.+186    	; 0x1aa <uartOpen>
      f0:	08 95       	ret

000000f2 <apMain>:
		/*
		gpioPinToggle(_DEF_GPIO0);
		_delay_ms(500);
		*/
		
		uartPrintf(_DEF_UART0, "uart0 : %s\n", str);
      f2:	05 e0       	ldi	r16, 0x05	; 5
      f4:	11 e0       	ldi	r17, 0x01	; 1
      f6:	c3 e1       	ldi	r28, 0x13	; 19
      f8:	d1 e0       	ldi	r29, 0x01	; 1
      fa:	1f 93       	push	r17
      fc:	0f 93       	push	r16
      fe:	df 93       	push	r29
     100:	cf 93       	push	r28
     102:	1f 92       	push	r1
     104:	98 d0       	rcall	.+304    	; 0x236 <uartPrintf>
		gpioPinToggle(_DEF_GPIO0);
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	46 d0       	rcall	.+140    	; 0x196 <gpioPinToggle>
     10a:	0f 90       	pop	r0
     10c:	0f 90       	pop	r0
     10e:	0f 90       	pop	r0
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	f2 cf       	rjmp	.-28     	; 0xfa <apMain+0x8>

00000116 <__vector_18>:
﻿#include "main.h"
#include "atmega128_it.h"


ISR(USART0_RX_vect)
{
     116:	1f 92       	push	r1
     118:	0f 92       	push	r0
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	0f 92       	push	r0
     11e:	11 24       	eor	r1, r1
	
     120:	0f 90       	pop	r0
     122:	0f be       	out	0x3f, r0	; 63
     124:	0f 90       	pop	r0
     126:	1f 90       	pop	r1
     128:	18 95       	reti

0000012a <bspInit>:
﻿#include "bsp.h"


void bspInit(void)
{
     12a:	08 95       	ret

0000012c <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
     12c:	fc 01       	movw	r30, r24
	bool ret = true;

	p_node->in    = 0;
     12e:	10 82       	st	Z, r1
     130:	11 82       	std	Z+1, r1	; 0x01
     132:	12 82       	std	Z+2, r1	; 0x02
     134:	13 82       	std	Z+3, r1	; 0x03
	p_node->out   = 0;
     136:	14 82       	std	Z+4, r1	; 0x04
     138:	15 82       	std	Z+5, r1	; 0x05
     13a:	16 82       	std	Z+6, r1	; 0x06
     13c:	17 82       	std	Z+7, r1	; 0x07
	p_node->len   = length;
     13e:	20 87       	std	Z+8, r18	; 0x08
     140:	31 87       	std	Z+9, r19	; 0x09
     142:	42 87       	std	Z+10, r20	; 0x0a
     144:	53 87       	std	Z+11, r21	; 0x0b
	p_node->p_buf = p_buf;
     146:	75 87       	std	Z+13, r23	; 0x0d
     148:	64 87       	std	Z+12, r22	; 0x0c

	return ret;
}
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	08 95       	ret

0000014e <gpioPinMode>:
	if (GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
	{
		ret = true;	
	}
	return ret;
}
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	00 d0       	rcall	.+0      	; 0x154 <gpioPinMode+0x6>
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	1a 82       	std	Y+2, r1	; 0x02
     15a:	19 82       	std	Y+1, r1	; 0x01
     15c:	81 11       	cpse	r24, r1
     15e:	0f c0       	rjmp	.+30     	; 0x17e <gpioPinMode+0x30>
     160:	61 30       	cpi	r22, 0x01	; 1
     162:	11 f4       	brne	.+4      	; 0x168 <gpioPinMode+0x1a>
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	8a 83       	std	Y+2, r24	; 0x02
     168:	e0 e0       	ldi	r30, 0x00	; 0
     16a:	f1 e0       	ldi	r31, 0x01	; 1
     16c:	81 81       	ldd	r24, Z+1	; 0x01
     16e:	89 83       	std	Y+1, r24	; 0x01
     170:	be 01       	movw	r22, r28
     172:	6f 5f       	subi	r22, 0xFF	; 255
     174:	7f 4f       	sbci	r23, 0xFF	; 255
     176:	80 81       	ld	r24, Z
     178:	90 d0       	rcall	.+288    	; 0x29a <GPIO_Init>
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	01 c0       	rjmp	.+2      	; 0x180 <gpioPinMode+0x32>
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <gpioInit>:
     18a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	de df       	rcall	.-68     	; 0x14e <gpioPinMode>
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	08 95       	ret

00000196 <gpioPinToggle>:

void gpioPinToggle(uint8_t ch)
{
	if (ch < 0 || ch >= GPIO_MAX_CH) return;
     196:	81 11       	cpse	r24, r1
     198:	05 c0       	rjmp	.+10     	; 0x1a4 <gpioPinToggle+0xe>
	GPIO_TogglePin(gpio_tbl[ch].port, gpio_tbl[ch].pin);
     19a:	e0 e0       	ldi	r30, 0x00	; 0
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	61 81       	ldd	r22, Z+1	; 0x01
     1a0:	80 81       	ld	r24, Z
     1a2:	7e c1       	rjmp	.+764    	; 0x4a0 <GPIO_TogglePin>
     1a4:	08 95       	ret

000001a6 <uartInit>:
		qbufferRead(&qbuffer[ch], &ret, 1);
		break;
	}

	return ret;
}
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	08 95       	ret

000001aa <uartOpen>:
     1aa:	81 11       	cpse	r24, r1
     1ac:	1c c0       	rjmp	.+56     	; 0x1e6 <uartOpen+0x3c>
     1ae:	ee e2       	ldi	r30, 0x2E	; 46
     1b0:	f3 e0       	ldi	r31, 0x03	; 3
     1b2:	10 82       	st	Z, r1
     1b4:	41 83       	std	Z+1, r20	; 0x01
     1b6:	52 83       	std	Z+2, r21	; 0x02
     1b8:	63 83       	std	Z+3, r22	; 0x03
     1ba:	74 83       	std	Z+4, r23	; 0x04
     1bc:	16 82       	std	Z+6, r1	; 0x06
     1be:	17 82       	std	Z+7, r1	; 0x07
     1c0:	15 82       	std	Z+5, r1	; 0x05
     1c2:	10 86       	std	Z+8, r1	; 0x08
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	32 e0       	ldi	r19, 0x02	; 2
     1c8:	40 e0       	ldi	r20, 0x00	; 0
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	60 e2       	ldi	r22, 0x20	; 32
     1ce:	71 e0       	ldi	r23, 0x01	; 1
     1d0:	80 e2       	ldi	r24, 0x20	; 32
     1d2:	93 e0       	ldi	r25, 0x03	; 3
     1d4:	ab df       	rcall	.-170    	; 0x12c <qbufferCreate>
     1d6:	8e e2       	ldi	r24, 0x2E	; 46
     1d8:	93 e0       	ldi	r25, 0x03	; 3
     1da:	86 d3       	rcall	.+1804   	; 0x8e8 <UART_Init>
     1dc:	91 e0       	ldi	r25, 0x01	; 1
     1de:	88 23       	and	r24, r24
     1e0:	19 f0       	breq	.+6      	; 0x1e8 <uartOpen+0x3e>
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <uartOpen+0x3e>
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	89 2f       	mov	r24, r25
     1ea:	08 95       	ret

000001ec <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
     1ec:	cf 92       	push	r12
     1ee:	df 92       	push	r13
     1f0:	ef 92       	push	r14
     1f2:	ff 92       	push	r15
     1f4:	0f 93       	push	r16
     1f6:	1f 93       	push	r17
     1f8:	69 01       	movw	r12, r18
     1fa:	7a 01       	movw	r14, r20
	uint32_t ret = 0;
	StatusTypeDef status;
	switch(ch)
     1fc:	81 11       	cpse	r24, r1
     1fe:	0b c0       	rjmp	.+22     	; 0x216 <uartWrite+0x2a>
	{
		case _DEF_UART0:
		status = UART_Transmit(&huart1, p_data, length, 100);
     200:	04 e6       	ldi	r16, 0x64	; 100
     202:	10 e0       	ldi	r17, 0x00	; 0
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	a6 01       	movw	r20, r12
     20a:	8e e2       	ldi	r24, 0x2E	; 46
     20c:	93 e0       	ldi	r25, 0x03	; 3
     20e:	78 d3       	rcall	.+1776   	; 0x900 <UART_Transmit>
		if (status == OK)
     210:	88 23       	and	r24, r24
     212:	41 f0       	breq	.+16     	; 0x224 <uartWrite+0x38>
     214:	04 c0       	rjmp	.+8      	; 0x21e <uartWrite+0x32>
	return ret;
}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
	uint32_t ret = 0;
     216:	c1 2c       	mov	r12, r1
     218:	d1 2c       	mov	r13, r1
     21a:	76 01       	movw	r14, r12
     21c:	03 c0       	rjmp	.+6      	; 0x224 <uartWrite+0x38>
     21e:	c1 2c       	mov	r12, r1
     220:	d1 2c       	mov	r13, r1
     222:	76 01       	movw	r14, r12
			ret = length;
		}
		break;
	}
	return ret;
}
     224:	c7 01       	movw	r24, r14
     226:	b6 01       	movw	r22, r12
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	cf 90       	pop	r12
     234:	08 95       	ret

00000236 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
     23e:	da 95       	dec	r29
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
	len = vsnprintf(buf, 256, fmt, args);
     24a:	9e 01       	movw	r18, r28
     24c:	28 5f       	subi	r18, 0xF8	; 248
     24e:	3e 4f       	sbci	r19, 0xFE	; 254
     250:	ca 5f       	subi	r28, 0xFA	; 250
     252:	de 4f       	sbci	r29, 0xFE	; 254
     254:	48 81       	ld	r20, Y
     256:	59 81       	ldd	r21, Y+1	; 0x01
     258:	c6 50       	subi	r28, 0x06	; 6
     25a:	d1 40       	sbci	r29, 0x01	; 1
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	71 e0       	ldi	r23, 0x01	; 1
     260:	ce 01       	movw	r24, r28
     262:	01 96       	adiw	r24, 0x01	; 1
     264:	f8 d3       	rcall	.+2032   	; 0xa56 <vsnprintf>

	ret = uartWrite(ch, (uint8_t *)buf, len);
     266:	9c 01       	movw	r18, r24
     268:	99 0f       	add	r25, r25
     26a:	44 0b       	sbc	r20, r20
     26c:	55 0b       	sbc	r21, r21
     26e:	be 01       	movw	r22, r28
     270:	6f 5f       	subi	r22, 0xFF	; 255
     272:	7f 4f       	sbci	r23, 0xFF	; 255
     274:	cb 5f       	subi	r28, 0xFB	; 251
     276:	de 4f       	sbci	r29, 0xFE	; 254
     278:	88 81       	ld	r24, Y
     27a:	c5 50       	subi	r28, 0x05	; 5
     27c:	d1 40       	sbci	r29, 0x01	; 1
     27e:	b6 df       	rcall	.-148    	; 0x1ec <uartWrite>

	va_end(args);
	return ret;
}
     280:	d3 95       	inc	r29
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	08 95       	ret

00000292 <hwInit>:
﻿#include "hw.h"

void hwInit(void)
{
	bspInit();
     292:	4b df       	rcall	.-362    	; 0x12a <bspInit>
	gpioInit();
     294:	7a df       	rcall	.-268    	; 0x18a <gpioInit>
	uartInit();
     296:	87 cf       	rjmp	.-242    	; 0x1a6 <uartInit>
     298:	08 95       	ret

0000029a <GPIO_Init>:
     29a:	90 e0       	ldi	r25, 0x00	; 0
			{
				CLRB(PORTG, pin);
			}
			else if(pinState == PIN_SET)
			{
				SETB(PORTG, pin);
     29c:	87 30       	cpi	r24, 0x07	; 7
     29e:	91 05       	cpc	r25, r1
     2a0:	08 f0       	brcs	.+2      	; 0x2a4 <GPIO_Init+0xa>
     2a2:	fd c0       	rjmp	.+506    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     2a4:	fc 01       	movw	r30, r24
     2a6:	ea 5b       	subi	r30, 0xBA	; 186
     2a8:	ff 4f       	sbci	r31, 0xFF	; 255
     2aa:	cc c3       	rjmp	.+1944   	; 0xa44 <__tablejump2__>
     2ac:	db 01       	movw	r26, r22
     2ae:	11 96       	adiw	r26, 0x01	; 1
     2b0:	8c 91       	ld	r24, X
     2b2:	11 97       	sbiw	r26, 0x01	; 1
     2b4:	81 11       	cpse	r24, r1
     2b6:	0d c0       	rjmp	.+26     	; 0x2d2 <GPIO_Init+0x38>
     2b8:	2a b3       	in	r18, 0x1a	; 26
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0c 90       	ld	r0, X
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <GPIO_Init+0x2c>
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	0a 94       	dec	r0
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <GPIO_Init+0x28>
     2ca:	80 95       	com	r24
     2cc:	82 23       	and	r24, r18
     2ce:	8a bb       	out	0x1a, r24	; 26
     2d0:	08 95       	ret
     2d2:	81 30       	cpi	r24, 0x01	; 1
     2d4:	09 f0       	breq	.+2      	; 0x2d8 <GPIO_Init+0x3e>
     2d6:	e3 c0       	rjmp	.+454    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     2d8:	2a b3       	in	r18, 0x1a	; 26
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	fb 01       	movw	r30, r22
     2e0:	00 80       	ld	r0, Z
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <GPIO_Init+0x4e>
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <GPIO_Init+0x4a>
     2ec:	82 2b       	or	r24, r18
     2ee:	8a bb       	out	0x1a, r24	; 26
     2f0:	08 95       	ret
     2f2:	db 01       	movw	r26, r22
     2f4:	11 96       	adiw	r26, 0x01	; 1
     2f6:	8c 91       	ld	r24, X
     2f8:	11 97       	sbiw	r26, 0x01	; 1
     2fa:	81 11       	cpse	r24, r1
     2fc:	0d c0       	rjmp	.+26     	; 0x318 <GPIO_Init+0x7e>
     2fe:	27 b3       	in	r18, 0x17	; 23
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0c 90       	ld	r0, X
     306:	02 c0       	rjmp	.+4      	; 0x30c <GPIO_Init+0x72>
     308:	88 0f       	add	r24, r24
     30a:	99 1f       	adc	r25, r25
     30c:	0a 94       	dec	r0
     30e:	e2 f7       	brpl	.-8      	; 0x308 <GPIO_Init+0x6e>
     310:	80 95       	com	r24
     312:	82 23       	and	r24, r18
     314:	87 bb       	out	0x17, r24	; 23
     316:	08 95       	ret
     318:	81 30       	cpi	r24, 0x01	; 1
     31a:	09 f0       	breq	.+2      	; 0x31e <GPIO_Init+0x84>
     31c:	c0 c0       	rjmp	.+384    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     31e:	27 b3       	in	r18, 0x17	; 23
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	fb 01       	movw	r30, r22
     326:	00 80       	ld	r0, Z
     328:	02 c0       	rjmp	.+4      	; 0x32e <GPIO_Init+0x94>
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	0a 94       	dec	r0
     330:	e2 f7       	brpl	.-8      	; 0x32a <GPIO_Init+0x90>
     332:	82 2b       	or	r24, r18
     334:	87 bb       	out	0x17, r24	; 23
     336:	08 95       	ret
     338:	db 01       	movw	r26, r22
     33a:	11 96       	adiw	r26, 0x01	; 1
     33c:	8c 91       	ld	r24, X
     33e:	11 97       	sbiw	r26, 0x01	; 1
     340:	81 11       	cpse	r24, r1
     342:	0d c0       	rjmp	.+26     	; 0x35e <GPIO_Init+0xc4>
     344:	24 b3       	in	r18, 0x14	; 20
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0c 90       	ld	r0, X
     34c:	02 c0       	rjmp	.+4      	; 0x352 <GPIO_Init+0xb8>
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	0a 94       	dec	r0
     354:	e2 f7       	brpl	.-8      	; 0x34e <GPIO_Init+0xb4>
     356:	80 95       	com	r24
     358:	82 23       	and	r24, r18
     35a:	84 bb       	out	0x14, r24	; 20
     35c:	08 95       	ret
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	09 f0       	breq	.+2      	; 0x364 <GPIO_Init+0xca>
     362:	9d c0       	rjmp	.+314    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     364:	24 b3       	in	r18, 0x14	; 20
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	fb 01       	movw	r30, r22
     36c:	00 80       	ld	r0, Z
     36e:	02 c0       	rjmp	.+4      	; 0x374 <GPIO_Init+0xda>
     370:	88 0f       	add	r24, r24
     372:	99 1f       	adc	r25, r25
     374:	0a 94       	dec	r0
     376:	e2 f7       	brpl	.-8      	; 0x370 <GPIO_Init+0xd6>
     378:	82 2b       	or	r24, r18
     37a:	84 bb       	out	0x14, r24	; 20
     37c:	08 95       	ret
     37e:	db 01       	movw	r26, r22
     380:	11 96       	adiw	r26, 0x01	; 1
     382:	8c 91       	ld	r24, X
     384:	11 97       	sbiw	r26, 0x01	; 1
     386:	81 11       	cpse	r24, r1
     388:	0d c0       	rjmp	.+26     	; 0x3a4 <GPIO_Init+0x10a>
     38a:	21 b3       	in	r18, 0x11	; 17
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0c 90       	ld	r0, X
     392:	02 c0       	rjmp	.+4      	; 0x398 <GPIO_Init+0xfe>
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	0a 94       	dec	r0
     39a:	e2 f7       	brpl	.-8      	; 0x394 <GPIO_Init+0xfa>
     39c:	80 95       	com	r24
     39e:	82 23       	and	r24, r18
     3a0:	81 bb       	out	0x11, r24	; 17
     3a2:	08 95       	ret
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	09 f0       	breq	.+2      	; 0x3aa <GPIO_Init+0x110>
     3a8:	7a c0       	rjmp	.+244    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     3aa:	21 b3       	in	r18, 0x11	; 17
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	fb 01       	movw	r30, r22
     3b2:	00 80       	ld	r0, Z
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <GPIO_Init+0x120>
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	0a 94       	dec	r0
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <GPIO_Init+0x11c>
     3be:	82 2b       	or	r24, r18
     3c0:	81 bb       	out	0x11, r24	; 17
     3c2:	08 95       	ret
     3c4:	db 01       	movw	r26, r22
     3c6:	11 96       	adiw	r26, 0x01	; 1
     3c8:	8c 91       	ld	r24, X
     3ca:	11 97       	sbiw	r26, 0x01	; 1
     3cc:	81 11       	cpse	r24, r1
     3ce:	0d c0       	rjmp	.+26     	; 0x3ea <GPIO_Init+0x150>
     3d0:	22 b1       	in	r18, 0x02	; 2
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0c 90       	ld	r0, X
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <GPIO_Init+0x144>
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	0a 94       	dec	r0
     3e0:	e2 f7       	brpl	.-8      	; 0x3da <GPIO_Init+0x140>
     3e2:	80 95       	com	r24
     3e4:	82 23       	and	r24, r18
     3e6:	82 b9       	out	0x02, r24	; 2
     3e8:	08 95       	ret
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <GPIO_Init+0x156>
     3ee:	57 c0       	rjmp	.+174    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     3f0:	22 b1       	in	r18, 0x02	; 2
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	fb 01       	movw	r30, r22
     3f8:	00 80       	ld	r0, Z
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	0a 94       	dec	r0
     402:	e2 f7       	brpl	.-8      	; 0x3fc <GPIO_Init+0x162>
     404:	82 2b       	or	r24, r18
     406:	82 b9       	out	0x02, r24	; 2
     408:	08 95       	ret
     40a:	db 01       	movw	r26, r22
     40c:	11 96       	adiw	r26, 0x01	; 1
     40e:	8c 91       	ld	r24, X
     410:	11 97       	sbiw	r26, 0x01	; 1
     412:	81 11       	cpse	r24, r1
     414:	0f c0       	rjmp	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     416:	e1 e6       	ldi	r30, 0x61	; 97
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	20 81       	ld	r18, Z
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0c 90       	ld	r0, X
     422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	0a 94       	dec	r0
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     42c:	80 95       	com	r24
     42e:	82 23       	and	r24, r18
     430:	80 83       	st	Z, r24
     432:	08 95       	ret
     434:	81 30       	cpi	r24, 0x01	; 1
     436:	99 f5       	brne	.+102    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     438:	e1 e6       	ldi	r30, 0x61	; 97
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	20 81       	ld	r18, Z
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	db 01       	movw	r26, r22
     444:	0c 90       	ld	r0, X
     446:	02 c0       	rjmp	.+4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     448:	88 0f       	add	r24, r24
     44a:	99 1f       	adc	r25, r25
     44c:	0a 94       	dec	r0
     44e:	e2 f7       	brpl	.-8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     450:	82 2b       	or	r24, r18
     452:	80 83       	st	Z, r24
     454:	08 95       	ret
     456:	fb 01       	movw	r30, r22
     458:	81 81       	ldd	r24, Z+1	; 0x01
     45a:	81 11       	cpse	r24, r1
     45c:	10 c0       	rjmp	.+32     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     45e:	e4 e6       	ldi	r30, 0x64	; 100
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	20 81       	ld	r18, Z
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	db 01       	movw	r26, r22
     46a:	0c 90       	ld	r0, X
     46c:	02 c0       	rjmp	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	0a 94       	dec	r0
     474:	e2 f7       	brpl	.-8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     476:	80 95       	com	r24
     478:	82 23       	and	r24, r18
     47a:	80 83       	st	Z, r24
     47c:	08 95       	ret
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	71 f4       	brne	.+28     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     482:	e4 e6       	ldi	r30, 0x64	; 100
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	20 81       	ld	r18, Z
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	db 01       	movw	r26, r22
     48e:	0c 90       	ld	r0, X
     490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	0a 94       	dec	r0
     498:	e2 f7       	brpl	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     49a:	82 2b       	or	r24, r18
     49c:	80 83       	st	Z, r24
     49e:	08 95       	ret

000004a0 <GPIO_TogglePin>:
	}
}

void GPIO_TogglePin(uint8_t port, uint8_t pin)
{
	switch(port)
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	87 30       	cpi	r24, 0x07	; 7
     4a4:	91 05       	cpc	r25, r1
     4a6:	08 f0       	brcs	.+2      	; 0x4aa <GPIO_TogglePin+0xa>
     4a8:	54 c0       	rjmp	.+168    	; 0x552 <GPIO_TogglePin+0xb2>
     4aa:	fc 01       	movw	r30, r24
     4ac:	e3 5b       	subi	r30, 0xB3	; 179
     4ae:	ff 4f       	sbci	r31, 0xFF	; 255
     4b0:	c9 c2       	rjmp	.+1426   	; 0xa44 <__tablejump2__>
	{
		case GPIOA:
			TGLB(PORTA, pin);
     4b2:	2b b3       	in	r18, 0x1b	; 27
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <GPIO_TogglePin+0x1e>
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	6a 95       	dec	r22
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <GPIO_TogglePin+0x1a>
     4c2:	82 27       	eor	r24, r18
     4c4:	8b bb       	out	0x1b, r24	; 27
		break;
     4c6:	08 95       	ret
		case GPIOB:
			TGLB(PORTB, pin);
     4c8:	28 b3       	in	r18, 0x18	; 24
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <GPIO_TogglePin+0x34>
     4d0:	88 0f       	add	r24, r24
     4d2:	99 1f       	adc	r25, r25
     4d4:	6a 95       	dec	r22
     4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <GPIO_TogglePin+0x30>
     4d8:	82 27       	eor	r24, r18
     4da:	88 bb       	out	0x18, r24	; 24
		break;
     4dc:	08 95       	ret
		case GPIOC:
			TGLB(PORTC, pin);
     4de:	25 b3       	in	r18, 0x15	; 21
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <GPIO_TogglePin+0x4a>
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	6a 95       	dec	r22
     4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <GPIO_TogglePin+0x46>
     4ee:	82 27       	eor	r24, r18
     4f0:	85 bb       	out	0x15, r24	; 21
		break;
     4f2:	08 95       	ret
		case GPIOD:
			TGLB(PORTD, pin);
     4f4:	22 b3       	in	r18, 0x12	; 18
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <GPIO_TogglePin+0x60>
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	6a 95       	dec	r22
     502:	e2 f7       	brpl	.-8      	; 0x4fc <GPIO_TogglePin+0x5c>
     504:	82 27       	eor	r24, r18
     506:	82 bb       	out	0x12, r24	; 18
		break;
     508:	08 95       	ret
		case GPIOE:
			TGLB(PORTE, pin);
     50a:	23 b1       	in	r18, 0x03	; 3
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <GPIO_TogglePin+0x76>
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	6a 95       	dec	r22
     518:	e2 f7       	brpl	.-8      	; 0x512 <GPIO_TogglePin+0x72>
     51a:	82 27       	eor	r24, r18
     51c:	83 b9       	out	0x03, r24	; 3
		break;
     51e:	08 95       	ret
		case GPIOF:
			TGLB(PORTF, pin);
     520:	e2 e6       	ldi	r30, 0x62	; 98
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	20 81       	ld	r18, Z
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	02 c0       	rjmp	.+4      	; 0x530 <GPIO_TogglePin+0x90>
     52c:	88 0f       	add	r24, r24
     52e:	99 1f       	adc	r25, r25
     530:	6a 95       	dec	r22
     532:	e2 f7       	brpl	.-8      	; 0x52c <GPIO_TogglePin+0x8c>
     534:	82 27       	eor	r24, r18
     536:	80 83       	st	Z, r24
		break;
     538:	08 95       	ret
		case GPIOG:
			TGLB(PORTG, pin);
     53a:	e5 e6       	ldi	r30, 0x65	; 101
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	20 81       	ld	r18, Z
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	02 c0       	rjmp	.+4      	; 0x54a <GPIO_TogglePin+0xaa>
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	6a 95       	dec	r22
     54c:	e2 f7       	brpl	.-8      	; 0x546 <GPIO_TogglePin+0xa6>
     54e:	82 27       	eor	r24, r18
     550:	80 83       	st	Z, r24
     552:	08 95       	ret

00000554 <UART0_Init>:




StatusTypeDef UART0_Init(UART_HandleTypeDef *huart)
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	ec 01       	movw	r28, r24
	uint32_t temp;
	if (huart == NULL)
     55a:	89 2b       	or	r24, r25
     55c:	09 f4       	brne	.+2      	; 0x560 <UART0_Init+0xc>
     55e:	ca c0       	rjmp	.+404    	; 0x6f4 <UART0_Init+0x1a0>
	{
		return ERROR;
	}
	
	switch(huart->Init.OverSampling)
     560:	88 85       	ldd	r24, Y+8	; 0x08
     562:	88 23       	and	r24, r24
     564:	19 f0       	breq	.+6      	; 0x56c <UART0_Init+0x18>
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	59 f1       	breq	.+86     	; 0x5c0 <UART0_Init+0x6c>
     56a:	4f c0       	rjmp	.+158    	; 0x60a <UART0_Init+0xb6>
	{
		case UART_OVERSAMPLING_8:
		temp = (F_CPU / (16 * huart->Init.BaudRate)) - 1;
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	9a 81       	ldd	r25, Y+2	; 0x02
     570:	ab 81       	ldd	r26, Y+3	; 0x03
     572:	bc 81       	ldd	r27, Y+4	; 0x04
     574:	88 0f       	add	r24, r24
     576:	99 1f       	adc	r25, r25
     578:	aa 1f       	adc	r26, r26
     57a:	bb 1f       	adc	r27, r27
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	aa 1f       	adc	r26, r26
     582:	bb 1f       	adc	r27, r27
     584:	9c 01       	movw	r18, r24
     586:	ad 01       	movw	r20, r26
     588:	22 0f       	add	r18, r18
     58a:	33 1f       	adc	r19, r19
     58c:	44 1f       	adc	r20, r20
     58e:	55 1f       	adc	r21, r21
     590:	22 0f       	add	r18, r18
     592:	33 1f       	adc	r19, r19
     594:	44 1f       	adc	r20, r20
     596:	55 1f       	adc	r21, r21
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	74 e2       	ldi	r23, 0x24	; 36
     59c:	84 ef       	ldi	r24, 0xF4	; 244
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	2f d2       	rcall	.+1118   	; 0xa00 <__udivmodsi4>
     5a2:	ba 01       	movw	r22, r20
     5a4:	a9 01       	movw	r20, r18
     5a6:	41 50       	subi	r20, 0x01	; 1
     5a8:	51 09       	sbc	r21, r1
     5aa:	61 09       	sbc	r22, r1
     5ac:	71 09       	sbc	r23, r1
		UBRR0H = (temp >> 8) & 0xFF;
     5ae:	bb 27       	eor	r27, r27
     5b0:	a7 2f       	mov	r26, r23
     5b2:	96 2f       	mov	r25, r22
     5b4:	85 2f       	mov	r24, r21
     5b6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
		UBRR0L = temp & 0xFF;
     5ba:	49 b9       	out	0x09, r20	; 9
		CLRB(UCSR0A, 1);
     5bc:	59 98       	cbi	0x0b, 1	; 11
		break;
     5be:	25 c0       	rjmp	.+74     	; 0x60a <UART0_Init+0xb6>
		case UART_OVERSAMPLING_16:
		temp = (F_CPU / (8 * huart->Init.BaudRate)) - 1;
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	9a 81       	ldd	r25, Y+2	; 0x02
     5c4:	ab 81       	ldd	r26, Y+3	; 0x03
     5c6:	bc 81       	ldd	r27, Y+4	; 0x04
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	aa 1f       	adc	r26, r26
     5ce:	bb 1f       	adc	r27, r27
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	aa 1f       	adc	r26, r26
     5d6:	bb 1f       	adc	r27, r27
     5d8:	9c 01       	movw	r18, r24
     5da:	ad 01       	movw	r20, r26
     5dc:	22 0f       	add	r18, r18
     5de:	33 1f       	adc	r19, r19
     5e0:	44 1f       	adc	r20, r20
     5e2:	55 1f       	adc	r21, r21
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	74 e2       	ldi	r23, 0x24	; 36
     5e8:	84 ef       	ldi	r24, 0xF4	; 244
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	09 d2       	rcall	.+1042   	; 0xa00 <__udivmodsi4>
     5ee:	ba 01       	movw	r22, r20
     5f0:	a9 01       	movw	r20, r18
     5f2:	41 50       	subi	r20, 0x01	; 1
     5f4:	51 09       	sbc	r21, r1
     5f6:	61 09       	sbc	r22, r1
     5f8:	71 09       	sbc	r23, r1
		UBRR0H = (temp >> 8) & 0xFF;
     5fa:	bb 27       	eor	r27, r27
     5fc:	a7 2f       	mov	r26, r23
     5fe:	96 2f       	mov	r25, r22
     600:	85 2f       	mov	r24, r21
     602:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
		UBRR0L = temp & 0xFF;
     606:	49 b9       	out	0x09, r20	; 9
		SETB(UCSR0A, 1);
     608:	59 9a       	sbi	0x0b, 1	; 11
		break;
		default:
		break;
	}
	
	switch(huart->Init.WordLength)
     60a:	8d 81       	ldd	r24, Y+5	; 0x05
     60c:	82 30       	cpi	r24, 0x02	; 2
     60e:	f9 f0       	breq	.+62     	; 0x64e <UART0_Init+0xfa>
     610:	28 f4       	brcc	.+10     	; 0x61c <UART0_Init+0xc8>
     612:	88 23       	and	r24, r24
     614:	41 f0       	breq	.+16     	; 0x626 <UART0_Init+0xd2>
     616:	81 30       	cpi	r24, 0x01	; 1
     618:	81 f0       	breq	.+32     	; 0x63a <UART0_Init+0xe6>
     61a:	36 c0       	rjmp	.+108    	; 0x688 <UART0_Init+0x134>
     61c:	83 30       	cpi	r24, 0x03	; 3
     61e:	09 f1       	breq	.+66     	; 0x662 <UART0_Init+0x10e>
     620:	84 30       	cpi	r24, 0x04	; 4
     622:	49 f1       	breq	.+82     	; 0x676 <UART0_Init+0x122>
     624:	31 c0       	rjmp	.+98     	; 0x688 <UART0_Init+0x134>
	{
		case UART_WORDLENGTH_8B:
		CLRB(UCSR0B, 2);
     626:	52 98       	cbi	0x0a, 2	; 10
		SETB(UCSR0C, 2);
     628:	e5 e9       	ldi	r30, 0x95	; 149
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	84 60       	ori	r24, 0x04	; 4
     630:	80 83       	st	Z, r24
		SETB(UCSR0C, 1);
     632:	80 81       	ld	r24, Z
     634:	82 60       	ori	r24, 0x02	; 2
     636:	80 83       	st	Z, r24
		break;
     638:	27 c0       	rjmp	.+78     	; 0x688 <UART0_Init+0x134>
		case UART_WORDLENGTH_5B:
		CLRB(UCSR0B, 2);
     63a:	52 98       	cbi	0x0a, 2	; 10
		CLRB(UCSR0C, 2);
     63c:	e5 e9       	ldi	r30, 0x95	; 149
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	8b 7f       	andi	r24, 0xFB	; 251
     644:	80 83       	st	Z, r24
		CLRB(UCSR0C, 1);
     646:	80 81       	ld	r24, Z
     648:	8d 7f       	andi	r24, 0xFD	; 253
     64a:	80 83       	st	Z, r24
		break;
     64c:	1d c0       	rjmp	.+58     	; 0x688 <UART0_Init+0x134>
		case UART_WORDLENGTH_6B:
		CLRB(UCSR0B, 2);
     64e:	52 98       	cbi	0x0a, 2	; 10
		CLRB(UCSR0C, 2);
     650:	e5 e9       	ldi	r30, 0x95	; 149
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	8b 7f       	andi	r24, 0xFB	; 251
     658:	80 83       	st	Z, r24
		SETB(UCSR0C, 1);
     65a:	80 81       	ld	r24, Z
     65c:	82 60       	ori	r24, 0x02	; 2
     65e:	80 83       	st	Z, r24
		break;
     660:	13 c0       	rjmp	.+38     	; 0x688 <UART0_Init+0x134>
		case UART_WORDLENGTH_7B:
		CLRB(UCSR0B, 2);
     662:	52 98       	cbi	0x0a, 2	; 10
		SETB(UCSR0C, 2);
     664:	e5 e9       	ldi	r30, 0x95	; 149
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	84 60       	ori	r24, 0x04	; 4
     66c:	80 83       	st	Z, r24
		CLRB(UCSR0C, 1);
     66e:	80 81       	ld	r24, Z
     670:	8d 7f       	andi	r24, 0xFD	; 253
     672:	80 83       	st	Z, r24
		break;
     674:	09 c0       	rjmp	.+18     	; 0x688 <UART0_Init+0x134>
		case UART_WORDLENGTH_9B:
		SETB(UCSR0B, 2);
     676:	52 9a       	sbi	0x0a, 2	; 10
		SETB(UCSR0C, 2);
     678:	e5 e9       	ldi	r30, 0x95	; 149
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	84 60       	ori	r24, 0x04	; 4
     680:	80 83       	st	Z, r24
		SETB(UCSR0C, 1);
     682:	80 81       	ld	r24, Z
     684:	82 60       	ori	r24, 0x02	; 2
     686:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	
	switch(huart->Init.StopBits)
     688:	8e 81       	ldd	r24, Y+6	; 0x06
     68a:	88 23       	and	r24, r24
     68c:	19 f0       	breq	.+6      	; 0x694 <UART0_Init+0x140>
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	39 f0       	breq	.+14     	; 0x6a0 <UART0_Init+0x14c>
     692:	0b c0       	rjmp	.+22     	; 0x6aa <UART0_Init+0x156>
	{
		case UART_STOPBITS_1:
		CLRB(UCSR0C, 4);
     694:	e5 e9       	ldi	r30, 0x95	; 149
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	80 81       	ld	r24, Z
     69a:	8f 7e       	andi	r24, 0xEF	; 239
     69c:	80 83       	st	Z, r24
		break;
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <UART0_Init+0x156>
		case UART_STOPBITS_2:
		SETB(UCSR0C, 4);
     6a0:	e5 e9       	ldi	r30, 0x95	; 149
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	80 61       	ori	r24, 0x10	; 16
     6a8:	80 83       	st	Z, r24
		break;
	}
	
	switch(huart->Init.Parity)
     6aa:	8f 81       	ldd	r24, Y+7	; 0x07
     6ac:	81 30       	cpi	r24, 0x01	; 1
     6ae:	71 f0       	breq	.+28     	; 0x6cc <UART0_Init+0x178>
     6b0:	18 f0       	brcs	.+6      	; 0x6b8 <UART0_Init+0x164>
     6b2:	82 30       	cpi	r24, 0x02	; 2
     6b4:	a9 f0       	breq	.+42     	; 0x6e0 <UART0_Init+0x18c>
     6b6:	20 c0       	rjmp	.+64     	; 0x6f8 <UART0_Init+0x1a4>
	{
		case UART_PARITY_NONE:
		CLRB(UCSR0C, 6);
     6b8:	e5 e9       	ldi	r30, 0x95	; 149
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	8f 7b       	andi	r24, 0xBF	; 191
     6c0:	80 83       	st	Z, r24
		CLRB(UCSR0C, 5);
     6c2:	80 81       	ld	r24, Z
     6c4:	8f 7d       	andi	r24, 0xDF	; 223
     6c6:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
	switch(huart->Init.Parity)
	{
		case UART_PARITY_NONE:
		CLRB(UCSR0C, 6);
		CLRB(UCSR0C, 5);
		break;
     6ca:	17 c0       	rjmp	.+46     	; 0x6fa <UART0_Init+0x1a6>
		case UART_PARITY_EVEN:
		SETB(UCSR0C, 6);
     6cc:	e5 e9       	ldi	r30, 0x95	; 149
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	80 81       	ld	r24, Z
     6d2:	80 64       	ori	r24, 0x40	; 64
     6d4:	80 83       	st	Z, r24
		CLRB(UCSR0C, 5);
     6d6:	80 81       	ld	r24, Z
     6d8:	8f 7d       	andi	r24, 0xDF	; 223
     6da:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     6dc:	80 e0       	ldi	r24, 0x00	; 0
		CLRB(UCSR0C, 5);
		break;
		case UART_PARITY_EVEN:
		SETB(UCSR0C, 6);
		CLRB(UCSR0C, 5);
		break;
     6de:	0d c0       	rjmp	.+26     	; 0x6fa <UART0_Init+0x1a6>
		case  UART_PARITY_ODD:
		SETB(UCSR0C, 6);
     6e0:	e5 e9       	ldi	r30, 0x95	; 149
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	80 64       	ori	r24, 0x40	; 64
     6e8:	80 83       	st	Z, r24
		SETB(UCSR0C, 5);
     6ea:	80 81       	ld	r24, Z
     6ec:	80 62       	ori	r24, 0x20	; 32
     6ee:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     6f0:	80 e0       	ldi	r24, 0x00	; 0
		CLRB(UCSR0C, 5);
		break;
		case  UART_PARITY_ODD:
		SETB(UCSR0C, 6);
		SETB(UCSR0C, 5);
		break;
     6f2:	03 c0       	rjmp	.+6      	; 0x6fa <UART0_Init+0x1a6>
StatusTypeDef UART0_Init(UART_HandleTypeDef *huart)
{
	uint32_t temp;
	if (huart == NULL)
	{
		return ERROR;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <UART0_Init+0x1a6>
		default:
		break;
	}
	
	
	return OK;
     6f8:	80 e0       	ldi	r24, 0x00	; 0
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <UART1_Init>:

StatusTypeDef UART1_Init(UART_HandleTypeDef *huart)
{
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	ec 01       	movw	r28, r24
	uint32_t temp;
	if (huart == NULL)
     706:	89 2b       	or	r24, r25
     708:	09 f4       	brne	.+2      	; 0x70c <UART1_Init+0xc>
     70a:	e8 c0       	rjmp	.+464    	; 0x8dc <UART1_Init+0x1dc>
	{
		return ERROR;
	}
	
	switch(huart->Init.OverSampling)
     70c:	88 85       	ldd	r24, Y+8	; 0x08
     70e:	88 23       	and	r24, r24
     710:	19 f0       	breq	.+6      	; 0x718 <UART1_Init+0x18>
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	81 f1       	breq	.+96     	; 0x776 <UART1_Init+0x76>
     716:	59 c0       	rjmp	.+178    	; 0x7ca <UART1_Init+0xca>
	{
		case UART_OVERSAMPLING_8:
		temp = (F_CPU / (16 * huart->Init.BaudRate)) - 1;
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	9a 81       	ldd	r25, Y+2	; 0x02
     71c:	ab 81       	ldd	r26, Y+3	; 0x03
     71e:	bc 81       	ldd	r27, Y+4	; 0x04
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	aa 1f       	adc	r26, r26
     726:	bb 1f       	adc	r27, r27
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	aa 1f       	adc	r26, r26
     72e:	bb 1f       	adc	r27, r27
     730:	9c 01       	movw	r18, r24
     732:	ad 01       	movw	r20, r26
     734:	22 0f       	add	r18, r18
     736:	33 1f       	adc	r19, r19
     738:	44 1f       	adc	r20, r20
     73a:	55 1f       	adc	r21, r21
     73c:	22 0f       	add	r18, r18
     73e:	33 1f       	adc	r19, r19
     740:	44 1f       	adc	r20, r20
     742:	55 1f       	adc	r21, r21
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	74 e2       	ldi	r23, 0x24	; 36
     748:	84 ef       	ldi	r24, 0xF4	; 244
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	59 d1       	rcall	.+690    	; 0xa00 <__udivmodsi4>
     74e:	ba 01       	movw	r22, r20
     750:	a9 01       	movw	r20, r18
     752:	41 50       	subi	r20, 0x01	; 1
     754:	51 09       	sbc	r21, r1
     756:	61 09       	sbc	r22, r1
     758:	71 09       	sbc	r23, r1
		UBRR1H = (temp >> 8) & 0xFF;
     75a:	bb 27       	eor	r27, r27
     75c:	a7 2f       	mov	r26, r23
     75e:	96 2f       	mov	r25, r22
     760:	85 2f       	mov	r24, r21
     762:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		UBRR1L = temp & 0xFF;
     766:	40 93 99 00 	sts	0x0099, r20	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
		CLRB(UCSR1A, 1);
     76a:	eb e9       	ldi	r30, 0x9B	; 155
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	8d 7f       	andi	r24, 0xFD	; 253
     772:	80 83       	st	Z, r24
		break;
     774:	2a c0       	rjmp	.+84     	; 0x7ca <UART1_Init+0xca>
		case UART_OVERSAMPLING_16:
		temp = (F_CPU / (8 * huart->Init.BaudRate)) - 1;
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	9a 81       	ldd	r25, Y+2	; 0x02
     77a:	ab 81       	ldd	r26, Y+3	; 0x03
     77c:	bc 81       	ldd	r27, Y+4	; 0x04
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	aa 1f       	adc	r26, r26
     784:	bb 1f       	adc	r27, r27
     786:	88 0f       	add	r24, r24
     788:	99 1f       	adc	r25, r25
     78a:	aa 1f       	adc	r26, r26
     78c:	bb 1f       	adc	r27, r27
     78e:	9c 01       	movw	r18, r24
     790:	ad 01       	movw	r20, r26
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	44 1f       	adc	r20, r20
     798:	55 1f       	adc	r21, r21
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	74 e2       	ldi	r23, 0x24	; 36
     79e:	84 ef       	ldi	r24, 0xF4	; 244
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	2e d1       	rcall	.+604    	; 0xa00 <__udivmodsi4>
     7a4:	ba 01       	movw	r22, r20
     7a6:	a9 01       	movw	r20, r18
     7a8:	41 50       	subi	r20, 0x01	; 1
     7aa:	51 09       	sbc	r21, r1
     7ac:	61 09       	sbc	r22, r1
     7ae:	71 09       	sbc	r23, r1
		UBRR1H = (temp >> 8) & 0xFF;
     7b0:	bb 27       	eor	r27, r27
     7b2:	a7 2f       	mov	r26, r23
     7b4:	96 2f       	mov	r25, r22
     7b6:	85 2f       	mov	r24, r21
     7b8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		UBRR1L = temp & 0xFF;
     7bc:	40 93 99 00 	sts	0x0099, r20	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
		SETB(UCSR1A, 1);
     7c0:	eb e9       	ldi	r30, 0x9B	; 155
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	82 60       	ori	r24, 0x02	; 2
     7c8:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	
	switch(huart->Init.WordLength)
     7ca:	8d 81       	ldd	r24, Y+5	; 0x05
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	39 f1       	breq	.+78     	; 0x81e <UART1_Init+0x11e>
     7d0:	28 f4       	brcc	.+10     	; 0x7dc <UART1_Init+0xdc>
     7d2:	88 23       	and	r24, r24
     7d4:	41 f0       	breq	.+16     	; 0x7e6 <UART1_Init+0xe6>
     7d6:	81 30       	cpi	r24, 0x01	; 1
     7d8:	a1 f0       	breq	.+40     	; 0x802 <UART1_Init+0x102>
     7da:	4a c0       	rjmp	.+148    	; 0x870 <UART1_Init+0x170>
     7dc:	83 30       	cpi	r24, 0x03	; 3
     7de:	69 f1       	breq	.+90     	; 0x83a <UART1_Init+0x13a>
     7e0:	84 30       	cpi	r24, 0x04	; 4
     7e2:	c9 f1       	breq	.+114    	; 0x856 <UART1_Init+0x156>
     7e4:	45 c0       	rjmp	.+138    	; 0x870 <UART1_Init+0x170>
	{
		case UART_WORDLENGTH_8B:
		CLRB(UCSR1B, 2);
     7e6:	ea e9       	ldi	r30, 0x9A	; 154
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	8b 7f       	andi	r24, 0xFB	; 251
     7ee:	80 83       	st	Z, r24
		SETB(UCSR1C, 2);
     7f0:	ed e9       	ldi	r30, 0x9D	; 157
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	84 60       	ori	r24, 0x04	; 4
     7f8:	80 83       	st	Z, r24
		SETB(UCSR1C, 1);
     7fa:	80 81       	ld	r24, Z
     7fc:	82 60       	ori	r24, 0x02	; 2
     7fe:	80 83       	st	Z, r24
		break;
     800:	37 c0       	rjmp	.+110    	; 0x870 <UART1_Init+0x170>
		case UART_WORDLENGTH_5B:
		CLRB(UCSR1B, 2);
     802:	ea e9       	ldi	r30, 0x9A	; 154
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	8b 7f       	andi	r24, 0xFB	; 251
     80a:	80 83       	st	Z, r24
		CLRB(UCSR1C, 2);
     80c:	ed e9       	ldi	r30, 0x9D	; 157
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	8b 7f       	andi	r24, 0xFB	; 251
     814:	80 83       	st	Z, r24
		CLRB(UCSR1C, 1);
     816:	80 81       	ld	r24, Z
     818:	8d 7f       	andi	r24, 0xFD	; 253
     81a:	80 83       	st	Z, r24
		break;
     81c:	29 c0       	rjmp	.+82     	; 0x870 <UART1_Init+0x170>
		case UART_WORDLENGTH_6B:
		CLRB(UCSR1B, 2);
     81e:	ea e9       	ldi	r30, 0x9A	; 154
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	8b 7f       	andi	r24, 0xFB	; 251
     826:	80 83       	st	Z, r24
		CLRB(UCSR1C, 2);
     828:	ed e9       	ldi	r30, 0x9D	; 157
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	8b 7f       	andi	r24, 0xFB	; 251
     830:	80 83       	st	Z, r24
		SETB(UCSR1C, 1);
     832:	80 81       	ld	r24, Z
     834:	82 60       	ori	r24, 0x02	; 2
     836:	80 83       	st	Z, r24
		break;
     838:	1b c0       	rjmp	.+54     	; 0x870 <UART1_Init+0x170>
		case UART_WORDLENGTH_7B:
		CLRB(UCSR1B, 2);
     83a:	ea e9       	ldi	r30, 0x9A	; 154
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	8b 7f       	andi	r24, 0xFB	; 251
     842:	80 83       	st	Z, r24
		SETB(UCSR1C, 2);
     844:	ed e9       	ldi	r30, 0x9D	; 157
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	84 60       	ori	r24, 0x04	; 4
     84c:	80 83       	st	Z, r24
		CLRB(UCSR1C, 1);
     84e:	80 81       	ld	r24, Z
     850:	8d 7f       	andi	r24, 0xFD	; 253
     852:	80 83       	st	Z, r24
		break;
     854:	0d c0       	rjmp	.+26     	; 0x870 <UART1_Init+0x170>
		case UART_WORDLENGTH_9B:
		SETB(UCSR1B, 2);
     856:	ea e9       	ldi	r30, 0x9A	; 154
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	84 60       	ori	r24, 0x04	; 4
     85e:	80 83       	st	Z, r24
		SETB(UCSR1C, 2);
     860:	ed e9       	ldi	r30, 0x9D	; 157
     862:	f0 e0       	ldi	r31, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	84 60       	ori	r24, 0x04	; 4
     868:	80 83       	st	Z, r24
		SETB(UCSR1C, 1);
     86a:	80 81       	ld	r24, Z
     86c:	82 60       	ori	r24, 0x02	; 2
     86e:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	
	switch(huart->Init.StopBits)
     870:	8e 81       	ldd	r24, Y+6	; 0x06
     872:	88 23       	and	r24, r24
     874:	19 f0       	breq	.+6      	; 0x87c <UART1_Init+0x17c>
     876:	81 30       	cpi	r24, 0x01	; 1
     878:	39 f0       	breq	.+14     	; 0x888 <UART1_Init+0x188>
     87a:	0b c0       	rjmp	.+22     	; 0x892 <UART1_Init+0x192>
	{
		case UART_STOPBITS_1:
		CLRB(UCSR1C, 4);
     87c:	ed e9       	ldi	r30, 0x9D	; 157
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	8f 7e       	andi	r24, 0xEF	; 239
     884:	80 83       	st	Z, r24
		break;
     886:	05 c0       	rjmp	.+10     	; 0x892 <UART1_Init+0x192>
		case UART_STOPBITS_2:
		SETB(UCSR1C, 4);
     888:	ed e9       	ldi	r30, 0x9D	; 157
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	80 61       	ori	r24, 0x10	; 16
     890:	80 83       	st	Z, r24
		break;
	}
	
	switch(huart->Init.Parity)
     892:	8f 81       	ldd	r24, Y+7	; 0x07
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	71 f0       	breq	.+28     	; 0x8b4 <UART1_Init+0x1b4>
     898:	18 f0       	brcs	.+6      	; 0x8a0 <UART1_Init+0x1a0>
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	a9 f0       	breq	.+42     	; 0x8c8 <UART1_Init+0x1c8>
     89e:	20 c0       	rjmp	.+64     	; 0x8e0 <UART1_Init+0x1e0>
	{
		case UART_PARITY_NONE:
		CLRB(UCSR1C, 6);
     8a0:	ed e9       	ldi	r30, 0x9D	; 157
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	80 81       	ld	r24, Z
     8a6:	8f 7b       	andi	r24, 0xBF	; 191
     8a8:	80 83       	st	Z, r24
		CLRB(UCSR1C, 5);
     8aa:	80 81       	ld	r24, Z
     8ac:	8f 7d       	andi	r24, 0xDF	; 223
     8ae:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     8b0:	80 e0       	ldi	r24, 0x00	; 0
	switch(huart->Init.Parity)
	{
		case UART_PARITY_NONE:
		CLRB(UCSR1C, 6);
		CLRB(UCSR1C, 5);
		break;
     8b2:	17 c0       	rjmp	.+46     	; 0x8e2 <UART1_Init+0x1e2>
		case UART_PARITY_EVEN:
		SETB(UCSR1C, 6);
     8b4:	ed e9       	ldi	r30, 0x9D	; 157
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	80 64       	ori	r24, 0x40	; 64
     8bc:	80 83       	st	Z, r24
		CLRB(UCSR1C, 5);
     8be:	80 81       	ld	r24, Z
     8c0:	8f 7d       	andi	r24, 0xDF	; 223
     8c2:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
		CLRB(UCSR1C, 5);
		break;
		case UART_PARITY_EVEN:
		SETB(UCSR1C, 6);
		CLRB(UCSR1C, 5);
		break;
     8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <UART1_Init+0x1e2>
		case  UART_PARITY_ODD:
		SETB(UCSR1C, 6);
     8c8:	ed e9       	ldi	r30, 0x9D	; 157
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	80 64       	ori	r24, 0x40	; 64
     8d0:	80 83       	st	Z, r24
		SETB(UCSR1C, 5);
     8d2:	80 81       	ld	r24, Z
     8d4:	80 62       	ori	r24, 0x20	; 32
     8d6:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     8d8:	80 e0       	ldi	r24, 0x00	; 0
		CLRB(UCSR1C, 5);
		break;
		case  UART_PARITY_ODD:
		SETB(UCSR1C, 6);
		SETB(UCSR1C, 5);
		break;
     8da:	03 c0       	rjmp	.+6      	; 0x8e2 <UART1_Init+0x1e2>
StatusTypeDef UART1_Init(UART_HandleTypeDef *huart)
{
	uint32_t temp;
	if (huart == NULL)
	{
		return ERROR;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <UART1_Init+0x1e2>
		default:
		break;
	}
	
	
	return OK;
     8e0:	80 e0       	ldi	r24, 0x00	; 0
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <UART_Init>:



StatusTypeDef UART_Init(UART_HandleTypeDef *huart)
{
	switch(huart->USARTn)
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 81       	ld	r18, Z
     8ec:	22 23       	and	r18, r18
     8ee:	19 f0       	breq	.+6      	; 0x8f6 <UART_Init+0xe>
     8f0:	21 30       	cpi	r18, 0x01	; 1
     8f2:	19 f0       	breq	.+6      	; 0x8fa <UART_Init+0x12>
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <UART_Init+0x14>
	{
		case USART0:
			UART0_Init(huart);
     8f6:	2e de       	rcall	.-932    	; 0x554 <UART0_Init>
		break;
		case USART1:
			UART1_Init(huart);
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <UART_Init+0x14>
     8fa:	02 df       	rcall	.-508    	; 0x700 <UART1_Init>
		break;
		default:
		break;
	}
	return OK;
}
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	08 95       	ret

00000900 <UART_Transmit>:

StatusTypeDef UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	dc 01       	movw	r26, r24
	uint8_t		*pdata8bits = NULL;
	uint16_t	*pdata16bits = NULL;

	
	huart->ErrorCode = UART_ERROR_NONE;
     90e:	55 96       	adiw	r26, 0x15	; 21
     910:	1c 92       	st	X, r1
     912:	55 97       	sbiw	r26, 0x15	; 21
	
	huart->TxXferSize = Size;
     914:	1e 96       	adiw	r26, 0x0e	; 14
     916:	5c 93       	st	X, r21
     918:	4e 93       	st	-X, r20
     91a:	1d 97       	sbiw	r26, 0x0d	; 13
	huart->TxXferCount = Size;
     91c:	52 96       	adiw	r26, 0x12	; 18
     91e:	5c 93       	st	X, r21
     920:	4e 93       	st	-X, r20
     922:	51 97       	sbiw	r26, 0x11	; 17
	
	if (huart->Init.WordLength == UART_WORDLENGTH_9B && huart->Init.Parity == UART_PARITY_NONE)
     924:	15 96       	adiw	r26, 0x05	; 5
     926:	8c 91       	ld	r24, X
     928:	15 97       	sbiw	r26, 0x05	; 5
     92a:	84 30       	cpi	r24, 0x04	; 4
     92c:	51 f4       	brne	.+20     	; 0x942 <UART_Transmit+0x42>
     92e:	17 96       	adiw	r26, 0x07	; 7
     930:	8c 91       	ld	r24, X
     932:	17 97       	sbiw	r26, 0x07	; 7
     934:	81 11       	cpse	r24, r1
     936:	08 c0       	rjmp	.+16     	; 0x948 <UART_Transmit+0x48>
	{
		pdata8bits = NULL;
		pdata16bits = (uint16_t *) pData;
     938:	06 2f       	mov	r16, r22
     93a:	17 2f       	mov	r17, r23
	huart->TxXferSize = Size;
	huart->TxXferCount = Size;
	
	if (huart->Init.WordLength == UART_WORDLENGTH_9B && huart->Init.Parity == UART_PARITY_NONE)
	{
		pdata8bits = NULL;
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	05 c0       	rjmp	.+10     	; 0x94c <UART_Transmit+0x4c>
		pdata16bits = (uint16_t *) pData;
	}
	else
	{
		pdata8bits = pData;
		pdata16bits = NULL;
     942:	00 e0       	ldi	r16, 0x00	; 0
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	02 c0       	rjmp	.+4      	; 0x94c <UART_Transmit+0x4c>
     948:	00 e0       	ldi	r16, 0x00	; 0
     94a:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	switch(huart->USARTn)
     94c:	8c 91       	ld	r24, X
     94e:	88 23       	and	r24, r24
     950:	31 f0       	breq	.+12     	; 0x95e <UART_Transmit+0x5e>
     952:	81 30       	cpi	r24, 0x01	; 1
     954:	09 f0       	breq	.+2      	; 0x958 <UART_Transmit+0x58>
     956:	46 c0       	rjmp	.+140    	; 0x9e4 <UART_Transmit+0xe4>
			}
			
		}
		break;
		case USART1:
		for(int i = 0; i < huart->TxXferCount; i++)
     958:	45 2b       	or	r20, r21
     95a:	f1 f4       	brne	.+60     	; 0x998 <UART_Transmit+0x98>
     95c:	43 c0       	rjmp	.+134    	; 0x9e4 <UART_Transmit+0xe4>
	}
	
	switch(huart->USARTn)
	{
		case USART0:
		for(int i = 0; i < huart->TxXferCount; i++)
     95e:	45 2b       	or	r20, r21
     960:	09 f4       	brne	.+2      	; 0x964 <UART_Transmit+0x64>
     962:	40 c0       	rjmp	.+128    	; 0x9e4 <UART_Transmit+0xe4>
     964:	c6 2f       	mov	r28, r22
     966:	d7 2f       	mov	r29, r23
     968:	f8 01       	movw	r30, r16
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
		{
			while (!(UCSR0A & 0x20));
     96e:	5d 9b       	sbis	0x0b, 5	; 11
     970:	fe cf       	rjmp	.-4      	; 0x96e <UART_Transmit+0x6e>
			if (pdata16bits == NULL)
     972:	01 15       	cp	r16, r1
     974:	11 05       	cpc	r17, r1
     976:	19 f4       	brne	.+6      	; 0x97e <UART_Transmit+0x7e>
			{
				UDR0 = *(pdata8bits + i);
     978:	28 81       	ld	r18, Y
     97a:	2c b9       	out	0x0c, r18	; 12
     97c:	02 c0       	rjmp	.+4      	; 0x982 <UART_Transmit+0x82>
			}
			else
			{
				UDR0 = *(pdata16bits + i);
     97e:	20 81       	ld	r18, Z
     980:	2c b9       	out	0x0c, r18	; 12
	}
	
	switch(huart->USARTn)
	{
		case USART0:
		for(int i = 0; i < huart->TxXferCount; i++)
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	21 96       	adiw	r28, 0x01	; 1
     986:	32 96       	adiw	r30, 0x02	; 2
     988:	51 96       	adiw	r26, 0x11	; 17
     98a:	2d 91       	ld	r18, X+
     98c:	3c 91       	ld	r19, X
     98e:	52 97       	sbiw	r26, 0x12	; 18
     990:	82 17       	cp	r24, r18
     992:	93 07       	cpc	r25, r19
     994:	60 f3       	brcs	.-40     	; 0x96e <UART_Transmit+0x6e>
     996:	26 c0       	rjmp	.+76     	; 0x9e4 <UART_Transmit+0xe4>
     998:	46 2f       	mov	r20, r22
     99a:	57 2f       	mov	r21, r23
     99c:	78 01       	movw	r14, r16
			}
			
		}
		break;
		case USART1:
		for(int i = 0; i < huart->TxXferCount; i++)
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
		{
			while (!(UCSR1A & 0x20));
     9a2:	eb e9       	ldi	r30, 0x9B	; 155
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
			{
				UDR1 = *(pdata8bits + i);
			}
			else
			{
				UDR1 = *(pdata16bits + i);
     9a6:	6c e9       	ldi	r22, 0x9C	; 156
     9a8:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;
		case USART1:
		for(int i = 0; i < huart->TxXferCount; i++)
		{
			while (!(UCSR1A & 0x20));
     9aa:	90 81       	ld	r25, Z
     9ac:	95 ff       	sbrs	r25, 5
     9ae:	fd cf       	rjmp	.-6      	; 0x9aa <UART_Transmit+0xaa>
			if (pdata16bits == NULL)
     9b0:	01 15       	cp	r16, r1
     9b2:	11 05       	cpc	r17, r1
     9b4:	29 f4       	brne	.+10     	; 0x9c0 <UART_Transmit+0xc0>
			{
				UDR1 = *(pdata8bits + i);
     9b6:	ea 01       	movw	r28, r20
     9b8:	88 81       	ld	r24, Y
     9ba:	eb 01       	movw	r28, r22
     9bc:	88 83       	st	Y, r24
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <UART_Transmit+0xc8>
			}
			else
			{
				UDR1 = *(pdata16bits + i);
     9c0:	e7 01       	movw	r28, r14
     9c2:	88 81       	ld	r24, Y
     9c4:	eb 01       	movw	r28, r22
     9c6:	88 83       	st	Y, r24
			}
			
		}
		break;
		case USART1:
		for(int i = 0; i < huart->TxXferCount; i++)
     9c8:	2f 5f       	subi	r18, 0xFF	; 255
     9ca:	3f 4f       	sbci	r19, 0xFF	; 255
     9cc:	4f 5f       	subi	r20, 0xFF	; 255
     9ce:	5f 4f       	sbci	r21, 0xFF	; 255
     9d0:	d2 e0       	ldi	r29, 0x02	; 2
     9d2:	ed 0e       	add	r14, r29
     9d4:	f1 1c       	adc	r15, r1
     9d6:	51 96       	adiw	r26, 0x11	; 17
     9d8:	8d 91       	ld	r24, X+
     9da:	9c 91       	ld	r25, X
     9dc:	52 97       	sbiw	r26, 0x12	; 18
     9de:	28 17       	cp	r18, r24
     9e0:	39 07       	cpc	r19, r25
     9e2:	18 f3       	brcs	.-58     	; 0x9aa <UART_Transmit+0xaa>
		break;
	}
	
	
	return OK;
}
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	08 95       	ret

000009f4 <main>:
#include "main.h"


int main(void)
{
    hwInit();
     9f4:	4e dc       	rcall	.-1892   	; 0x292 <hwInit>
	apInit();
     9f6:	76 db       	rcall	.-2324   	; 0xe4 <apInit>
	
	apMain();
     9f8:	7c db       	rcall	.-2312   	; 0xf2 <apMain>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
}
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	08 95       	ret

00000a00 <__udivmodsi4>:
     a00:	a1 e2       	ldi	r26, 0x21	; 33
     a02:	1a 2e       	mov	r1, r26
     a04:	aa 1b       	sub	r26, r26
     a06:	bb 1b       	sub	r27, r27
     a08:	fd 01       	movw	r30, r26
     a0a:	0d c0       	rjmp	.+26     	; 0xa26 <__udivmodsi4_ep>

00000a0c <__udivmodsi4_loop>:
     a0c:	aa 1f       	adc	r26, r26
     a0e:	bb 1f       	adc	r27, r27
     a10:	ee 1f       	adc	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	a2 17       	cp	r26, r18
     a16:	b3 07       	cpc	r27, r19
     a18:	e4 07       	cpc	r30, r20
     a1a:	f5 07       	cpc	r31, r21
     a1c:	20 f0       	brcs	.+8      	; 0xa26 <__udivmodsi4_ep>
     a1e:	a2 1b       	sub	r26, r18
     a20:	b3 0b       	sbc	r27, r19
     a22:	e4 0b       	sbc	r30, r20
     a24:	f5 0b       	sbc	r31, r21

00000a26 <__udivmodsi4_ep>:
     a26:	66 1f       	adc	r22, r22
     a28:	77 1f       	adc	r23, r23
     a2a:	88 1f       	adc	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	1a 94       	dec	r1
     a30:	69 f7       	brne	.-38     	; 0xa0c <__udivmodsi4_loop>
     a32:	60 95       	com	r22
     a34:	70 95       	com	r23
     a36:	80 95       	com	r24
     a38:	90 95       	com	r25
     a3a:	9b 01       	movw	r18, r22
     a3c:	ac 01       	movw	r20, r24
     a3e:	bd 01       	movw	r22, r26
     a40:	cf 01       	movw	r24, r30
     a42:	08 95       	ret

00000a44 <__tablejump2__>:
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	00 24       	eor	r0, r0
     a4a:	00 1c       	adc	r0, r0
     a4c:	0b be       	out	0x3b, r0	; 59
     a4e:	07 90       	elpm	r0, Z+
     a50:	f6 91       	elpm	r31, Z
     a52:	e0 2d       	mov	r30, r0
     a54:	09 94       	ijmp

00000a56 <vsnprintf>:
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	2e 97       	sbiw	r28, 0x0e	; 14
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	8c 01       	movw	r16, r24
     a70:	fa 01       	movw	r30, r20
     a72:	86 e0       	ldi	r24, 0x06	; 6
     a74:	8c 83       	std	Y+4, r24	; 0x04
     a76:	1a 83       	std	Y+2, r17	; 0x02
     a78:	09 83       	std	Y+1, r16	; 0x01
     a7a:	77 ff       	sbrs	r23, 7
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <vsnprintf+0x2c>
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e8       	ldi	r23, 0x80	; 128
     a82:	cb 01       	movw	r24, r22
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	9e 83       	std	Y+6, r25	; 0x06
     a88:	8d 83       	std	Y+5, r24	; 0x05
     a8a:	a9 01       	movw	r20, r18
     a8c:	bf 01       	movw	r22, r30
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	19 d0       	rcall	.+50     	; 0xac6 <vfprintf>
     a94:	4d 81       	ldd	r20, Y+5	; 0x05
     a96:	5e 81       	ldd	r21, Y+6	; 0x06
     a98:	57 fd       	sbrc	r21, 7
     a9a:	0a c0       	rjmp	.+20     	; 0xab0 <vsnprintf+0x5a>
     a9c:	2f 81       	ldd	r18, Y+7	; 0x07
     a9e:	38 85       	ldd	r19, Y+8	; 0x08
     aa0:	42 17       	cp	r20, r18
     aa2:	53 07       	cpc	r21, r19
     aa4:	0c f4       	brge	.+2      	; 0xaa8 <vsnprintf+0x52>
     aa6:	9a 01       	movw	r18, r20
     aa8:	f8 01       	movw	r30, r16
     aaa:	e2 0f       	add	r30, r18
     aac:	f3 1f       	adc	r31, r19
     aae:	10 82       	st	Z, r1
     ab0:	2e 96       	adiw	r28, 0x0e	; 14
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	f8 94       	cli
     ab6:	de bf       	out	0x3e, r29	; 62
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	08 95       	ret

00000ac6 <vfprintf>:
     ac6:	2f 92       	push	r2
     ac8:	3f 92       	push	r3
     aca:	4f 92       	push	r4
     acc:	5f 92       	push	r5
     ace:	6f 92       	push	r6
     ad0:	7f 92       	push	r7
     ad2:	8f 92       	push	r8
     ad4:	9f 92       	push	r9
     ad6:	af 92       	push	r10
     ad8:	bf 92       	push	r11
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	cd b7       	in	r28, 0x3d	; 61
     aec:	de b7       	in	r29, 0x3e	; 62
     aee:	2b 97       	sbiw	r28, 0x0b	; 11
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	6c 01       	movw	r12, r24
     afc:	7b 01       	movw	r14, r22
     afe:	8a 01       	movw	r16, r20
     b00:	fc 01       	movw	r30, r24
     b02:	17 82       	std	Z+7, r1	; 0x07
     b04:	16 82       	std	Z+6, r1	; 0x06
     b06:	83 81       	ldd	r24, Z+3	; 0x03
     b08:	81 ff       	sbrs	r24, 1
     b0a:	bf c1       	rjmp	.+894    	; 0xe8a <vfprintf+0x3c4>
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	3c 01       	movw	r6, r24
     b12:	f6 01       	movw	r30, r12
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	f7 01       	movw	r30, r14
     b18:	93 fd       	sbrc	r25, 3
     b1a:	85 91       	lpm	r24, Z+
     b1c:	93 ff       	sbrs	r25, 3
     b1e:	81 91       	ld	r24, Z+
     b20:	7f 01       	movw	r14, r30
     b22:	88 23       	and	r24, r24
     b24:	09 f4       	brne	.+2      	; 0xb28 <vfprintf+0x62>
     b26:	ad c1       	rjmp	.+858    	; 0xe82 <vfprintf+0x3bc>
     b28:	85 32       	cpi	r24, 0x25	; 37
     b2a:	39 f4       	brne	.+14     	; 0xb3a <vfprintf+0x74>
     b2c:	93 fd       	sbrc	r25, 3
     b2e:	85 91       	lpm	r24, Z+
     b30:	93 ff       	sbrs	r25, 3
     b32:	81 91       	ld	r24, Z+
     b34:	7f 01       	movw	r14, r30
     b36:	85 32       	cpi	r24, 0x25	; 37
     b38:	21 f4       	brne	.+8      	; 0xb42 <vfprintf+0x7c>
     b3a:	b6 01       	movw	r22, r12
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	d6 d1       	rcall	.+940    	; 0xeec <fputc>
     b40:	e8 cf       	rjmp	.-48     	; 0xb12 <vfprintf+0x4c>
     b42:	91 2c       	mov	r9, r1
     b44:	21 2c       	mov	r2, r1
     b46:	31 2c       	mov	r3, r1
     b48:	ff e1       	ldi	r31, 0x1F	; 31
     b4a:	f3 15       	cp	r31, r3
     b4c:	d8 f0       	brcs	.+54     	; 0xb84 <vfprintf+0xbe>
     b4e:	8b 32       	cpi	r24, 0x2B	; 43
     b50:	79 f0       	breq	.+30     	; 0xb70 <vfprintf+0xaa>
     b52:	38 f4       	brcc	.+14     	; 0xb62 <vfprintf+0x9c>
     b54:	80 32       	cpi	r24, 0x20	; 32
     b56:	79 f0       	breq	.+30     	; 0xb76 <vfprintf+0xb0>
     b58:	83 32       	cpi	r24, 0x23	; 35
     b5a:	a1 f4       	brne	.+40     	; 0xb84 <vfprintf+0xbe>
     b5c:	23 2d       	mov	r18, r3
     b5e:	20 61       	ori	r18, 0x10	; 16
     b60:	1d c0       	rjmp	.+58     	; 0xb9c <vfprintf+0xd6>
     b62:	8d 32       	cpi	r24, 0x2D	; 45
     b64:	61 f0       	breq	.+24     	; 0xb7e <vfprintf+0xb8>
     b66:	80 33       	cpi	r24, 0x30	; 48
     b68:	69 f4       	brne	.+26     	; 0xb84 <vfprintf+0xbe>
     b6a:	23 2d       	mov	r18, r3
     b6c:	21 60       	ori	r18, 0x01	; 1
     b6e:	16 c0       	rjmp	.+44     	; 0xb9c <vfprintf+0xd6>
     b70:	83 2d       	mov	r24, r3
     b72:	82 60       	ori	r24, 0x02	; 2
     b74:	38 2e       	mov	r3, r24
     b76:	e3 2d       	mov	r30, r3
     b78:	e4 60       	ori	r30, 0x04	; 4
     b7a:	3e 2e       	mov	r3, r30
     b7c:	2a c0       	rjmp	.+84     	; 0xbd2 <vfprintf+0x10c>
     b7e:	f3 2d       	mov	r31, r3
     b80:	f8 60       	ori	r31, 0x08	; 8
     b82:	1d c0       	rjmp	.+58     	; 0xbbe <vfprintf+0xf8>
     b84:	37 fc       	sbrc	r3, 7
     b86:	2d c0       	rjmp	.+90     	; 0xbe2 <vfprintf+0x11c>
     b88:	20 ed       	ldi	r18, 0xD0	; 208
     b8a:	28 0f       	add	r18, r24
     b8c:	2a 30       	cpi	r18, 0x0A	; 10
     b8e:	40 f0       	brcs	.+16     	; 0xba0 <vfprintf+0xda>
     b90:	8e 32       	cpi	r24, 0x2E	; 46
     b92:	b9 f4       	brne	.+46     	; 0xbc2 <vfprintf+0xfc>
     b94:	36 fc       	sbrc	r3, 6
     b96:	75 c1       	rjmp	.+746    	; 0xe82 <vfprintf+0x3bc>
     b98:	23 2d       	mov	r18, r3
     b9a:	20 64       	ori	r18, 0x40	; 64
     b9c:	32 2e       	mov	r3, r18
     b9e:	19 c0       	rjmp	.+50     	; 0xbd2 <vfprintf+0x10c>
     ba0:	36 fe       	sbrs	r3, 6
     ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <vfprintf+0xea>
     ba4:	8a e0       	ldi	r24, 0x0A	; 10
     ba6:	98 9e       	mul	r9, r24
     ba8:	20 0d       	add	r18, r0
     baa:	11 24       	eor	r1, r1
     bac:	92 2e       	mov	r9, r18
     bae:	11 c0       	rjmp	.+34     	; 0xbd2 <vfprintf+0x10c>
     bb0:	ea e0       	ldi	r30, 0x0A	; 10
     bb2:	2e 9e       	mul	r2, r30
     bb4:	20 0d       	add	r18, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	22 2e       	mov	r2, r18
     bba:	f3 2d       	mov	r31, r3
     bbc:	f0 62       	ori	r31, 0x20	; 32
     bbe:	3f 2e       	mov	r3, r31
     bc0:	08 c0       	rjmp	.+16     	; 0xbd2 <vfprintf+0x10c>
     bc2:	8c 36       	cpi	r24, 0x6C	; 108
     bc4:	21 f4       	brne	.+8      	; 0xbce <vfprintf+0x108>
     bc6:	83 2d       	mov	r24, r3
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	38 2e       	mov	r3, r24
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <vfprintf+0x10c>
     bce:	88 36       	cpi	r24, 0x68	; 104
     bd0:	41 f4       	brne	.+16     	; 0xbe2 <vfprintf+0x11c>
     bd2:	f7 01       	movw	r30, r14
     bd4:	93 fd       	sbrc	r25, 3
     bd6:	85 91       	lpm	r24, Z+
     bd8:	93 ff       	sbrs	r25, 3
     bda:	81 91       	ld	r24, Z+
     bdc:	7f 01       	movw	r14, r30
     bde:	81 11       	cpse	r24, r1
     be0:	b3 cf       	rjmp	.-154    	; 0xb48 <vfprintf+0x82>
     be2:	98 2f       	mov	r25, r24
     be4:	9f 7d       	andi	r25, 0xDF	; 223
     be6:	95 54       	subi	r25, 0x45	; 69
     be8:	93 30       	cpi	r25, 0x03	; 3
     bea:	28 f4       	brcc	.+10     	; 0xbf6 <vfprintf+0x130>
     bec:	0c 5f       	subi	r16, 0xFC	; 252
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	9f e3       	ldi	r25, 0x3F	; 63
     bf2:	99 83       	std	Y+1, r25	; 0x01
     bf4:	0d c0       	rjmp	.+26     	; 0xc10 <vfprintf+0x14a>
     bf6:	83 36       	cpi	r24, 0x63	; 99
     bf8:	31 f0       	breq	.+12     	; 0xc06 <vfprintf+0x140>
     bfa:	83 37       	cpi	r24, 0x73	; 115
     bfc:	71 f0       	breq	.+28     	; 0xc1a <vfprintf+0x154>
     bfe:	83 35       	cpi	r24, 0x53	; 83
     c00:	09 f0       	breq	.+2      	; 0xc04 <vfprintf+0x13e>
     c02:	55 c0       	rjmp	.+170    	; 0xcae <vfprintf+0x1e8>
     c04:	20 c0       	rjmp	.+64     	; 0xc46 <vfprintf+0x180>
     c06:	f8 01       	movw	r30, r16
     c08:	80 81       	ld	r24, Z
     c0a:	89 83       	std	Y+1, r24	; 0x01
     c0c:	0e 5f       	subi	r16, 0xFE	; 254
     c0e:	1f 4f       	sbci	r17, 0xFF	; 255
     c10:	88 24       	eor	r8, r8
     c12:	83 94       	inc	r8
     c14:	91 2c       	mov	r9, r1
     c16:	53 01       	movw	r10, r6
     c18:	12 c0       	rjmp	.+36     	; 0xc3e <vfprintf+0x178>
     c1a:	28 01       	movw	r4, r16
     c1c:	f2 e0       	ldi	r31, 0x02	; 2
     c1e:	4f 0e       	add	r4, r31
     c20:	51 1c       	adc	r5, r1
     c22:	f8 01       	movw	r30, r16
     c24:	a0 80       	ld	r10, Z
     c26:	b1 80       	ldd	r11, Z+1	; 0x01
     c28:	36 fe       	sbrs	r3, 6
     c2a:	03 c0       	rjmp	.+6      	; 0xc32 <vfprintf+0x16c>
     c2c:	69 2d       	mov	r22, r9
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <vfprintf+0x170>
     c32:	6f ef       	ldi	r22, 0xFF	; 255
     c34:	7f ef       	ldi	r23, 0xFF	; 255
     c36:	c5 01       	movw	r24, r10
     c38:	4e d1       	rcall	.+668    	; 0xed6 <strnlen>
     c3a:	4c 01       	movw	r8, r24
     c3c:	82 01       	movw	r16, r4
     c3e:	f3 2d       	mov	r31, r3
     c40:	ff 77       	andi	r31, 0x7F	; 127
     c42:	3f 2e       	mov	r3, r31
     c44:	15 c0       	rjmp	.+42     	; 0xc70 <vfprintf+0x1aa>
     c46:	28 01       	movw	r4, r16
     c48:	22 e0       	ldi	r18, 0x02	; 2
     c4a:	42 0e       	add	r4, r18
     c4c:	51 1c       	adc	r5, r1
     c4e:	f8 01       	movw	r30, r16
     c50:	a0 80       	ld	r10, Z
     c52:	b1 80       	ldd	r11, Z+1	; 0x01
     c54:	36 fe       	sbrs	r3, 6
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <vfprintf+0x198>
     c58:	69 2d       	mov	r22, r9
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <vfprintf+0x19c>
     c5e:	6f ef       	ldi	r22, 0xFF	; 255
     c60:	7f ef       	ldi	r23, 0xFF	; 255
     c62:	c5 01       	movw	r24, r10
     c64:	2d d1       	rcall	.+602    	; 0xec0 <strnlen_P>
     c66:	4c 01       	movw	r8, r24
     c68:	f3 2d       	mov	r31, r3
     c6a:	f0 68       	ori	r31, 0x80	; 128
     c6c:	3f 2e       	mov	r3, r31
     c6e:	82 01       	movw	r16, r4
     c70:	33 fc       	sbrc	r3, 3
     c72:	19 c0       	rjmp	.+50     	; 0xca6 <vfprintf+0x1e0>
     c74:	82 2d       	mov	r24, r2
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	88 16       	cp	r8, r24
     c7a:	99 06       	cpc	r9, r25
     c7c:	a0 f4       	brcc	.+40     	; 0xca6 <vfprintf+0x1e0>
     c7e:	b6 01       	movw	r22, r12
     c80:	80 e2       	ldi	r24, 0x20	; 32
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	33 d1       	rcall	.+614    	; 0xeec <fputc>
     c86:	2a 94       	dec	r2
     c88:	f5 cf       	rjmp	.-22     	; 0xc74 <vfprintf+0x1ae>
     c8a:	f5 01       	movw	r30, r10
     c8c:	37 fc       	sbrc	r3, 7
     c8e:	85 91       	lpm	r24, Z+
     c90:	37 fe       	sbrs	r3, 7
     c92:	81 91       	ld	r24, Z+
     c94:	5f 01       	movw	r10, r30
     c96:	b6 01       	movw	r22, r12
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	28 d1       	rcall	.+592    	; 0xeec <fputc>
     c9c:	21 10       	cpse	r2, r1
     c9e:	2a 94       	dec	r2
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	82 1a       	sub	r8, r18
     ca4:	91 08       	sbc	r9, r1
     ca6:	81 14       	cp	r8, r1
     ca8:	91 04       	cpc	r9, r1
     caa:	79 f7       	brne	.-34     	; 0xc8a <vfprintf+0x1c4>
     cac:	e1 c0       	rjmp	.+450    	; 0xe70 <vfprintf+0x3aa>
     cae:	84 36       	cpi	r24, 0x64	; 100
     cb0:	11 f0       	breq	.+4      	; 0xcb6 <vfprintf+0x1f0>
     cb2:	89 36       	cpi	r24, 0x69	; 105
     cb4:	39 f5       	brne	.+78     	; 0xd04 <vfprintf+0x23e>
     cb6:	f8 01       	movw	r30, r16
     cb8:	37 fe       	sbrs	r3, 7
     cba:	07 c0       	rjmp	.+14     	; 0xcca <vfprintf+0x204>
     cbc:	60 81       	ld	r22, Z
     cbe:	71 81       	ldd	r23, Z+1	; 0x01
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	0c 5f       	subi	r16, 0xFC	; 252
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	08 c0       	rjmp	.+16     	; 0xcda <vfprintf+0x214>
     cca:	60 81       	ld	r22, Z
     ccc:	71 81       	ldd	r23, Z+1	; 0x01
     cce:	07 2e       	mov	r0, r23
     cd0:	00 0c       	add	r0, r0
     cd2:	88 0b       	sbc	r24, r24
     cd4:	99 0b       	sbc	r25, r25
     cd6:	0e 5f       	subi	r16, 0xFE	; 254
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	f3 2d       	mov	r31, r3
     cdc:	ff 76       	andi	r31, 0x6F	; 111
     cde:	3f 2e       	mov	r3, r31
     ce0:	97 ff       	sbrs	r25, 7
     ce2:	09 c0       	rjmp	.+18     	; 0xcf6 <vfprintf+0x230>
     ce4:	90 95       	com	r25
     ce6:	80 95       	com	r24
     ce8:	70 95       	com	r23
     cea:	61 95       	neg	r22
     cec:	7f 4f       	sbci	r23, 0xFF	; 255
     cee:	8f 4f       	sbci	r24, 0xFF	; 255
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	f0 68       	ori	r31, 0x80	; 128
     cf4:	3f 2e       	mov	r3, r31
     cf6:	2a e0       	ldi	r18, 0x0A	; 10
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	a3 01       	movw	r20, r6
     cfc:	33 d1       	rcall	.+614    	; 0xf64 <__ultoa_invert>
     cfe:	88 2e       	mov	r8, r24
     d00:	86 18       	sub	r8, r6
     d02:	44 c0       	rjmp	.+136    	; 0xd8c <vfprintf+0x2c6>
     d04:	85 37       	cpi	r24, 0x75	; 117
     d06:	31 f4       	brne	.+12     	; 0xd14 <vfprintf+0x24e>
     d08:	23 2d       	mov	r18, r3
     d0a:	2f 7e       	andi	r18, 0xEF	; 239
     d0c:	b2 2e       	mov	r11, r18
     d0e:	2a e0       	ldi	r18, 0x0A	; 10
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	25 c0       	rjmp	.+74     	; 0xd5e <vfprintf+0x298>
     d14:	93 2d       	mov	r25, r3
     d16:	99 7f       	andi	r25, 0xF9	; 249
     d18:	b9 2e       	mov	r11, r25
     d1a:	8f 36       	cpi	r24, 0x6F	; 111
     d1c:	c1 f0       	breq	.+48     	; 0xd4e <vfprintf+0x288>
     d1e:	18 f4       	brcc	.+6      	; 0xd26 <vfprintf+0x260>
     d20:	88 35       	cpi	r24, 0x58	; 88
     d22:	79 f0       	breq	.+30     	; 0xd42 <vfprintf+0x27c>
     d24:	ae c0       	rjmp	.+348    	; 0xe82 <vfprintf+0x3bc>
     d26:	80 37       	cpi	r24, 0x70	; 112
     d28:	19 f0       	breq	.+6      	; 0xd30 <vfprintf+0x26a>
     d2a:	88 37       	cpi	r24, 0x78	; 120
     d2c:	21 f0       	breq	.+8      	; 0xd36 <vfprintf+0x270>
     d2e:	a9 c0       	rjmp	.+338    	; 0xe82 <vfprintf+0x3bc>
     d30:	e9 2f       	mov	r30, r25
     d32:	e0 61       	ori	r30, 0x10	; 16
     d34:	be 2e       	mov	r11, r30
     d36:	b4 fe       	sbrs	r11, 4
     d38:	0d c0       	rjmp	.+26     	; 0xd54 <vfprintf+0x28e>
     d3a:	fb 2d       	mov	r31, r11
     d3c:	f4 60       	ori	r31, 0x04	; 4
     d3e:	bf 2e       	mov	r11, r31
     d40:	09 c0       	rjmp	.+18     	; 0xd54 <vfprintf+0x28e>
     d42:	34 fe       	sbrs	r3, 4
     d44:	0a c0       	rjmp	.+20     	; 0xd5a <vfprintf+0x294>
     d46:	29 2f       	mov	r18, r25
     d48:	26 60       	ori	r18, 0x06	; 6
     d4a:	b2 2e       	mov	r11, r18
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <vfprintf+0x294>
     d4e:	28 e0       	ldi	r18, 0x08	; 8
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <vfprintf+0x298>
     d54:	20 e1       	ldi	r18, 0x10	; 16
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <vfprintf+0x298>
     d5a:	20 e1       	ldi	r18, 0x10	; 16
     d5c:	32 e0       	ldi	r19, 0x02	; 2
     d5e:	f8 01       	movw	r30, r16
     d60:	b7 fe       	sbrs	r11, 7
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <vfprintf+0x2ac>
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	0c 5f       	subi	r16, 0xFC	; 252
     d6e:	1f 4f       	sbci	r17, 0xFF	; 255
     d70:	06 c0       	rjmp	.+12     	; 0xd7e <vfprintf+0x2b8>
     d72:	60 81       	ld	r22, Z
     d74:	71 81       	ldd	r23, Z+1	; 0x01
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 5f       	subi	r16, 0xFE	; 254
     d7c:	1f 4f       	sbci	r17, 0xFF	; 255
     d7e:	a3 01       	movw	r20, r6
     d80:	f1 d0       	rcall	.+482    	; 0xf64 <__ultoa_invert>
     d82:	88 2e       	mov	r8, r24
     d84:	86 18       	sub	r8, r6
     d86:	fb 2d       	mov	r31, r11
     d88:	ff 77       	andi	r31, 0x7F	; 127
     d8a:	3f 2e       	mov	r3, r31
     d8c:	36 fe       	sbrs	r3, 6
     d8e:	0d c0       	rjmp	.+26     	; 0xdaa <vfprintf+0x2e4>
     d90:	23 2d       	mov	r18, r3
     d92:	2e 7f       	andi	r18, 0xFE	; 254
     d94:	a2 2e       	mov	r10, r18
     d96:	89 14       	cp	r8, r9
     d98:	58 f4       	brcc	.+22     	; 0xdb0 <vfprintf+0x2ea>
     d9a:	34 fe       	sbrs	r3, 4
     d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <vfprintf+0x2ee>
     d9e:	32 fc       	sbrc	r3, 2
     da0:	09 c0       	rjmp	.+18     	; 0xdb4 <vfprintf+0x2ee>
     da2:	83 2d       	mov	r24, r3
     da4:	8e 7e       	andi	r24, 0xEE	; 238
     da6:	a8 2e       	mov	r10, r24
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <vfprintf+0x2ee>
     daa:	b8 2c       	mov	r11, r8
     dac:	a3 2c       	mov	r10, r3
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <vfprintf+0x2f0>
     db0:	b8 2c       	mov	r11, r8
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <vfprintf+0x2f0>
     db4:	b9 2c       	mov	r11, r9
     db6:	a4 fe       	sbrs	r10, 4
     db8:	0f c0       	rjmp	.+30     	; 0xdd8 <vfprintf+0x312>
     dba:	fe 01       	movw	r30, r28
     dbc:	e8 0d       	add	r30, r8
     dbe:	f1 1d       	adc	r31, r1
     dc0:	80 81       	ld	r24, Z
     dc2:	80 33       	cpi	r24, 0x30	; 48
     dc4:	21 f4       	brne	.+8      	; 0xdce <vfprintf+0x308>
     dc6:	9a 2d       	mov	r25, r10
     dc8:	99 7e       	andi	r25, 0xE9	; 233
     dca:	a9 2e       	mov	r10, r25
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <vfprintf+0x31a>
     dce:	a2 fe       	sbrs	r10, 2
     dd0:	06 c0       	rjmp	.+12     	; 0xdde <vfprintf+0x318>
     dd2:	b3 94       	inc	r11
     dd4:	b3 94       	inc	r11
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <vfprintf+0x31a>
     dd8:	8a 2d       	mov	r24, r10
     dda:	86 78       	andi	r24, 0x86	; 134
     ddc:	09 f0       	breq	.+2      	; 0xde0 <vfprintf+0x31a>
     dde:	b3 94       	inc	r11
     de0:	a3 fc       	sbrc	r10, 3
     de2:	10 c0       	rjmp	.+32     	; 0xe04 <vfprintf+0x33e>
     de4:	a0 fe       	sbrs	r10, 0
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <vfprintf+0x32e>
     de8:	b2 14       	cp	r11, r2
     dea:	80 f4       	brcc	.+32     	; 0xe0c <vfprintf+0x346>
     dec:	28 0c       	add	r2, r8
     dee:	92 2c       	mov	r9, r2
     df0:	9b 18       	sub	r9, r11
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <vfprintf+0x348>
     df4:	b2 14       	cp	r11, r2
     df6:	58 f4       	brcc	.+22     	; 0xe0e <vfprintf+0x348>
     df8:	b6 01       	movw	r22, r12
     dfa:	80 e2       	ldi	r24, 0x20	; 32
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	76 d0       	rcall	.+236    	; 0xeec <fputc>
     e00:	b3 94       	inc	r11
     e02:	f8 cf       	rjmp	.-16     	; 0xdf4 <vfprintf+0x32e>
     e04:	b2 14       	cp	r11, r2
     e06:	18 f4       	brcc	.+6      	; 0xe0e <vfprintf+0x348>
     e08:	2b 18       	sub	r2, r11
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <vfprintf+0x34a>
     e0c:	98 2c       	mov	r9, r8
     e0e:	21 2c       	mov	r2, r1
     e10:	a4 fe       	sbrs	r10, 4
     e12:	0f c0       	rjmp	.+30     	; 0xe32 <vfprintf+0x36c>
     e14:	b6 01       	movw	r22, r12
     e16:	80 e3       	ldi	r24, 0x30	; 48
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	68 d0       	rcall	.+208    	; 0xeec <fputc>
     e1c:	a2 fe       	sbrs	r10, 2
     e1e:	16 c0       	rjmp	.+44     	; 0xe4c <vfprintf+0x386>
     e20:	a1 fc       	sbrc	r10, 1
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <vfprintf+0x364>
     e24:	88 e7       	ldi	r24, 0x78	; 120
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <vfprintf+0x368>
     e2a:	88 e5       	ldi	r24, 0x58	; 88
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	b6 01       	movw	r22, r12
     e30:	0c c0       	rjmp	.+24     	; 0xe4a <vfprintf+0x384>
     e32:	8a 2d       	mov	r24, r10
     e34:	86 78       	andi	r24, 0x86	; 134
     e36:	51 f0       	breq	.+20     	; 0xe4c <vfprintf+0x386>
     e38:	a1 fe       	sbrs	r10, 1
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <vfprintf+0x37a>
     e3c:	8b e2       	ldi	r24, 0x2B	; 43
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <vfprintf+0x37c>
     e40:	80 e2       	ldi	r24, 0x20	; 32
     e42:	a7 fc       	sbrc	r10, 7
     e44:	8d e2       	ldi	r24, 0x2D	; 45
     e46:	b6 01       	movw	r22, r12
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	50 d0       	rcall	.+160    	; 0xeec <fputc>
     e4c:	89 14       	cp	r8, r9
     e4e:	30 f4       	brcc	.+12     	; 0xe5c <vfprintf+0x396>
     e50:	b6 01       	movw	r22, r12
     e52:	80 e3       	ldi	r24, 0x30	; 48
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	4a d0       	rcall	.+148    	; 0xeec <fputc>
     e58:	9a 94       	dec	r9
     e5a:	f8 cf       	rjmp	.-16     	; 0xe4c <vfprintf+0x386>
     e5c:	8a 94       	dec	r8
     e5e:	f3 01       	movw	r30, r6
     e60:	e8 0d       	add	r30, r8
     e62:	f1 1d       	adc	r31, r1
     e64:	80 81       	ld	r24, Z
     e66:	b6 01       	movw	r22, r12
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	40 d0       	rcall	.+128    	; 0xeec <fputc>
     e6c:	81 10       	cpse	r8, r1
     e6e:	f6 cf       	rjmp	.-20     	; 0xe5c <vfprintf+0x396>
     e70:	22 20       	and	r2, r2
     e72:	09 f4       	brne	.+2      	; 0xe76 <vfprintf+0x3b0>
     e74:	4e ce       	rjmp	.-868    	; 0xb12 <vfprintf+0x4c>
     e76:	b6 01       	movw	r22, r12
     e78:	80 e2       	ldi	r24, 0x20	; 32
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	37 d0       	rcall	.+110    	; 0xeec <fputc>
     e7e:	2a 94       	dec	r2
     e80:	f7 cf       	rjmp	.-18     	; 0xe70 <vfprintf+0x3aa>
     e82:	f6 01       	movw	r30, r12
     e84:	86 81       	ldd	r24, Z+6	; 0x06
     e86:	97 81       	ldd	r25, Z+7	; 0x07
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <vfprintf+0x3c8>
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	9f ef       	ldi	r25, 0xFF	; 255
     e8e:	2b 96       	adiw	r28, 0x0b	; 11
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	ff 90       	pop	r15
     ea4:	ef 90       	pop	r14
     ea6:	df 90       	pop	r13
     ea8:	cf 90       	pop	r12
     eaa:	bf 90       	pop	r11
     eac:	af 90       	pop	r10
     eae:	9f 90       	pop	r9
     eb0:	8f 90       	pop	r8
     eb2:	7f 90       	pop	r7
     eb4:	6f 90       	pop	r6
     eb6:	5f 90       	pop	r5
     eb8:	4f 90       	pop	r4
     eba:	3f 90       	pop	r3
     ebc:	2f 90       	pop	r2
     ebe:	08 95       	ret

00000ec0 <strnlen_P>:
     ec0:	fc 01       	movw	r30, r24
     ec2:	05 90       	lpm	r0, Z+
     ec4:	61 50       	subi	r22, 0x01	; 1
     ec6:	70 40       	sbci	r23, 0x00	; 0
     ec8:	01 10       	cpse	r0, r1
     eca:	d8 f7       	brcc	.-10     	; 0xec2 <strnlen_P+0x2>
     ecc:	80 95       	com	r24
     ece:	90 95       	com	r25
     ed0:	8e 0f       	add	r24, r30
     ed2:	9f 1f       	adc	r25, r31
     ed4:	08 95       	ret

00000ed6 <strnlen>:
     ed6:	fc 01       	movw	r30, r24
     ed8:	61 50       	subi	r22, 0x01	; 1
     eda:	70 40       	sbci	r23, 0x00	; 0
     edc:	01 90       	ld	r0, Z+
     ede:	01 10       	cpse	r0, r1
     ee0:	d8 f7       	brcc	.-10     	; 0xed8 <strnlen+0x2>
     ee2:	80 95       	com	r24
     ee4:	90 95       	com	r25
     ee6:	8e 0f       	add	r24, r30
     ee8:	9f 1f       	adc	r25, r31
     eea:	08 95       	ret

00000eec <fputc>:
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	fb 01       	movw	r30, r22
     ef6:	23 81       	ldd	r18, Z+3	; 0x03
     ef8:	21 fd       	sbrc	r18, 1
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <fputc+0x16>
     efc:	8f ef       	ldi	r24, 0xFF	; 255
     efe:	9f ef       	ldi	r25, 0xFF	; 255
     f00:	2c c0       	rjmp	.+88     	; 0xf5a <fputc+0x6e>
     f02:	22 ff       	sbrs	r18, 2
     f04:	16 c0       	rjmp	.+44     	; 0xf32 <fputc+0x46>
     f06:	46 81       	ldd	r20, Z+6	; 0x06
     f08:	57 81       	ldd	r21, Z+7	; 0x07
     f0a:	24 81       	ldd	r18, Z+4	; 0x04
     f0c:	35 81       	ldd	r19, Z+5	; 0x05
     f0e:	42 17       	cp	r20, r18
     f10:	53 07       	cpc	r21, r19
     f12:	44 f4       	brge	.+16     	; 0xf24 <fputc+0x38>
     f14:	a0 81       	ld	r26, Z
     f16:	b1 81       	ldd	r27, Z+1	; 0x01
     f18:	9d 01       	movw	r18, r26
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	31 83       	std	Z+1, r19	; 0x01
     f20:	20 83       	st	Z, r18
     f22:	8c 93       	st	X, r24
     f24:	26 81       	ldd	r18, Z+6	; 0x06
     f26:	37 81       	ldd	r19, Z+7	; 0x07
     f28:	2f 5f       	subi	r18, 0xFF	; 255
     f2a:	3f 4f       	sbci	r19, 0xFF	; 255
     f2c:	37 83       	std	Z+7, r19	; 0x07
     f2e:	26 83       	std	Z+6, r18	; 0x06
     f30:	14 c0       	rjmp	.+40     	; 0xf5a <fputc+0x6e>
     f32:	8b 01       	movw	r16, r22
     f34:	ec 01       	movw	r28, r24
     f36:	fb 01       	movw	r30, r22
     f38:	00 84       	ldd	r0, Z+8	; 0x08
     f3a:	f1 85       	ldd	r31, Z+9	; 0x09
     f3c:	e0 2d       	mov	r30, r0
     f3e:	09 95       	icall
     f40:	89 2b       	or	r24, r25
     f42:	e1 f6       	brne	.-72     	; 0xefc <fputc+0x10>
     f44:	d8 01       	movw	r26, r16
     f46:	16 96       	adiw	r26, 0x06	; 6
     f48:	8d 91       	ld	r24, X+
     f4a:	9c 91       	ld	r25, X
     f4c:	17 97       	sbiw	r26, 0x07	; 7
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	17 96       	adiw	r26, 0x07	; 7
     f52:	9c 93       	st	X, r25
     f54:	8e 93       	st	-X, r24
     f56:	16 97       	sbiw	r26, 0x06	; 6
     f58:	ce 01       	movw	r24, r28
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	08 95       	ret

00000f64 <__ultoa_invert>:
     f64:	fa 01       	movw	r30, r20
     f66:	aa 27       	eor	r26, r26
     f68:	28 30       	cpi	r18, 0x08	; 8
     f6a:	51 f1       	breq	.+84     	; 0xfc0 <__ultoa_invert+0x5c>
     f6c:	20 31       	cpi	r18, 0x10	; 16
     f6e:	81 f1       	breq	.+96     	; 0xfd0 <__ultoa_invert+0x6c>
     f70:	e8 94       	clt
     f72:	6f 93       	push	r22
     f74:	6e 7f       	andi	r22, 0xFE	; 254
     f76:	6e 5f       	subi	r22, 0xFE	; 254
     f78:	7f 4f       	sbci	r23, 0xFF	; 255
     f7a:	8f 4f       	sbci	r24, 0xFF	; 255
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	af 4f       	sbci	r26, 0xFF	; 255
     f80:	b1 e0       	ldi	r27, 0x01	; 1
     f82:	3e d0       	rcall	.+124    	; 0x1000 <__ultoa_invert+0x9c>
     f84:	b4 e0       	ldi	r27, 0x04	; 4
     f86:	3c d0       	rcall	.+120    	; 0x1000 <__ultoa_invert+0x9c>
     f88:	67 0f       	add	r22, r23
     f8a:	78 1f       	adc	r23, r24
     f8c:	89 1f       	adc	r24, r25
     f8e:	9a 1f       	adc	r25, r26
     f90:	a1 1d       	adc	r26, r1
     f92:	68 0f       	add	r22, r24
     f94:	79 1f       	adc	r23, r25
     f96:	8a 1f       	adc	r24, r26
     f98:	91 1d       	adc	r25, r1
     f9a:	a1 1d       	adc	r26, r1
     f9c:	6a 0f       	add	r22, r26
     f9e:	71 1d       	adc	r23, r1
     fa0:	81 1d       	adc	r24, r1
     fa2:	91 1d       	adc	r25, r1
     fa4:	a1 1d       	adc	r26, r1
     fa6:	20 d0       	rcall	.+64     	; 0xfe8 <__ultoa_invert+0x84>
     fa8:	09 f4       	brne	.+2      	; 0xfac <__ultoa_invert+0x48>
     faa:	68 94       	set
     fac:	3f 91       	pop	r19
     fae:	2a e0       	ldi	r18, 0x0A	; 10
     fb0:	26 9f       	mul	r18, r22
     fb2:	11 24       	eor	r1, r1
     fb4:	30 19       	sub	r19, r0
     fb6:	30 5d       	subi	r19, 0xD0	; 208
     fb8:	31 93       	st	Z+, r19
     fba:	de f6       	brtc	.-74     	; 0xf72 <__ultoa_invert+0xe>
     fbc:	cf 01       	movw	r24, r30
     fbe:	08 95       	ret
     fc0:	46 2f       	mov	r20, r22
     fc2:	47 70       	andi	r20, 0x07	; 7
     fc4:	40 5d       	subi	r20, 0xD0	; 208
     fc6:	41 93       	st	Z+, r20
     fc8:	b3 e0       	ldi	r27, 0x03	; 3
     fca:	0f d0       	rcall	.+30     	; 0xfea <__ultoa_invert+0x86>
     fcc:	c9 f7       	brne	.-14     	; 0xfc0 <__ultoa_invert+0x5c>
     fce:	f6 cf       	rjmp	.-20     	; 0xfbc <__ultoa_invert+0x58>
     fd0:	46 2f       	mov	r20, r22
     fd2:	4f 70       	andi	r20, 0x0F	; 15
     fd4:	40 5d       	subi	r20, 0xD0	; 208
     fd6:	4a 33       	cpi	r20, 0x3A	; 58
     fd8:	18 f0       	brcs	.+6      	; 0xfe0 <__ultoa_invert+0x7c>
     fda:	49 5d       	subi	r20, 0xD9	; 217
     fdc:	31 fd       	sbrc	r19, 1
     fde:	40 52       	subi	r20, 0x20	; 32
     fe0:	41 93       	st	Z+, r20
     fe2:	02 d0       	rcall	.+4      	; 0xfe8 <__ultoa_invert+0x84>
     fe4:	a9 f7       	brne	.-22     	; 0xfd0 <__ultoa_invert+0x6c>
     fe6:	ea cf       	rjmp	.-44     	; 0xfbc <__ultoa_invert+0x58>
     fe8:	b4 e0       	ldi	r27, 0x04	; 4
     fea:	a6 95       	lsr	r26
     fec:	97 95       	ror	r25
     fee:	87 95       	ror	r24
     ff0:	77 95       	ror	r23
     ff2:	67 95       	ror	r22
     ff4:	ba 95       	dec	r27
     ff6:	c9 f7       	brne	.-14     	; 0xfea <__ultoa_invert+0x86>
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	61 05       	cpc	r22, r1
     ffc:	71 05       	cpc	r23, r1
     ffe:	08 95       	ret
    1000:	9b 01       	movw	r18, r22
    1002:	ac 01       	movw	r20, r24
    1004:	0a 2e       	mov	r0, r26
    1006:	06 94       	lsr	r0
    1008:	57 95       	ror	r21
    100a:	47 95       	ror	r20
    100c:	37 95       	ror	r19
    100e:	27 95       	ror	r18
    1010:	ba 95       	dec	r27
    1012:	c9 f7       	brne	.-14     	; 0x1006 <__ultoa_invert+0xa2>
    1014:	62 0f       	add	r22, r18
    1016:	73 1f       	adc	r23, r19
    1018:	84 1f       	adc	r24, r20
    101a:	95 1f       	adc	r25, r21
    101c:	a0 1d       	adc	r26, r0
    101e:	08 95       	ret

00001020 <_exit>:
    1020:	f8 94       	cli

00001022 <__stop_program>:
    1022:	ff cf       	rjmp	.-2      	; 0x1022 <__stop_program>
