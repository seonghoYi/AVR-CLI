
AVR-CLI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000013ae  00001442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  00800120  00800120  00001462  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001462  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dc3  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001098  00000000  00000000  000034b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001359  00000000  00000000  0000454f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  000058a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ce  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000167f  00000000  00000000  000065d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00007c55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
       2:	00 00       	nop
       4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c0       	rjmp	.+214    	; 0xe4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c0       	rjmp	.+174    	; 0xe4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
      46:	00 00       	nop
      48:	70 c0       	rjmp	.+224    	; 0x12a <__vector_18>
      4a:	00 00       	nop
      4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	62 01       	movw	r12, r4
      8e:	85 01       	movw	r16, r10
      90:	a8 01       	movw	r20, r16
      92:	cb 01       	movw	r24, r22
      94:	ee 01       	movw	r28, r28
      96:	11 02       	muls	r17, r17
      98:	37 02       	muls	r19, r23
      9a:	65 02       	muls	r22, r21
      9c:	70 02       	muls	r23, r16
      9e:	7b 02       	muls	r23, r27
      a0:	86 02       	muls	r24, r22
      a2:	91 02       	muls	r25, r17
      a4:	9c 02       	muls	r25, r28
      a6:	a9 02       	muls	r26, r25

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d0 e1       	ldi	r29, 0x10	; 16
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	ee ea       	ldi	r30, 0xAE	; 174
      bc:	f3 e1       	ldi	r31, 0x13	; 19
      be:	00 e0       	ldi	r16, 0x00	; 0
      c0:	0b bf       	out	0x3b, r16	; 59
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
      c4:	07 90       	elpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a0 32       	cpi	r26, 0x20	; 32
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
      ce:	23 e0       	ldi	r18, 0x03	; 3
      d0:	a0 e2       	ldi	r26, 0x20	; 32
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a5 34       	cpi	r26, 0x45	; 69
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	c8 d4       	rcall	.+2448   	; 0xa70 <main>
      e0:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <_exit>

000000e4 <__bad_interrupt>:
      e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <apInit>:
﻿#include "ap.h"

void apInit(void)
{
	uartOpen(_DEF_UART0, 115200);
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	52 ec       	ldi	r21, 0xC2	; 194
      ea:	61 e0       	ldi	r22, 0x01	; 1
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	66 c0       	rjmp	.+204    	; 0x1be <uartOpen>
      f2:	08 95       	ret

000000f4 <apMain>:
		
		gpioPinToggle(_DEF_GPIO0);
		_delay_ms(500);
		
		
		uartPrintf(_DEF_UART0, "uart0 : %s\n", str);
      f4:	05 e0       	ldi	r16, 0x05	; 5
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	c3 e1       	ldi	r28, 0x13	; 19
      fa:	d1 e0       	ldi	r29, 0x01	; 1
	char *str = "Hello, World!";

	while(true)
	{
		
		gpioPinToggle(_DEF_GPIO0);
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	55 d0       	rcall	.+170    	; 0x1aa <gpioPinToggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     100:	2f ef       	ldi	r18, 0xFF	; 255
     102:	89 e6       	ldi	r24, 0x69	; 105
     104:	98 e1       	ldi	r25, 0x18	; 24
     106:	21 50       	subi	r18, 0x01	; 1
     108:	80 40       	sbci	r24, 0x00	; 0
     10a:	90 40       	sbci	r25, 0x00	; 0
     10c:	e1 f7       	brne	.-8      	; 0x106 <apMain+0x12>
     10e:	00 c0       	rjmp	.+0      	; 0x110 <apMain+0x1c>
     110:	00 00       	nop
		_delay_ms(500);
		
		
		uartPrintf(_DEF_UART0, "uart0 : %s\n", str);
     112:	1f 93       	push	r17
     114:	0f 93       	push	r16
     116:	df 93       	push	r29
     118:	cf 93       	push	r28
     11a:	1f 92       	push	r1
     11c:	98 d0       	rcall	.+304    	; 0x24e <uartPrintf>
     11e:	0f 90       	pop	r0
     120:	0f 90       	pop	r0
     122:	0f 90       	pop	r0
     124:	0f 90       	pop	r0
     126:	0f 90       	pop	r0
     128:	e9 cf       	rjmp	.-46     	; 0xfc <apMain+0x8>

0000012a <__vector_18>:
﻿#include "main.h"
#include "atmega128_it.h"


ISR(USART0_RX_vect)
{
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	11 24       	eor	r1, r1
	
     134:	0f 90       	pop	r0
     136:	0f be       	out	0x3f, r0	; 63
     138:	0f 90       	pop	r0
     13a:	1f 90       	pop	r1
     13c:	18 95       	reti

0000013e <bspInit>:
﻿#include "bsp.h"


void bspInit(void)
{
     13e:	08 95       	ret

00000140 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
     140:	fc 01       	movw	r30, r24
	bool ret = true;

	p_node->in    = 0;
     142:	10 82       	st	Z, r1
     144:	11 82       	std	Z+1, r1	; 0x01
     146:	12 82       	std	Z+2, r1	; 0x02
     148:	13 82       	std	Z+3, r1	; 0x03
	p_node->out   = 0;
     14a:	14 82       	std	Z+4, r1	; 0x04
     14c:	15 82       	std	Z+5, r1	; 0x05
     14e:	16 82       	std	Z+6, r1	; 0x06
     150:	17 82       	std	Z+7, r1	; 0x07
	p_node->len   = length;
     152:	20 87       	std	Z+8, r18	; 0x08
     154:	31 87       	std	Z+9, r19	; 0x09
     156:	42 87       	std	Z+10, r20	; 0x0a
     158:	53 87       	std	Z+11, r21	; 0x0b
	p_node->p_buf = p_buf;
     15a:	75 87       	std	Z+13, r23	; 0x0d
     15c:	64 87       	std	Z+12, r22	; 0x0c

	return ret;
}
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	08 95       	ret

00000162 <gpioPinMode>:
	if (GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
	{
		ret = true;	
	}
	return ret;
}
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	00 d0       	rcall	.+0      	; 0x168 <gpioPinMode+0x6>
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	1a 82       	std	Y+2, r1	; 0x02
     16e:	19 82       	std	Y+1, r1	; 0x01
     170:	81 11       	cpse	r24, r1
     172:	0f c0       	rjmp	.+30     	; 0x192 <gpioPinMode+0x30>
     174:	61 30       	cpi	r22, 0x01	; 1
     176:	11 f4       	brne	.+4      	; 0x17c <gpioPinMode+0x1a>
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	8a 83       	std	Y+2, r24	; 0x02
     17c:	e0 e0       	ldi	r30, 0x00	; 0
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	81 81       	ldd	r24, Z+1	; 0x01
     182:	89 83       	std	Y+1, r24	; 0x01
     184:	be 01       	movw	r22, r28
     186:	6f 5f       	subi	r22, 0xFF	; 255
     188:	7f 4f       	sbci	r23, 0xFF	; 255
     18a:	80 81       	ld	r24, Z
     18c:	92 d0       	rcall	.+292    	; 0x2b2 <GPIO_Init>
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	01 c0       	rjmp	.+2      	; 0x194 <gpioPinMode+0x32>
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	0f 90       	pop	r0
     196:	0f 90       	pop	r0
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <gpioInit>:
     19e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	de df       	rcall	.-68     	; 0x162 <gpioPinMode>
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	08 95       	ret

000001aa <gpioPinToggle>:

void gpioPinToggle(uint8_t ch)
{
	if (ch < 0 || ch >= GPIO_MAX_CH) return;
     1aa:	81 11       	cpse	r24, r1
     1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <gpioPinToggle+0xe>
	GPIO_TogglePin(gpio_tbl[ch].port, gpio_tbl[ch].pin);
     1ae:	e0 e0       	ldi	r30, 0x00	; 0
     1b0:	f1 e0       	ldi	r31, 0x01	; 1
     1b2:	61 81       	ldd	r22, Z+1	; 0x01
     1b4:	80 81       	ld	r24, Z
     1b6:	80 c1       	rjmp	.+768    	; 0x4b8 <GPIO_TogglePin>
     1b8:	08 95       	ret

000001ba <uartInit>:
		qbufferRead(&qbuffer[ch], &ret, 1);
		break;
	}

	return ret;
}
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	08 95       	ret

000001be <uartOpen>:
     1be:	81 11       	cpse	r24, r1
     1c0:	1e c0       	rjmp	.+60     	; 0x1fe <uartOpen+0x40>
     1c2:	ee e2       	ldi	r30, 0x2E	; 46
     1c4:	f3 e0       	ldi	r31, 0x03	; 3
     1c6:	10 82       	st	Z, r1
     1c8:	41 83       	std	Z+1, r20	; 0x01
     1ca:	52 83       	std	Z+2, r21	; 0x02
     1cc:	63 83       	std	Z+3, r22	; 0x03
     1ce:	74 83       	std	Z+4, r23	; 0x04
     1d0:	16 82       	std	Z+6, r1	; 0x06
     1d2:	17 82       	std	Z+7, r1	; 0x07
     1d4:	15 82       	std	Z+5, r1	; 0x05
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	80 87       	std	Z+8, r24	; 0x08
     1da:	11 86       	std	Z+9, r1	; 0x09
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	32 e0       	ldi	r19, 0x02	; 2
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	60 e2       	ldi	r22, 0x20	; 32
     1e6:	71 e0       	ldi	r23, 0x01	; 1
     1e8:	80 e2       	ldi	r24, 0x20	; 32
     1ea:	93 e0       	ldi	r25, 0x03	; 3
     1ec:	a9 df       	rcall	.-174    	; 0x140 <qbufferCreate>
     1ee:	8e e2       	ldi	r24, 0x2E	; 46
     1f0:	93 e0       	ldi	r25, 0x03	; 3
     1f2:	b8 d3       	rcall	.+1904   	; 0x964 <UART_Init>
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	88 23       	and	r24, r24
     1f8:	19 f0       	breq	.+6      	; 0x200 <uartOpen+0x42>
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <uartOpen+0x42>
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	89 2f       	mov	r24, r25
     202:	08 95       	ret

00000204 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	69 01       	movw	r12, r18
     212:	7a 01       	movw	r14, r20
	uint32_t ret = 0;
	StatusTypeDef status;
	switch(ch)
     214:	81 11       	cpse	r24, r1
     216:	0b c0       	rjmp	.+22     	; 0x22e <uartWrite+0x2a>
	{
		case _DEF_UART0:
		status = UART_Transmit(&huart1, p_data, length, 100);
     218:	04 e6       	ldi	r16, 0x64	; 100
     21a:	10 e0       	ldi	r17, 0x00	; 0
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	a6 01       	movw	r20, r12
     222:	8e e2       	ldi	r24, 0x2E	; 46
     224:	93 e0       	ldi	r25, 0x03	; 3
     226:	aa d3       	rcall	.+1876   	; 0x97c <UART_Transmit>
		if (status == OK)
     228:	88 23       	and	r24, r24
     22a:	41 f0       	breq	.+16     	; 0x23c <uartWrite+0x38>
     22c:	04 c0       	rjmp	.+8      	; 0x236 <uartWrite+0x32>
	return ret;
}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
	uint32_t ret = 0;
     22e:	c1 2c       	mov	r12, r1
     230:	d1 2c       	mov	r13, r1
     232:	76 01       	movw	r14, r12
     234:	03 c0       	rjmp	.+6      	; 0x23c <uartWrite+0x38>
     236:	c1 2c       	mov	r12, r1
     238:	d1 2c       	mov	r13, r1
     23a:	76 01       	movw	r14, r12
			ret = length;
		}
		break;
	}
	return ret;
}
     23c:	c7 01       	movw	r24, r14
     23e:	b6 01       	movw	r22, r12
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	df 90       	pop	r13
     24a:	cf 90       	pop	r12
     24c:	08 95       	ret

0000024e <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	da 95       	dec	r29
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
	len = vsnprintf(buf, 256, fmt, args);
     262:	9e 01       	movw	r18, r28
     264:	28 5f       	subi	r18, 0xF8	; 248
     266:	3e 4f       	sbci	r19, 0xFE	; 254
     268:	ca 5f       	subi	r28, 0xFA	; 250
     26a:	de 4f       	sbci	r29, 0xFE	; 254
     26c:	48 81       	ld	r20, Y
     26e:	59 81       	ldd	r21, Y+1	; 0x01
     270:	c6 50       	subi	r28, 0x06	; 6
     272:	d1 40       	sbci	r29, 0x01	; 1
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	71 e0       	ldi	r23, 0x01	; 1
     278:	ce 01       	movw	r24, r28
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	b1 d5       	rcall	.+2914   	; 0xde0 <vsnprintf>

	ret = uartWrite(ch, (uint8_t *)buf, len);
     27e:	9c 01       	movw	r18, r24
     280:	99 0f       	add	r25, r25
     282:	44 0b       	sbc	r20, r20
     284:	55 0b       	sbc	r21, r21
     286:	be 01       	movw	r22, r28
     288:	6f 5f       	subi	r22, 0xFF	; 255
     28a:	7f 4f       	sbci	r23, 0xFF	; 255
     28c:	cb 5f       	subi	r28, 0xFB	; 251
     28e:	de 4f       	sbci	r29, 0xFE	; 254
     290:	88 81       	ld	r24, Y
     292:	c5 50       	subi	r28, 0x05	; 5
     294:	d1 40       	sbci	r29, 0x01	; 1
     296:	b6 df       	rcall	.-148    	; 0x204 <uartWrite>

	va_end(args);
	return ret;
}
     298:	d3 95       	inc	r29
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <hwInit>:
﻿#include "hw.h"

void hwInit(void)
{
	bspInit();
     2aa:	49 df       	rcall	.-366    	; 0x13e <bspInit>
	gpioInit();
     2ac:	78 df       	rcall	.-272    	; 0x19e <gpioInit>
	uartInit();
     2ae:	85 cf       	rjmp	.-246    	; 0x1ba <uartInit>
     2b0:	08 95       	ret

000002b2 <GPIO_Init>:
     2b2:	90 e0       	ldi	r25, 0x00	; 0
			{
				CLRB(PORTG, pin);
			}
			else if(pinState == PIN_SET)
			{
				SETB(PORTG, pin);
     2b4:	87 30       	cpi	r24, 0x07	; 7
     2b6:	91 05       	cpc	r25, r1
     2b8:	08 f0       	brcs	.+2      	; 0x2bc <GPIO_Init+0xa>
     2ba:	fd c0       	rjmp	.+506    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     2bc:	fc 01       	movw	r30, r24
     2be:	ea 5b       	subi	r30, 0xBA	; 186
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	85 c5       	rjmp	.+2826   	; 0xdce <__tablejump2__>
     2c4:	db 01       	movw	r26, r22
     2c6:	11 96       	adiw	r26, 0x01	; 1
     2c8:	8c 91       	ld	r24, X
     2ca:	11 97       	sbiw	r26, 0x01	; 1
     2cc:	81 11       	cpse	r24, r1
     2ce:	0d c0       	rjmp	.+26     	; 0x2ea <GPIO_Init+0x38>
     2d0:	2a b3       	in	r18, 0x1a	; 26
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0c 90       	ld	r0, X
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <GPIO_Init+0x2c>
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	0a 94       	dec	r0
     2e0:	e2 f7       	brpl	.-8      	; 0x2da <GPIO_Init+0x28>
     2e2:	80 95       	com	r24
     2e4:	82 23       	and	r24, r18
     2e6:	8a bb       	out	0x1a, r24	; 26
     2e8:	08 95       	ret
     2ea:	81 30       	cpi	r24, 0x01	; 1
     2ec:	09 f0       	breq	.+2      	; 0x2f0 <GPIO_Init+0x3e>
     2ee:	e3 c0       	rjmp	.+454    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     2f0:	2a b3       	in	r18, 0x1a	; 26
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	fb 01       	movw	r30, r22
     2f8:	00 80       	ld	r0, Z
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <GPIO_Init+0x4e>
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	0a 94       	dec	r0
     302:	e2 f7       	brpl	.-8      	; 0x2fc <GPIO_Init+0x4a>
     304:	82 2b       	or	r24, r18
     306:	8a bb       	out	0x1a, r24	; 26
     308:	08 95       	ret
     30a:	db 01       	movw	r26, r22
     30c:	11 96       	adiw	r26, 0x01	; 1
     30e:	8c 91       	ld	r24, X
     310:	11 97       	sbiw	r26, 0x01	; 1
     312:	81 11       	cpse	r24, r1
     314:	0d c0       	rjmp	.+26     	; 0x330 <GPIO_Init+0x7e>
     316:	27 b3       	in	r18, 0x17	; 23
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0c 90       	ld	r0, X
     31e:	02 c0       	rjmp	.+4      	; 0x324 <GPIO_Init+0x72>
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	0a 94       	dec	r0
     326:	e2 f7       	brpl	.-8      	; 0x320 <GPIO_Init+0x6e>
     328:	80 95       	com	r24
     32a:	82 23       	and	r24, r18
     32c:	87 bb       	out	0x17, r24	; 23
     32e:	08 95       	ret
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	09 f0       	breq	.+2      	; 0x336 <GPIO_Init+0x84>
     334:	c0 c0       	rjmp	.+384    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     336:	27 b3       	in	r18, 0x17	; 23
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	fb 01       	movw	r30, r22
     33e:	00 80       	ld	r0, Z
     340:	02 c0       	rjmp	.+4      	; 0x346 <GPIO_Init+0x94>
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	0a 94       	dec	r0
     348:	e2 f7       	brpl	.-8      	; 0x342 <GPIO_Init+0x90>
     34a:	82 2b       	or	r24, r18
     34c:	87 bb       	out	0x17, r24	; 23
     34e:	08 95       	ret
     350:	db 01       	movw	r26, r22
     352:	11 96       	adiw	r26, 0x01	; 1
     354:	8c 91       	ld	r24, X
     356:	11 97       	sbiw	r26, 0x01	; 1
     358:	81 11       	cpse	r24, r1
     35a:	0d c0       	rjmp	.+26     	; 0x376 <GPIO_Init+0xc4>
     35c:	24 b3       	in	r18, 0x14	; 20
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0c 90       	ld	r0, X
     364:	02 c0       	rjmp	.+4      	; 0x36a <GPIO_Init+0xb8>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <GPIO_Init+0xb4>
     36e:	80 95       	com	r24
     370:	82 23       	and	r24, r18
     372:	84 bb       	out	0x14, r24	; 20
     374:	08 95       	ret
     376:	81 30       	cpi	r24, 0x01	; 1
     378:	09 f0       	breq	.+2      	; 0x37c <GPIO_Init+0xca>
     37a:	9d c0       	rjmp	.+314    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     37c:	24 b3       	in	r18, 0x14	; 20
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	fb 01       	movw	r30, r22
     384:	00 80       	ld	r0, Z
     386:	02 c0       	rjmp	.+4      	; 0x38c <GPIO_Init+0xda>
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	0a 94       	dec	r0
     38e:	e2 f7       	brpl	.-8      	; 0x388 <GPIO_Init+0xd6>
     390:	82 2b       	or	r24, r18
     392:	84 bb       	out	0x14, r24	; 20
     394:	08 95       	ret
     396:	db 01       	movw	r26, r22
     398:	11 96       	adiw	r26, 0x01	; 1
     39a:	8c 91       	ld	r24, X
     39c:	11 97       	sbiw	r26, 0x01	; 1
     39e:	81 11       	cpse	r24, r1
     3a0:	0d c0       	rjmp	.+26     	; 0x3bc <GPIO_Init+0x10a>
     3a2:	21 b3       	in	r18, 0x11	; 17
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0c 90       	ld	r0, X
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <GPIO_Init+0xfe>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	0a 94       	dec	r0
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <GPIO_Init+0xfa>
     3b4:	80 95       	com	r24
     3b6:	82 23       	and	r24, r18
     3b8:	81 bb       	out	0x11, r24	; 17
     3ba:	08 95       	ret
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	09 f0       	breq	.+2      	; 0x3c2 <GPIO_Init+0x110>
     3c0:	7a c0       	rjmp	.+244    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     3c2:	21 b3       	in	r18, 0x11	; 17
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	fb 01       	movw	r30, r22
     3ca:	00 80       	ld	r0, Z
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <GPIO_Init+0x120>
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	0a 94       	dec	r0
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <GPIO_Init+0x11c>
     3d6:	82 2b       	or	r24, r18
     3d8:	81 bb       	out	0x11, r24	; 17
     3da:	08 95       	ret
     3dc:	db 01       	movw	r26, r22
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	8c 91       	ld	r24, X
     3e2:	11 97       	sbiw	r26, 0x01	; 1
     3e4:	81 11       	cpse	r24, r1
     3e6:	0d c0       	rjmp	.+26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3e8:	22 b1       	in	r18, 0x02	; 2
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0c 90       	ld	r0, X
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <GPIO_Init+0x144>
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	0a 94       	dec	r0
     3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <GPIO_Init+0x140>
     3fa:	80 95       	com	r24
     3fc:	82 23       	and	r24, r18
     3fe:	82 b9       	out	0x02, r24	; 2
     400:	08 95       	ret
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	09 f0       	breq	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	57 c0       	rjmp	.+174    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     408:	22 b1       	in	r18, 0x02	; 2
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	fb 01       	movw	r30, r22
     410:	00 80       	ld	r0, Z
     412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	0a 94       	dec	r0
     41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41c:	82 2b       	or	r24, r18
     41e:	82 b9       	out	0x02, r24	; 2
     420:	08 95       	ret
     422:	db 01       	movw	r26, r22
     424:	11 96       	adiw	r26, 0x01	; 1
     426:	8c 91       	ld	r24, X
     428:	11 97       	sbiw	r26, 0x01	; 1
     42a:	81 11       	cpse	r24, r1
     42c:	0f c0       	rjmp	.+30     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     42e:	e1 e6       	ldi	r30, 0x61	; 97
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	20 81       	ld	r18, Z
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0c 90       	ld	r0, X
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	0a 94       	dec	r0
     442:	e2 f7       	brpl	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     444:	80 95       	com	r24
     446:	82 23       	and	r24, r18
     448:	80 83       	st	Z, r24
     44a:	08 95       	ret
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	99 f5       	brne	.+102    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     450:	e1 e6       	ldi	r30, 0x61	; 97
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	20 81       	ld	r18, Z
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	db 01       	movw	r26, r22
     45c:	0c 90       	ld	r0, X
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	0a 94       	dec	r0
     466:	e2 f7       	brpl	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     468:	82 2b       	or	r24, r18
     46a:	80 83       	st	Z, r24
     46c:	08 95       	ret
     46e:	fb 01       	movw	r30, r22
     470:	81 81       	ldd	r24, Z+1	; 0x01
     472:	81 11       	cpse	r24, r1
     474:	10 c0       	rjmp	.+32     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     476:	e4 e6       	ldi	r30, 0x64	; 100
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	20 81       	ld	r18, Z
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	db 01       	movw	r26, r22
     482:	0c 90       	ld	r0, X
     484:	02 c0       	rjmp	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     48e:	80 95       	com	r24
     490:	82 23       	and	r24, r18
     492:	80 83       	st	Z, r24
     494:	08 95       	ret
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	71 f4       	brne	.+28     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     49a:	e4 e6       	ldi	r30, 0x64	; 100
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	20 81       	ld	r18, Z
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	db 01       	movw	r26, r22
     4a6:	0c 90       	ld	r0, X
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	0a 94       	dec	r0
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4b2:	82 2b       	or	r24, r18
     4b4:	80 83       	st	Z, r24
     4b6:	08 95       	ret

000004b8 <GPIO_TogglePin>:
	}
}

void GPIO_TogglePin(uint8_t port, uint8_t pin)
{
	switch(port)
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	87 30       	cpi	r24, 0x07	; 7
     4bc:	91 05       	cpc	r25, r1
     4be:	08 f0       	brcs	.+2      	; 0x4c2 <GPIO_TogglePin+0xa>
     4c0:	54 c0       	rjmp	.+168    	; 0x56a <GPIO_TogglePin+0xb2>
     4c2:	fc 01       	movw	r30, r24
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	82 c4       	rjmp	.+2308   	; 0xdce <__tablejump2__>
	{
		case GPIOA:
			TGLB(PORTA, pin);
     4ca:	2b b3       	in	r18, 0x1b	; 27
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <GPIO_TogglePin+0x1e>
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	6a 95       	dec	r22
     4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <GPIO_TogglePin+0x1a>
     4da:	82 27       	eor	r24, r18
     4dc:	8b bb       	out	0x1b, r24	; 27
		break;
     4de:	08 95       	ret
		case GPIOB:
			TGLB(PORTB, pin);
     4e0:	28 b3       	in	r18, 0x18	; 24
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <GPIO_TogglePin+0x34>
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	6a 95       	dec	r22
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <GPIO_TogglePin+0x30>
     4f0:	82 27       	eor	r24, r18
     4f2:	88 bb       	out	0x18, r24	; 24
		break;
     4f4:	08 95       	ret
		case GPIOC:
			TGLB(PORTC, pin);
     4f6:	25 b3       	in	r18, 0x15	; 21
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <GPIO_TogglePin+0x4a>
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	6a 95       	dec	r22
     504:	e2 f7       	brpl	.-8      	; 0x4fe <GPIO_TogglePin+0x46>
     506:	82 27       	eor	r24, r18
     508:	85 bb       	out	0x15, r24	; 21
		break;
     50a:	08 95       	ret
		case GPIOD:
			TGLB(PORTD, pin);
     50c:	22 b3       	in	r18, 0x12	; 18
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 c0       	rjmp	.+4      	; 0x518 <GPIO_TogglePin+0x60>
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	6a 95       	dec	r22
     51a:	e2 f7       	brpl	.-8      	; 0x514 <GPIO_TogglePin+0x5c>
     51c:	82 27       	eor	r24, r18
     51e:	82 bb       	out	0x12, r24	; 18
		break;
     520:	08 95       	ret
		case GPIOE:
			TGLB(PORTE, pin);
     522:	23 b1       	in	r18, 0x03	; 3
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	02 c0       	rjmp	.+4      	; 0x52e <GPIO_TogglePin+0x76>
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	6a 95       	dec	r22
     530:	e2 f7       	brpl	.-8      	; 0x52a <GPIO_TogglePin+0x72>
     532:	82 27       	eor	r24, r18
     534:	83 b9       	out	0x03, r24	; 3
		break;
     536:	08 95       	ret
		case GPIOF:
			TGLB(PORTF, pin);
     538:	e2 e6       	ldi	r30, 0x62	; 98
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	20 81       	ld	r18, Z
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	02 c0       	rjmp	.+4      	; 0x548 <GPIO_TogglePin+0x90>
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	6a 95       	dec	r22
     54a:	e2 f7       	brpl	.-8      	; 0x544 <GPIO_TogglePin+0x8c>
     54c:	82 27       	eor	r24, r18
     54e:	80 83       	st	Z, r24
		break;
     550:	08 95       	ret
		case GPIOG:
			TGLB(PORTG, pin);
     552:	e5 e6       	ldi	r30, 0x65	; 101
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	20 81       	ld	r18, Z
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	02 c0       	rjmp	.+4      	; 0x562 <GPIO_TogglePin+0xaa>
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	6a 95       	dec	r22
     564:	e2 f7       	brpl	.-8      	; 0x55e <GPIO_TogglePin+0xa6>
     566:	82 27       	eor	r24, r18
     568:	80 83       	st	Z, r24
     56a:	08 95       	ret

0000056c <UART0_Init>:




StatusTypeDef UART0_Init(UART_HandleTypeDef *huart)
{
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
	uint32_t temp;
	if (huart == NULL)
     574:	00 97       	sbiw	r24, 0x00	; 0
     576:	09 f4       	brne	.+2      	; 0x57a <UART0_Init+0xe>
     578:	de c0       	rjmp	.+444    	; 0x736 <UART0_Init+0x1ca>
     57a:	ec 01       	movw	r28, r24
	{
		return ERROR;
	}
	
	switch(huart->Init.OverSampling)
     57c:	89 85       	ldd	r24, Y+9	; 0x09
     57e:	88 23       	and	r24, r24
     580:	19 f0       	breq	.+6      	; 0x588 <UART0_Init+0x1c>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	71 f1       	breq	.+92     	; 0x5e2 <UART0_Init+0x76>
     586:	55 c0       	rjmp	.+170    	; 0x632 <UART0_Init+0xc6>
	{
		case UART_OVERSAMPLING_8:
		temp = (float)(F_CPU / (float)(16 * huart->Init.BaudRate)) - 0.5; //-1.0 + 0.5 => for rounding
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	9a 81       	ldd	r25, Y+2	; 0x02
     58c:	ab 81       	ldd	r26, Y+3	; 0x03
     58e:	bc 81       	ldd	r27, Y+4	; 0x04
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	aa 1f       	adc	r26, r26
     596:	bb 1f       	adc	r27, r27
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	aa 1f       	adc	r26, r26
     59e:	bb 1f       	adc	r27, r27
     5a0:	bc 01       	movw	r22, r24
     5a2:	cd 01       	movw	r24, r26
     5a4:	66 0f       	add	r22, r22
     5a6:	77 1f       	adc	r23, r23
     5a8:	88 1f       	adc	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	66 0f       	add	r22, r22
     5ae:	77 1f       	adc	r23, r23
     5b0:	88 1f       	adc	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	5c d3       	rcall	.+1720   	; 0xc6e <__floatunsisf>
     5b6:	9b 01       	movw	r18, r22
     5b8:	ac 01       	movw	r20, r24
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	74 e2       	ldi	r23, 0x24	; 36
     5be:	84 e7       	ldi	r24, 0x74	; 116
     5c0:	9b e4       	ldi	r25, 0x4B	; 75
     5c2:	c1 d2       	rcall	.+1410   	; 0xb46 <__divsf3>
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	5f e3       	ldi	r21, 0x3F	; 63
     5cc:	57 d2       	rcall	.+1198   	; 0xa7c <__subsf3>
     5ce:	23 d3       	rcall	.+1606   	; 0xc16 <__fixunssfsi>
		UBRR0H = (temp >> 8) & 0xFF;
     5d0:	07 2f       	mov	r16, r23
     5d2:	18 2f       	mov	r17, r24
     5d4:	29 2f       	mov	r18, r25
     5d6:	33 27       	eor	r19, r19
     5d8:	00 93 90 00 	sts	0x0090, r16	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
		UBRR0L = temp & 0xFF;
     5dc:	69 b9       	out	0x09, r22	; 9
		CLRB(UCSR0A, 1);
     5de:	59 98       	cbi	0x0b, 1	; 11
		break;
     5e0:	28 c0       	rjmp	.+80     	; 0x632 <UART0_Init+0xc6>
		case UART_OVERSAMPLING_16:
		temp = (float)(F_CPU / (float)(8 * huart->Init.BaudRate)) - 0.5;
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	9a 81       	ldd	r25, Y+2	; 0x02
     5e6:	ab 81       	ldd	r26, Y+3	; 0x03
     5e8:	bc 81       	ldd	r27, Y+4	; 0x04
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	aa 1f       	adc	r26, r26
     5f0:	bb 1f       	adc	r27, r27
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	aa 1f       	adc	r26, r26
     5f8:	bb 1f       	adc	r27, r27
     5fa:	bc 01       	movw	r22, r24
     5fc:	cd 01       	movw	r24, r26
     5fe:	66 0f       	add	r22, r22
     600:	77 1f       	adc	r23, r23
     602:	88 1f       	adc	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	33 d3       	rcall	.+1638   	; 0xc6e <__floatunsisf>
     608:	9b 01       	movw	r18, r22
     60a:	ac 01       	movw	r20, r24
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	74 e2       	ldi	r23, 0x24	; 36
     610:	84 e7       	ldi	r24, 0x74	; 116
     612:	9b e4       	ldi	r25, 0x4B	; 75
     614:	98 d2       	rcall	.+1328   	; 0xb46 <__divsf3>
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	5f e3       	ldi	r21, 0x3F	; 63
     61e:	2e d2       	rcall	.+1116   	; 0xa7c <__subsf3>
     620:	fa d2       	rcall	.+1524   	; 0xc16 <__fixunssfsi>
		UBRR0H = (temp >> 8) & 0xFF;
     622:	07 2f       	mov	r16, r23
     624:	18 2f       	mov	r17, r24
     626:	29 2f       	mov	r18, r25
     628:	33 27       	eor	r19, r19
     62a:	00 93 90 00 	sts	0x0090, r16	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
		UBRR0L = temp & 0xFF;
     62e:	69 b9       	out	0x09, r22	; 9
		SETB(UCSR0A, 1);
     630:	59 9a       	sbi	0x0b, 1	; 11
		break;
		default:
		break;
	}
	
	switch(huart->Init.WordLength)
     632:	8d 81       	ldd	r24, Y+5	; 0x05
     634:	82 30       	cpi	r24, 0x02	; 2
     636:	f9 f0       	breq	.+62     	; 0x676 <UART0_Init+0x10a>
     638:	28 f4       	brcc	.+10     	; 0x644 <UART0_Init+0xd8>
     63a:	88 23       	and	r24, r24
     63c:	41 f0       	breq	.+16     	; 0x64e <UART0_Init+0xe2>
     63e:	81 30       	cpi	r24, 0x01	; 1
     640:	81 f0       	breq	.+32     	; 0x662 <UART0_Init+0xf6>
     642:	36 c0       	rjmp	.+108    	; 0x6b0 <UART0_Init+0x144>
     644:	83 30       	cpi	r24, 0x03	; 3
     646:	09 f1       	breq	.+66     	; 0x68a <UART0_Init+0x11e>
     648:	84 30       	cpi	r24, 0x04	; 4
     64a:	49 f1       	breq	.+82     	; 0x69e <UART0_Init+0x132>
     64c:	31 c0       	rjmp	.+98     	; 0x6b0 <UART0_Init+0x144>
	{
		case UART_WORDLENGTH_8B:
		CLRB(UCSR0B, 2);
     64e:	52 98       	cbi	0x0a, 2	; 10
		SETB(UCSR0C, 2);
     650:	e5 e9       	ldi	r30, 0x95	; 149
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	84 60       	ori	r24, 0x04	; 4
     658:	80 83       	st	Z, r24
		SETB(UCSR0C, 1);
     65a:	80 81       	ld	r24, Z
     65c:	82 60       	ori	r24, 0x02	; 2
     65e:	80 83       	st	Z, r24
		break;
     660:	27 c0       	rjmp	.+78     	; 0x6b0 <UART0_Init+0x144>
		case UART_WORDLENGTH_5B:
		CLRB(UCSR0B, 2);
     662:	52 98       	cbi	0x0a, 2	; 10
		CLRB(UCSR0C, 2);
     664:	e5 e9       	ldi	r30, 0x95	; 149
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	8b 7f       	andi	r24, 0xFB	; 251
     66c:	80 83       	st	Z, r24
		CLRB(UCSR0C, 1);
     66e:	80 81       	ld	r24, Z
     670:	8d 7f       	andi	r24, 0xFD	; 253
     672:	80 83       	st	Z, r24
		break;
     674:	1d c0       	rjmp	.+58     	; 0x6b0 <UART0_Init+0x144>
		case UART_WORDLENGTH_6B:
		CLRB(UCSR0B, 2);
     676:	52 98       	cbi	0x0a, 2	; 10
		CLRB(UCSR0C, 2);
     678:	e5 e9       	ldi	r30, 0x95	; 149
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	8b 7f       	andi	r24, 0xFB	; 251
     680:	80 83       	st	Z, r24
		SETB(UCSR0C, 1);
     682:	80 81       	ld	r24, Z
     684:	82 60       	ori	r24, 0x02	; 2
     686:	80 83       	st	Z, r24
		break;
     688:	13 c0       	rjmp	.+38     	; 0x6b0 <UART0_Init+0x144>
		case UART_WORDLENGTH_7B:
		CLRB(UCSR0B, 2);
     68a:	52 98       	cbi	0x0a, 2	; 10
		SETB(UCSR0C, 2);
     68c:	e5 e9       	ldi	r30, 0x95	; 149
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	84 60       	ori	r24, 0x04	; 4
     694:	80 83       	st	Z, r24
		CLRB(UCSR0C, 1);
     696:	80 81       	ld	r24, Z
     698:	8d 7f       	andi	r24, 0xFD	; 253
     69a:	80 83       	st	Z, r24
		break;
     69c:	09 c0       	rjmp	.+18     	; 0x6b0 <UART0_Init+0x144>
		case UART_WORDLENGTH_9B:
		SETB(UCSR0B, 2);
     69e:	52 9a       	sbi	0x0a, 2	; 10
		SETB(UCSR0C, 2);
     6a0:	e5 e9       	ldi	r30, 0x95	; 149
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	84 60       	ori	r24, 0x04	; 4
     6a8:	80 83       	st	Z, r24
		SETB(UCSR0C, 1);
     6aa:	80 81       	ld	r24, Z
     6ac:	82 60       	ori	r24, 0x02	; 2
     6ae:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	
	switch(huart->Init.StopBits)
     6b0:	8e 81       	ldd	r24, Y+6	; 0x06
     6b2:	88 23       	and	r24, r24
     6b4:	19 f0       	breq	.+6      	; 0x6bc <UART0_Init+0x150>
     6b6:	81 30       	cpi	r24, 0x01	; 1
     6b8:	39 f0       	breq	.+14     	; 0x6c8 <UART0_Init+0x15c>
     6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <UART0_Init+0x166>
	{
		case UART_STOPBITS_1:
		CLRB(UCSR0C, 4);
     6bc:	e5 e9       	ldi	r30, 0x95	; 149
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	8f 7e       	andi	r24, 0xEF	; 239
     6c4:	80 83       	st	Z, r24
		break;
     6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <UART0_Init+0x166>
		case UART_STOPBITS_2:
		SETB(UCSR0C, 4);
     6c8:	e5 e9       	ldi	r30, 0x95	; 149
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	80 61       	ori	r24, 0x10	; 16
     6d0:	80 83       	st	Z, r24
		break;
	}
	
	switch(huart->Init.Parity)
     6d2:	8f 81       	ldd	r24, Y+7	; 0x07
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	69 f0       	breq	.+26     	; 0x6f2 <UART0_Init+0x186>
     6d8:	18 f0       	brcs	.+6      	; 0x6e0 <UART0_Init+0x174>
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	99 f0       	breq	.+38     	; 0x704 <UART0_Init+0x198>
     6de:	1a c0       	rjmp	.+52     	; 0x714 <UART0_Init+0x1a8>
	{
		case UART_PARITY_NONE:
		CLRB(UCSR0C, 6);
     6e0:	e5 e9       	ldi	r30, 0x95	; 149
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	8f 7b       	andi	r24, 0xBF	; 191
     6e8:	80 83       	st	Z, r24
		CLRB(UCSR0C, 5);
     6ea:	80 81       	ld	r24, Z
     6ec:	8f 7d       	andi	r24, 0xDF	; 223
     6ee:	80 83       	st	Z, r24
		break;
     6f0:	11 c0       	rjmp	.+34     	; 0x714 <UART0_Init+0x1a8>
		case UART_PARITY_EVEN:
		SETB(UCSR0C, 6);
     6f2:	e5 e9       	ldi	r30, 0x95	; 149
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	80 64       	ori	r24, 0x40	; 64
     6fa:	80 83       	st	Z, r24
		CLRB(UCSR0C, 5);
     6fc:	80 81       	ld	r24, Z
     6fe:	8f 7d       	andi	r24, 0xDF	; 223
     700:	80 83       	st	Z, r24
		break;
     702:	08 c0       	rjmp	.+16     	; 0x714 <UART0_Init+0x1a8>
		case  UART_PARITY_ODD:
		SETB(UCSR0C, 6);
     704:	e5 e9       	ldi	r30, 0x95	; 149
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 81       	ld	r24, Z
     70a:	80 64       	ori	r24, 0x40	; 64
     70c:	80 83       	st	Z, r24
		SETB(UCSR0C, 5);
     70e:	80 81       	ld	r24, Z
     710:	80 62       	ori	r24, 0x20	; 32
     712:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	switch(huart->Init.Mode)
     714:	88 85       	ldd	r24, Y+8	; 0x08
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	39 f0       	breq	.+14     	; 0x728 <UART0_Init+0x1bc>
     71a:	18 f0       	brcs	.+6      	; 0x722 <UART0_Init+0x1b6>
     71c:	82 30       	cpi	r24, 0x02	; 2
     71e:	39 f0       	breq	.+14     	; 0x72e <UART0_Init+0x1c2>
     720:	0c c0       	rjmp	.+24     	; 0x73a <UART0_Init+0x1ce>
	{
		case UART_MODE_RX:
		SETB(UCSR0B, 4);
     722:	54 9a       	sbi	0x0a, 4	; 10
		default:
		break;
	}
	
	
	return OK;
     724:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(huart->Init.Mode)
	{
		case UART_MODE_RX:
		SETB(UCSR0B, 4);
		break;
     726:	0a c0       	rjmp	.+20     	; 0x73c <UART0_Init+0x1d0>
		case UART_MODE_TX:
		SETB(UCSR0B, 3);
     728:	53 9a       	sbi	0x0a, 3	; 10
		default:
		break;
	}
	
	
	return OK;
     72a:	80 e0       	ldi	r24, 0x00	; 0
		case UART_MODE_RX:
		SETB(UCSR0B, 4);
		break;
		case UART_MODE_TX:
		SETB(UCSR0B, 3);
		break;
     72c:	07 c0       	rjmp	.+14     	; 0x73c <UART0_Init+0x1d0>
		case UART_MODE_RX_TX:
		SETB(UCSR0B, 3);
     72e:	53 9a       	sbi	0x0a, 3	; 10
		SETB(UCSR0B, 4);
     730:	54 9a       	sbi	0x0a, 4	; 10
		default:
		break;
	}
	
	
	return OK;
     732:	80 e0       	ldi	r24, 0x00	; 0
		SETB(UCSR0B, 3);
		break;
		case UART_MODE_RX_TX:
		SETB(UCSR0B, 3);
		SETB(UCSR0B, 4);
		break;
     734:	03 c0       	rjmp	.+6      	; 0x73c <UART0_Init+0x1d0>
StatusTypeDef UART0_Init(UART_HandleTypeDef *huart)
{
	uint32_t temp;
	if (huart == NULL)
	{
		return ERROR;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	01 c0       	rjmp	.+2      	; 0x73c <UART0_Init+0x1d0>
		default:
		break;
	}
	
	
	return OK;
     73a:	80 e0       	ldi	r24, 0x00	; 0
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <UART1_Init>:

StatusTypeDef UART1_Init(UART_HandleTypeDef *huart)
{
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	ec 01       	movw	r28, r24
	uint32_t temp;
	if (huart == NULL)
     74c:	89 2b       	or	r24, r25
     74e:	09 f4       	brne	.+2      	; 0x752 <UART1_Init+0xc>
     750:	03 c1       	rjmp	.+518    	; 0x958 <UART1_Init+0x212>
	{
		return ERROR;
	}
	
	switch(huart->Init.OverSampling)
     752:	89 85       	ldd	r24, Y+9	; 0x09
     754:	88 23       	and	r24, r24
     756:	19 f0       	breq	.+6      	; 0x75e <UART1_Init+0x18>
     758:	81 30       	cpi	r24, 0x01	; 1
     75a:	81 f1       	breq	.+96     	; 0x7bc <UART1_Init+0x76>
     75c:	59 c0       	rjmp	.+178    	; 0x810 <UART1_Init+0xca>
	{
		case UART_OVERSAMPLING_8:
		temp = (F_CPU / (16 * huart->Init.BaudRate)) - 1;
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	9a 81       	ldd	r25, Y+2	; 0x02
     762:	ab 81       	ldd	r26, Y+3	; 0x03
     764:	bc 81       	ldd	r27, Y+4	; 0x04
     766:	88 0f       	add	r24, r24
     768:	99 1f       	adc	r25, r25
     76a:	aa 1f       	adc	r26, r26
     76c:	bb 1f       	adc	r27, r27
     76e:	88 0f       	add	r24, r24
     770:	99 1f       	adc	r25, r25
     772:	aa 1f       	adc	r26, r26
     774:	bb 1f       	adc	r27, r27
     776:	9c 01       	movw	r18, r24
     778:	ad 01       	movw	r20, r26
     77a:	22 0f       	add	r18, r18
     77c:	33 1f       	adc	r19, r19
     77e:	44 1f       	adc	r20, r20
     780:	55 1f       	adc	r21, r21
     782:	22 0f       	add	r18, r18
     784:	33 1f       	adc	r19, r19
     786:	44 1f       	adc	r20, r20
     788:	55 1f       	adc	r21, r21
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	74 e2       	ldi	r23, 0x24	; 36
     78e:	84 ef       	ldi	r24, 0xF4	; 244
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	fb d2       	rcall	.+1526   	; 0xd8a <__udivmodsi4>
     794:	ba 01       	movw	r22, r20
     796:	a9 01       	movw	r20, r18
     798:	41 50       	subi	r20, 0x01	; 1
     79a:	51 09       	sbc	r21, r1
     79c:	61 09       	sbc	r22, r1
     79e:	71 09       	sbc	r23, r1
		UBRR1H = (temp >> 8) & 0xFF;
     7a0:	bb 27       	eor	r27, r27
     7a2:	a7 2f       	mov	r26, r23
     7a4:	96 2f       	mov	r25, r22
     7a6:	85 2f       	mov	r24, r21
     7a8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		UBRR1L = temp & 0xFF;
     7ac:	40 93 99 00 	sts	0x0099, r20	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
		CLRB(UCSR1A, 1);
     7b0:	eb e9       	ldi	r30, 0x9B	; 155
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	8d 7f       	andi	r24, 0xFD	; 253
     7b8:	80 83       	st	Z, r24
		break;
     7ba:	2a c0       	rjmp	.+84     	; 0x810 <UART1_Init+0xca>
		case UART_OVERSAMPLING_16:
		temp = (F_CPU / (8 * huart->Init.BaudRate)) - 1;
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	ab 81       	ldd	r26, Y+3	; 0x03
     7c2:	bc 81       	ldd	r27, Y+4	; 0x04
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	aa 1f       	adc	r26, r26
     7ca:	bb 1f       	adc	r27, r27
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	9c 01       	movw	r18, r24
     7d6:	ad 01       	movw	r20, r26
     7d8:	22 0f       	add	r18, r18
     7da:	33 1f       	adc	r19, r19
     7dc:	44 1f       	adc	r20, r20
     7de:	55 1f       	adc	r21, r21
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	74 e2       	ldi	r23, 0x24	; 36
     7e4:	84 ef       	ldi	r24, 0xF4	; 244
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	d0 d2       	rcall	.+1440   	; 0xd8a <__udivmodsi4>
     7ea:	ba 01       	movw	r22, r20
     7ec:	a9 01       	movw	r20, r18
     7ee:	41 50       	subi	r20, 0x01	; 1
     7f0:	51 09       	sbc	r21, r1
     7f2:	61 09       	sbc	r22, r1
     7f4:	71 09       	sbc	r23, r1
		UBRR1H = (temp >> 8) & 0xFF;
     7f6:	bb 27       	eor	r27, r27
     7f8:	a7 2f       	mov	r26, r23
     7fa:	96 2f       	mov	r25, r22
     7fc:	85 2f       	mov	r24, r21
     7fe:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
		UBRR1L = temp & 0xFF;
     802:	40 93 99 00 	sts	0x0099, r20	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
		SETB(UCSR1A, 1);
     806:	eb e9       	ldi	r30, 0x9B	; 155
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	82 60       	ori	r24, 0x02	; 2
     80e:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	
	switch(huart->Init.WordLength)
     810:	8d 81       	ldd	r24, Y+5	; 0x05
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	39 f1       	breq	.+78     	; 0x864 <UART1_Init+0x11e>
     816:	28 f4       	brcc	.+10     	; 0x822 <UART1_Init+0xdc>
     818:	88 23       	and	r24, r24
     81a:	41 f0       	breq	.+16     	; 0x82c <UART1_Init+0xe6>
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	a1 f0       	breq	.+40     	; 0x848 <UART1_Init+0x102>
     820:	4a c0       	rjmp	.+148    	; 0x8b6 <UART1_Init+0x170>
     822:	83 30       	cpi	r24, 0x03	; 3
     824:	69 f1       	breq	.+90     	; 0x880 <UART1_Init+0x13a>
     826:	84 30       	cpi	r24, 0x04	; 4
     828:	c9 f1       	breq	.+114    	; 0x89c <UART1_Init+0x156>
     82a:	45 c0       	rjmp	.+138    	; 0x8b6 <UART1_Init+0x170>
	{
		case UART_WORDLENGTH_8B:
		CLRB(UCSR1B, 2);
     82c:	ea e9       	ldi	r30, 0x9A	; 154
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	8b 7f       	andi	r24, 0xFB	; 251
     834:	80 83       	st	Z, r24
		SETB(UCSR1C, 2);
     836:	ed e9       	ldi	r30, 0x9D	; 157
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	84 60       	ori	r24, 0x04	; 4
     83e:	80 83       	st	Z, r24
		SETB(UCSR1C, 1);
     840:	80 81       	ld	r24, Z
     842:	82 60       	ori	r24, 0x02	; 2
     844:	80 83       	st	Z, r24
		break;
     846:	37 c0       	rjmp	.+110    	; 0x8b6 <UART1_Init+0x170>
		case UART_WORDLENGTH_5B:
		CLRB(UCSR1B, 2);
     848:	ea e9       	ldi	r30, 0x9A	; 154
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	8b 7f       	andi	r24, 0xFB	; 251
     850:	80 83       	st	Z, r24
		CLRB(UCSR1C, 2);
     852:	ed e9       	ldi	r30, 0x9D	; 157
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	8b 7f       	andi	r24, 0xFB	; 251
     85a:	80 83       	st	Z, r24
		CLRB(UCSR1C, 1);
     85c:	80 81       	ld	r24, Z
     85e:	8d 7f       	andi	r24, 0xFD	; 253
     860:	80 83       	st	Z, r24
		break;
     862:	29 c0       	rjmp	.+82     	; 0x8b6 <UART1_Init+0x170>
		case UART_WORDLENGTH_6B:
		CLRB(UCSR1B, 2);
     864:	ea e9       	ldi	r30, 0x9A	; 154
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	8b 7f       	andi	r24, 0xFB	; 251
     86c:	80 83       	st	Z, r24
		CLRB(UCSR1C, 2);
     86e:	ed e9       	ldi	r30, 0x9D	; 157
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	8b 7f       	andi	r24, 0xFB	; 251
     876:	80 83       	st	Z, r24
		SETB(UCSR1C, 1);
     878:	80 81       	ld	r24, Z
     87a:	82 60       	ori	r24, 0x02	; 2
     87c:	80 83       	st	Z, r24
		break;
     87e:	1b c0       	rjmp	.+54     	; 0x8b6 <UART1_Init+0x170>
		case UART_WORDLENGTH_7B:
		CLRB(UCSR1B, 2);
     880:	ea e9       	ldi	r30, 0x9A	; 154
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	8b 7f       	andi	r24, 0xFB	; 251
     888:	80 83       	st	Z, r24
		SETB(UCSR1C, 2);
     88a:	ed e9       	ldi	r30, 0x9D	; 157
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	84 60       	ori	r24, 0x04	; 4
     892:	80 83       	st	Z, r24
		CLRB(UCSR1C, 1);
     894:	80 81       	ld	r24, Z
     896:	8d 7f       	andi	r24, 0xFD	; 253
     898:	80 83       	st	Z, r24
		break;
     89a:	0d c0       	rjmp	.+26     	; 0x8b6 <UART1_Init+0x170>
		case UART_WORDLENGTH_9B:
		SETB(UCSR1B, 2);
     89c:	ea e9       	ldi	r30, 0x9A	; 154
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	84 60       	ori	r24, 0x04	; 4
     8a4:	80 83       	st	Z, r24
		SETB(UCSR1C, 2);
     8a6:	ed e9       	ldi	r30, 0x9D	; 157
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	80 81       	ld	r24, Z
     8ac:	84 60       	ori	r24, 0x04	; 4
     8ae:	80 83       	st	Z, r24
		SETB(UCSR1C, 1);
     8b0:	80 81       	ld	r24, Z
     8b2:	82 60       	ori	r24, 0x02	; 2
     8b4:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	
	switch(huart->Init.StopBits)
     8b6:	8e 81       	ldd	r24, Y+6	; 0x06
     8b8:	88 23       	and	r24, r24
     8ba:	19 f0       	breq	.+6      	; 0x8c2 <UART1_Init+0x17c>
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	39 f0       	breq	.+14     	; 0x8ce <UART1_Init+0x188>
     8c0:	0b c0       	rjmp	.+22     	; 0x8d8 <UART1_Init+0x192>
	{
		case UART_STOPBITS_1:
		CLRB(UCSR1C, 4);
     8c2:	ed e9       	ldi	r30, 0x9D	; 157
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	8f 7e       	andi	r24, 0xEF	; 239
     8ca:	80 83       	st	Z, r24
		break;
     8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <UART1_Init+0x192>
		case UART_STOPBITS_2:
		SETB(UCSR1C, 4);
     8ce:	ed e9       	ldi	r30, 0x9D	; 157
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	80 61       	ori	r24, 0x10	; 16
     8d6:	80 83       	st	Z, r24
		break;
	}
	
	switch(huart->Init.Parity)
     8d8:	8f 81       	ldd	r24, Y+7	; 0x07
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	69 f0       	breq	.+26     	; 0x8f8 <UART1_Init+0x1b2>
     8de:	18 f0       	brcs	.+6      	; 0x8e6 <UART1_Init+0x1a0>
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	99 f0       	breq	.+38     	; 0x90a <UART1_Init+0x1c4>
     8e4:	1a c0       	rjmp	.+52     	; 0x91a <UART1_Init+0x1d4>
	{
		case UART_PARITY_NONE:
		CLRB(UCSR1C, 6);
     8e6:	ed e9       	ldi	r30, 0x9D	; 157
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	8f 7b       	andi	r24, 0xBF	; 191
     8ee:	80 83       	st	Z, r24
		CLRB(UCSR1C, 5);
     8f0:	80 81       	ld	r24, Z
     8f2:	8f 7d       	andi	r24, 0xDF	; 223
     8f4:	80 83       	st	Z, r24
		break;
     8f6:	11 c0       	rjmp	.+34     	; 0x91a <UART1_Init+0x1d4>
		case UART_PARITY_EVEN:
		SETB(UCSR1C, 6);
     8f8:	ed e9       	ldi	r30, 0x9D	; 157
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	80 64       	ori	r24, 0x40	; 64
     900:	80 83       	st	Z, r24
		CLRB(UCSR1C, 5);
     902:	80 81       	ld	r24, Z
     904:	8f 7d       	andi	r24, 0xDF	; 223
     906:	80 83       	st	Z, r24
		break;
     908:	08 c0       	rjmp	.+16     	; 0x91a <UART1_Init+0x1d4>
		case  UART_PARITY_ODD:
		SETB(UCSR1C, 6);
     90a:	ed e9       	ldi	r30, 0x9D	; 157
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	80 64       	ori	r24, 0x40	; 64
     912:	80 83       	st	Z, r24
		SETB(UCSR1C, 5);
     914:	80 81       	ld	r24, Z
     916:	80 62       	ori	r24, 0x20	; 32
     918:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	
	switch(huart->Init.Mode)
     91a:	88 85       	ldd	r24, Y+8	; 0x08
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	59 f0       	breq	.+22     	; 0x936 <UART1_Init+0x1f0>
     920:	18 f0       	brcs	.+6      	; 0x928 <UART1_Init+0x1e2>
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	79 f0       	breq	.+30     	; 0x944 <UART1_Init+0x1fe>
     926:	1a c0       	rjmp	.+52     	; 0x95c <UART1_Init+0x216>
	{
		case UART_MODE_RX:
		SETB(UCSR1B, 4);
     928:	ea e9       	ldi	r30, 0x9A	; 154
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	80 61       	ori	r24, 0x10	; 16
     930:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     932:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(huart->Init.Mode)
	{
		case UART_MODE_RX:
		SETB(UCSR1B, 4);
		break;
     934:	14 c0       	rjmp	.+40     	; 0x95e <UART1_Init+0x218>
		case UART_MODE_TX:
		SETB(UCSR1B, 3);
     936:	ea e9       	ldi	r30, 0x9A	; 154
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	88 60       	ori	r24, 0x08	; 8
     93e:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     940:	80 e0       	ldi	r24, 0x00	; 0
		case UART_MODE_RX:
		SETB(UCSR1B, 4);
		break;
		case UART_MODE_TX:
		SETB(UCSR1B, 3);
		break;
     942:	0d c0       	rjmp	.+26     	; 0x95e <UART1_Init+0x218>
		case UART_MODE_RX_TX:
		SETB(UCSR1B, 3);
     944:	ea e9       	ldi	r30, 0x9A	; 154
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	88 60       	ori	r24, 0x08	; 8
     94c:	80 83       	st	Z, r24
		SETB(UCSR1B, 4);
     94e:	80 81       	ld	r24, Z
     950:	80 61       	ori	r24, 0x10	; 16
     952:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     954:	80 e0       	ldi	r24, 0x00	; 0
		SETB(UCSR1B, 3);
		break;
		case UART_MODE_RX_TX:
		SETB(UCSR1B, 3);
		SETB(UCSR1B, 4);
		break;
     956:	03 c0       	rjmp	.+6      	; 0x95e <UART1_Init+0x218>
StatusTypeDef UART1_Init(UART_HandleTypeDef *huart)
{
	uint32_t temp;
	if (huart == NULL)
	{
		return ERROR;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	01 c0       	rjmp	.+2      	; 0x95e <UART1_Init+0x218>
		default:
		break;
	}
	
	
	return OK;
     95c:	80 e0       	ldi	r24, 0x00	; 0
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <UART_Init>:



StatusTypeDef UART_Init(UART_HandleTypeDef *huart)
{
	switch(huart->USARTn)
     964:	fc 01       	movw	r30, r24
     966:	20 81       	ld	r18, Z
     968:	22 23       	and	r18, r18
     96a:	19 f0       	breq	.+6      	; 0x972 <UART_Init+0xe>
     96c:	21 30       	cpi	r18, 0x01	; 1
     96e:	19 f0       	breq	.+6      	; 0x976 <UART_Init+0x12>
     970:	03 c0       	rjmp	.+6      	; 0x978 <UART_Init+0x14>
	{
		case USART0:
			UART0_Init(huart);
     972:	fc dd       	rcall	.-1032   	; 0x56c <UART0_Init>
		break;
		case USART1:
			UART1_Init(huart);
     974:	01 c0       	rjmp	.+2      	; 0x978 <UART_Init+0x14>
     976:	e7 de       	rcall	.-562    	; 0x746 <UART1_Init>
		break;
		default:
		break;
	}
	return OK;
}
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	08 95       	ret

0000097c <UART_Transmit>:

StatusTypeDef UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	dc 01       	movw	r26, r24
	uint8_t		*pdata8bits = NULL;
	uint16_t	*pdata16bits = NULL;

	
	huart->ErrorCode = UART_ERROR_NONE;
     98a:	56 96       	adiw	r26, 0x16	; 22
     98c:	1c 92       	st	X, r1
     98e:	56 97       	sbiw	r26, 0x16	; 22
	
	huart->TxXferSize = Size;
     990:	1f 96       	adiw	r26, 0x0f	; 15
     992:	5c 93       	st	X, r21
     994:	4e 93       	st	-X, r20
     996:	1e 97       	sbiw	r26, 0x0e	; 14
	huart->TxXferCount = Size;
     998:	53 96       	adiw	r26, 0x13	; 19
     99a:	5c 93       	st	X, r21
     99c:	4e 93       	st	-X, r20
     99e:	52 97       	sbiw	r26, 0x12	; 18
	
	if (huart->Init.WordLength == UART_WORDLENGTH_9B && huart->Init.Parity == UART_PARITY_NONE)
     9a0:	15 96       	adiw	r26, 0x05	; 5
     9a2:	8c 91       	ld	r24, X
     9a4:	15 97       	sbiw	r26, 0x05	; 5
     9a6:	84 30       	cpi	r24, 0x04	; 4
     9a8:	51 f4       	brne	.+20     	; 0x9be <UART_Transmit+0x42>
     9aa:	17 96       	adiw	r26, 0x07	; 7
     9ac:	8c 91       	ld	r24, X
     9ae:	17 97       	sbiw	r26, 0x07	; 7
     9b0:	81 11       	cpse	r24, r1
     9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <UART_Transmit+0x48>
	{
		pdata8bits = NULL;
		pdata16bits = (uint16_t *) pData;
     9b4:	06 2f       	mov	r16, r22
     9b6:	17 2f       	mov	r17, r23
	huart->TxXferSize = Size;
	huart->TxXferCount = Size;
	
	if (huart->Init.WordLength == UART_WORDLENGTH_9B && huart->Init.Parity == UART_PARITY_NONE)
	{
		pdata8bits = NULL;
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <UART_Transmit+0x4c>
		pdata16bits = (uint16_t *) pData;
	}
	else
	{
		pdata8bits = pData;
		pdata16bits = NULL;
     9be:	00 e0       	ldi	r16, 0x00	; 0
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <UART_Transmit+0x4c>
     9c4:	00 e0       	ldi	r16, 0x00	; 0
     9c6:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	switch(huart->USARTn)
     9c8:	8c 91       	ld	r24, X
     9ca:	88 23       	and	r24, r24
     9cc:	31 f0       	breq	.+12     	; 0x9da <UART_Transmit+0x5e>
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <UART_Transmit+0x58>
     9d2:	46 c0       	rjmp	.+140    	; 0xa60 <UART_Transmit+0xe4>
			}
			
		}
		break;
		case USART1:
		for(int i = 0; i < huart->TxXferCount; i++)
     9d4:	45 2b       	or	r20, r21
     9d6:	f1 f4       	brne	.+60     	; 0xa14 <UART_Transmit+0x98>
     9d8:	43 c0       	rjmp	.+134    	; 0xa60 <UART_Transmit+0xe4>
	}
	
	switch(huart->USARTn)
	{
		case USART0:
		for(int i = 0; i < huart->TxXferCount; i++)
     9da:	45 2b       	or	r20, r21
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <UART_Transmit+0x64>
     9de:	40 c0       	rjmp	.+128    	; 0xa60 <UART_Transmit+0xe4>
     9e0:	c6 2f       	mov	r28, r22
     9e2:	d7 2f       	mov	r29, r23
     9e4:	f8 01       	movw	r30, r16
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
		{
			while (!(UCSR0A & 0x20));
     9ea:	5d 9b       	sbis	0x0b, 5	; 11
     9ec:	fe cf       	rjmp	.-4      	; 0x9ea <UART_Transmit+0x6e>
			if (pdata16bits == NULL)
     9ee:	01 15       	cp	r16, r1
     9f0:	11 05       	cpc	r17, r1
     9f2:	19 f4       	brne	.+6      	; 0x9fa <UART_Transmit+0x7e>
			{
				UDR0 = *(pdata8bits + i);
     9f4:	28 81       	ld	r18, Y
     9f6:	2c b9       	out	0x0c, r18	; 12
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <UART_Transmit+0x82>
			}
			else
			{
				UDR0 = *(pdata16bits + i);
     9fa:	20 81       	ld	r18, Z
     9fc:	2c b9       	out	0x0c, r18	; 12
	}
	
	switch(huart->USARTn)
	{
		case USART0:
		for(int i = 0; i < huart->TxXferCount; i++)
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	21 96       	adiw	r28, 0x01	; 1
     a02:	32 96       	adiw	r30, 0x02	; 2
     a04:	52 96       	adiw	r26, 0x12	; 18
     a06:	2d 91       	ld	r18, X+
     a08:	3c 91       	ld	r19, X
     a0a:	53 97       	sbiw	r26, 0x13	; 19
     a0c:	82 17       	cp	r24, r18
     a0e:	93 07       	cpc	r25, r19
     a10:	60 f3       	brcs	.-40     	; 0x9ea <UART_Transmit+0x6e>
     a12:	26 c0       	rjmp	.+76     	; 0xa60 <UART_Transmit+0xe4>
     a14:	46 2f       	mov	r20, r22
     a16:	57 2f       	mov	r21, r23
     a18:	78 01       	movw	r14, r16
			}
			
		}
		break;
		case USART1:
		for(int i = 0; i < huart->TxXferCount; i++)
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
		{
			while (!(UCSR1A & 0x20));
     a1e:	eb e9       	ldi	r30, 0x9B	; 155
     a20:	f0 e0       	ldi	r31, 0x00	; 0
			{
				UDR1 = *(pdata8bits + i);
			}
			else
			{
				UDR1 = *(pdata16bits + i);
     a22:	6c e9       	ldi	r22, 0x9C	; 156
     a24:	70 e0       	ldi	r23, 0x00	; 0
		}
		break;
		case USART1:
		for(int i = 0; i < huart->TxXferCount; i++)
		{
			while (!(UCSR1A & 0x20));
     a26:	90 81       	ld	r25, Z
     a28:	95 ff       	sbrs	r25, 5
     a2a:	fd cf       	rjmp	.-6      	; 0xa26 <UART_Transmit+0xaa>
			if (pdata16bits == NULL)
     a2c:	01 15       	cp	r16, r1
     a2e:	11 05       	cpc	r17, r1
     a30:	29 f4       	brne	.+10     	; 0xa3c <UART_Transmit+0xc0>
			{
				UDR1 = *(pdata8bits + i);
     a32:	ea 01       	movw	r28, r20
     a34:	88 81       	ld	r24, Y
     a36:	eb 01       	movw	r28, r22
     a38:	88 83       	st	Y, r24
     a3a:	04 c0       	rjmp	.+8      	; 0xa44 <UART_Transmit+0xc8>
			}
			else
			{
				UDR1 = *(pdata16bits + i);
     a3c:	e7 01       	movw	r28, r14
     a3e:	88 81       	ld	r24, Y
     a40:	eb 01       	movw	r28, r22
     a42:	88 83       	st	Y, r24
			}
			
		}
		break;
		case USART1:
		for(int i = 0; i < huart->TxXferCount; i++)
     a44:	2f 5f       	subi	r18, 0xFF	; 255
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
     a48:	4f 5f       	subi	r20, 0xFF	; 255
     a4a:	5f 4f       	sbci	r21, 0xFF	; 255
     a4c:	d2 e0       	ldi	r29, 0x02	; 2
     a4e:	ed 0e       	add	r14, r29
     a50:	f1 1c       	adc	r15, r1
     a52:	52 96       	adiw	r26, 0x12	; 18
     a54:	8d 91       	ld	r24, X+
     a56:	9c 91       	ld	r25, X
     a58:	53 97       	sbiw	r26, 0x13	; 19
     a5a:	28 17       	cp	r18, r24
     a5c:	39 07       	cpc	r19, r25
     a5e:	18 f3       	brcs	.-58     	; 0xa26 <UART_Transmit+0xaa>
		break;
	}
	
	
	return OK;
}
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	08 95       	ret

00000a70 <main>:
#include "main.h"


int main(void)
{
    hwInit();
     a70:	1c dc       	rcall	.-1992   	; 0x2aa <hwInit>
	apInit();
     a72:	39 db       	rcall	.-2446   	; 0xe6 <apInit>
	
	apMain();
     a74:	3f db       	rcall	.-2434   	; 0xf4 <apMain>
     a76:	80 e0       	ldi	r24, 0x00	; 0
}
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	08 95       	ret

00000a7c <__subsf3>:
     a7c:	50 58       	subi	r21, 0x80	; 128

00000a7e <__addsf3>:
     a7e:	bb 27       	eor	r27, r27
     a80:	aa 27       	eor	r26, r26
     a82:	0e d0       	rcall	.+28     	; 0xaa0 <__addsf3x>
     a84:	48 c1       	rjmp	.+656    	; 0xd16 <__fp_round>
     a86:	39 d1       	rcall	.+626    	; 0xcfa <__fp_pscA>
     a88:	30 f0       	brcs	.+12     	; 0xa96 <__addsf3+0x18>
     a8a:	3e d1       	rcall	.+636    	; 0xd08 <__fp_pscB>
     a8c:	20 f0       	brcs	.+8      	; 0xa96 <__addsf3+0x18>
     a8e:	31 f4       	brne	.+12     	; 0xa9c <__addsf3+0x1e>
     a90:	9f 3f       	cpi	r25, 0xFF	; 255
     a92:	11 f4       	brne	.+4      	; 0xa98 <__addsf3+0x1a>
     a94:	1e f4       	brtc	.+6      	; 0xa9c <__addsf3+0x1e>
     a96:	2e c1       	rjmp	.+604    	; 0xcf4 <__fp_nan>
     a98:	0e f4       	brtc	.+2      	; 0xa9c <__addsf3+0x1e>
     a9a:	e0 95       	com	r30
     a9c:	e7 fb       	bst	r30, 7
     a9e:	24 c1       	rjmp	.+584    	; 0xce8 <__fp_inf>

00000aa0 <__addsf3x>:
     aa0:	e9 2f       	mov	r30, r25
     aa2:	4a d1       	rcall	.+660    	; 0xd38 <__fp_split3>
     aa4:	80 f3       	brcs	.-32     	; 0xa86 <__addsf3+0x8>
     aa6:	ba 17       	cp	r27, r26
     aa8:	62 07       	cpc	r22, r18
     aaa:	73 07       	cpc	r23, r19
     aac:	84 07       	cpc	r24, r20
     aae:	95 07       	cpc	r25, r21
     ab0:	18 f0       	brcs	.+6      	; 0xab8 <__addsf3x+0x18>
     ab2:	71 f4       	brne	.+28     	; 0xad0 <__addsf3x+0x30>
     ab4:	9e f5       	brtc	.+102    	; 0xb1c <__addsf3x+0x7c>
     ab6:	62 c1       	rjmp	.+708    	; 0xd7c <__fp_zero>
     ab8:	0e f4       	brtc	.+2      	; 0xabc <__addsf3x+0x1c>
     aba:	e0 95       	com	r30
     abc:	0b 2e       	mov	r0, r27
     abe:	ba 2f       	mov	r27, r26
     ac0:	a0 2d       	mov	r26, r0
     ac2:	0b 01       	movw	r0, r22
     ac4:	b9 01       	movw	r22, r18
     ac6:	90 01       	movw	r18, r0
     ac8:	0c 01       	movw	r0, r24
     aca:	ca 01       	movw	r24, r20
     acc:	a0 01       	movw	r20, r0
     ace:	11 24       	eor	r1, r1
     ad0:	ff 27       	eor	r31, r31
     ad2:	59 1b       	sub	r21, r25
     ad4:	99 f0       	breq	.+38     	; 0xafc <__addsf3x+0x5c>
     ad6:	59 3f       	cpi	r21, 0xF9	; 249
     ad8:	50 f4       	brcc	.+20     	; 0xaee <__addsf3x+0x4e>
     ada:	50 3e       	cpi	r21, 0xE0	; 224
     adc:	68 f1       	brcs	.+90     	; 0xb38 <__addsf3x+0x98>
     ade:	1a 16       	cp	r1, r26
     ae0:	f0 40       	sbci	r31, 0x00	; 0
     ae2:	a2 2f       	mov	r26, r18
     ae4:	23 2f       	mov	r18, r19
     ae6:	34 2f       	mov	r19, r20
     ae8:	44 27       	eor	r20, r20
     aea:	58 5f       	subi	r21, 0xF8	; 248
     aec:	f3 cf       	rjmp	.-26     	; 0xad4 <__addsf3x+0x34>
     aee:	46 95       	lsr	r20
     af0:	37 95       	ror	r19
     af2:	27 95       	ror	r18
     af4:	a7 95       	ror	r26
     af6:	f0 40       	sbci	r31, 0x00	; 0
     af8:	53 95       	inc	r21
     afa:	c9 f7       	brne	.-14     	; 0xaee <__addsf3x+0x4e>
     afc:	7e f4       	brtc	.+30     	; 0xb1c <__addsf3x+0x7c>
     afe:	1f 16       	cp	r1, r31
     b00:	ba 0b       	sbc	r27, r26
     b02:	62 0b       	sbc	r22, r18
     b04:	73 0b       	sbc	r23, r19
     b06:	84 0b       	sbc	r24, r20
     b08:	ba f0       	brmi	.+46     	; 0xb38 <__addsf3x+0x98>
     b0a:	91 50       	subi	r25, 0x01	; 1
     b0c:	a1 f0       	breq	.+40     	; 0xb36 <__addsf3x+0x96>
     b0e:	ff 0f       	add	r31, r31
     b10:	bb 1f       	adc	r27, r27
     b12:	66 1f       	adc	r22, r22
     b14:	77 1f       	adc	r23, r23
     b16:	88 1f       	adc	r24, r24
     b18:	c2 f7       	brpl	.-16     	; 0xb0a <__addsf3x+0x6a>
     b1a:	0e c0       	rjmp	.+28     	; 0xb38 <__addsf3x+0x98>
     b1c:	ba 0f       	add	r27, r26
     b1e:	62 1f       	adc	r22, r18
     b20:	73 1f       	adc	r23, r19
     b22:	84 1f       	adc	r24, r20
     b24:	48 f4       	brcc	.+18     	; 0xb38 <__addsf3x+0x98>
     b26:	87 95       	ror	r24
     b28:	77 95       	ror	r23
     b2a:	67 95       	ror	r22
     b2c:	b7 95       	ror	r27
     b2e:	f7 95       	ror	r31
     b30:	9e 3f       	cpi	r25, 0xFE	; 254
     b32:	08 f0       	brcs	.+2      	; 0xb36 <__addsf3x+0x96>
     b34:	b3 cf       	rjmp	.-154    	; 0xa9c <__addsf3+0x1e>
     b36:	93 95       	inc	r25
     b38:	88 0f       	add	r24, r24
     b3a:	08 f0       	brcs	.+2      	; 0xb3e <__addsf3x+0x9e>
     b3c:	99 27       	eor	r25, r25
     b3e:	ee 0f       	add	r30, r30
     b40:	97 95       	ror	r25
     b42:	87 95       	ror	r24
     b44:	08 95       	ret

00000b46 <__divsf3>:
     b46:	0c d0       	rcall	.+24     	; 0xb60 <__divsf3x>
     b48:	e6 c0       	rjmp	.+460    	; 0xd16 <__fp_round>
     b4a:	de d0       	rcall	.+444    	; 0xd08 <__fp_pscB>
     b4c:	40 f0       	brcs	.+16     	; 0xb5e <__divsf3+0x18>
     b4e:	d5 d0       	rcall	.+426    	; 0xcfa <__fp_pscA>
     b50:	30 f0       	brcs	.+12     	; 0xb5e <__divsf3+0x18>
     b52:	21 f4       	brne	.+8      	; 0xb5c <__divsf3+0x16>
     b54:	5f 3f       	cpi	r21, 0xFF	; 255
     b56:	19 f0       	breq	.+6      	; 0xb5e <__divsf3+0x18>
     b58:	c7 c0       	rjmp	.+398    	; 0xce8 <__fp_inf>
     b5a:	51 11       	cpse	r21, r1
     b5c:	10 c1       	rjmp	.+544    	; 0xd7e <__fp_szero>
     b5e:	ca c0       	rjmp	.+404    	; 0xcf4 <__fp_nan>

00000b60 <__divsf3x>:
     b60:	eb d0       	rcall	.+470    	; 0xd38 <__fp_split3>
     b62:	98 f3       	brcs	.-26     	; 0xb4a <__divsf3+0x4>

00000b64 <__divsf3_pse>:
     b64:	99 23       	and	r25, r25
     b66:	c9 f3       	breq	.-14     	; 0xb5a <__divsf3+0x14>
     b68:	55 23       	and	r21, r21
     b6a:	b1 f3       	breq	.-20     	; 0xb58 <__divsf3+0x12>
     b6c:	95 1b       	sub	r25, r21
     b6e:	55 0b       	sbc	r21, r21
     b70:	bb 27       	eor	r27, r27
     b72:	aa 27       	eor	r26, r26
     b74:	62 17       	cp	r22, r18
     b76:	73 07       	cpc	r23, r19
     b78:	84 07       	cpc	r24, r20
     b7a:	38 f0       	brcs	.+14     	; 0xb8a <__divsf3_pse+0x26>
     b7c:	9f 5f       	subi	r25, 0xFF	; 255
     b7e:	5f 4f       	sbci	r21, 0xFF	; 255
     b80:	22 0f       	add	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	44 1f       	adc	r20, r20
     b86:	aa 1f       	adc	r26, r26
     b88:	a9 f3       	breq	.-22     	; 0xb74 <__divsf3_pse+0x10>
     b8a:	33 d0       	rcall	.+102    	; 0xbf2 <__divsf3_pse+0x8e>
     b8c:	0e 2e       	mov	r0, r30
     b8e:	3a f0       	brmi	.+14     	; 0xb9e <__divsf3_pse+0x3a>
     b90:	e0 e8       	ldi	r30, 0x80	; 128
     b92:	30 d0       	rcall	.+96     	; 0xbf4 <__divsf3_pse+0x90>
     b94:	91 50       	subi	r25, 0x01	; 1
     b96:	50 40       	sbci	r21, 0x00	; 0
     b98:	e6 95       	lsr	r30
     b9a:	00 1c       	adc	r0, r0
     b9c:	ca f7       	brpl	.-14     	; 0xb90 <__divsf3_pse+0x2c>
     b9e:	29 d0       	rcall	.+82     	; 0xbf2 <__divsf3_pse+0x8e>
     ba0:	fe 2f       	mov	r31, r30
     ba2:	27 d0       	rcall	.+78     	; 0xbf2 <__divsf3_pse+0x8e>
     ba4:	66 0f       	add	r22, r22
     ba6:	77 1f       	adc	r23, r23
     ba8:	88 1f       	adc	r24, r24
     baa:	bb 1f       	adc	r27, r27
     bac:	26 17       	cp	r18, r22
     bae:	37 07       	cpc	r19, r23
     bb0:	48 07       	cpc	r20, r24
     bb2:	ab 07       	cpc	r26, r27
     bb4:	b0 e8       	ldi	r27, 0x80	; 128
     bb6:	09 f0       	breq	.+2      	; 0xbba <__divsf3_pse+0x56>
     bb8:	bb 0b       	sbc	r27, r27
     bba:	80 2d       	mov	r24, r0
     bbc:	bf 01       	movw	r22, r30
     bbe:	ff 27       	eor	r31, r31
     bc0:	93 58       	subi	r25, 0x83	; 131
     bc2:	5f 4f       	sbci	r21, 0xFF	; 255
     bc4:	2a f0       	brmi	.+10     	; 0xbd0 <__divsf3_pse+0x6c>
     bc6:	9e 3f       	cpi	r25, 0xFE	; 254
     bc8:	51 05       	cpc	r21, r1
     bca:	68 f0       	brcs	.+26     	; 0xbe6 <__divsf3_pse+0x82>
     bcc:	8d c0       	rjmp	.+282    	; 0xce8 <__fp_inf>
     bce:	d7 c0       	rjmp	.+430    	; 0xd7e <__fp_szero>
     bd0:	5f 3f       	cpi	r21, 0xFF	; 255
     bd2:	ec f3       	brlt	.-6      	; 0xbce <__divsf3_pse+0x6a>
     bd4:	98 3e       	cpi	r25, 0xE8	; 232
     bd6:	dc f3       	brlt	.-10     	; 0xbce <__divsf3_pse+0x6a>
     bd8:	86 95       	lsr	r24
     bda:	77 95       	ror	r23
     bdc:	67 95       	ror	r22
     bde:	b7 95       	ror	r27
     be0:	f7 95       	ror	r31
     be2:	9f 5f       	subi	r25, 0xFF	; 255
     be4:	c9 f7       	brne	.-14     	; 0xbd8 <__divsf3_pse+0x74>
     be6:	88 0f       	add	r24, r24
     be8:	91 1d       	adc	r25, r1
     bea:	96 95       	lsr	r25
     bec:	87 95       	ror	r24
     bee:	97 f9       	bld	r25, 7
     bf0:	08 95       	ret
     bf2:	e1 e0       	ldi	r30, 0x01	; 1
     bf4:	66 0f       	add	r22, r22
     bf6:	77 1f       	adc	r23, r23
     bf8:	88 1f       	adc	r24, r24
     bfa:	bb 1f       	adc	r27, r27
     bfc:	62 17       	cp	r22, r18
     bfe:	73 07       	cpc	r23, r19
     c00:	84 07       	cpc	r24, r20
     c02:	ba 07       	cpc	r27, r26
     c04:	20 f0       	brcs	.+8      	; 0xc0e <__divsf3_pse+0xaa>
     c06:	62 1b       	sub	r22, r18
     c08:	73 0b       	sbc	r23, r19
     c0a:	84 0b       	sbc	r24, r20
     c0c:	ba 0b       	sbc	r27, r26
     c0e:	ee 1f       	adc	r30, r30
     c10:	88 f7       	brcc	.-30     	; 0xbf4 <__divsf3_pse+0x90>
     c12:	e0 95       	com	r30
     c14:	08 95       	ret

00000c16 <__fixunssfsi>:
     c16:	98 d0       	rcall	.+304    	; 0xd48 <__fp_splitA>
     c18:	88 f0       	brcs	.+34     	; 0xc3c <__fixunssfsi+0x26>
     c1a:	9f 57       	subi	r25, 0x7F	; 127
     c1c:	90 f0       	brcs	.+36     	; 0xc42 <__fixunssfsi+0x2c>
     c1e:	b9 2f       	mov	r27, r25
     c20:	99 27       	eor	r25, r25
     c22:	b7 51       	subi	r27, 0x17	; 23
     c24:	a0 f0       	brcs	.+40     	; 0xc4e <__fixunssfsi+0x38>
     c26:	d1 f0       	breq	.+52     	; 0xc5c <__fixunssfsi+0x46>
     c28:	66 0f       	add	r22, r22
     c2a:	77 1f       	adc	r23, r23
     c2c:	88 1f       	adc	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	1a f0       	brmi	.+6      	; 0xc38 <__fixunssfsi+0x22>
     c32:	ba 95       	dec	r27
     c34:	c9 f7       	brne	.-14     	; 0xc28 <__fixunssfsi+0x12>
     c36:	12 c0       	rjmp	.+36     	; 0xc5c <__fixunssfsi+0x46>
     c38:	b1 30       	cpi	r27, 0x01	; 1
     c3a:	81 f0       	breq	.+32     	; 0xc5c <__fixunssfsi+0x46>
     c3c:	9f d0       	rcall	.+318    	; 0xd7c <__fp_zero>
     c3e:	b1 e0       	ldi	r27, 0x01	; 1
     c40:	08 95       	ret
     c42:	9c c0       	rjmp	.+312    	; 0xd7c <__fp_zero>
     c44:	67 2f       	mov	r22, r23
     c46:	78 2f       	mov	r23, r24
     c48:	88 27       	eor	r24, r24
     c4a:	b8 5f       	subi	r27, 0xF8	; 248
     c4c:	39 f0       	breq	.+14     	; 0xc5c <__fixunssfsi+0x46>
     c4e:	b9 3f       	cpi	r27, 0xF9	; 249
     c50:	cc f3       	brlt	.-14     	; 0xc44 <__fixunssfsi+0x2e>
     c52:	86 95       	lsr	r24
     c54:	77 95       	ror	r23
     c56:	67 95       	ror	r22
     c58:	b3 95       	inc	r27
     c5a:	d9 f7       	brne	.-10     	; 0xc52 <__fixunssfsi+0x3c>
     c5c:	3e f4       	brtc	.+14     	; 0xc6c <__fixunssfsi+0x56>
     c5e:	90 95       	com	r25
     c60:	80 95       	com	r24
     c62:	70 95       	com	r23
     c64:	61 95       	neg	r22
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	8f 4f       	sbci	r24, 0xFF	; 255
     c6a:	9f 4f       	sbci	r25, 0xFF	; 255
     c6c:	08 95       	ret

00000c6e <__floatunsisf>:
     c6e:	e8 94       	clt
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <__floatsisf+0x12>

00000c72 <__floatsisf>:
     c72:	97 fb       	bst	r25, 7
     c74:	3e f4       	brtc	.+14     	; 0xc84 <__floatsisf+0x12>
     c76:	90 95       	com	r25
     c78:	80 95       	com	r24
     c7a:	70 95       	com	r23
     c7c:	61 95       	neg	r22
     c7e:	7f 4f       	sbci	r23, 0xFF	; 255
     c80:	8f 4f       	sbci	r24, 0xFF	; 255
     c82:	9f 4f       	sbci	r25, 0xFF	; 255
     c84:	99 23       	and	r25, r25
     c86:	a9 f0       	breq	.+42     	; 0xcb2 <__floatsisf+0x40>
     c88:	f9 2f       	mov	r31, r25
     c8a:	96 e9       	ldi	r25, 0x96	; 150
     c8c:	bb 27       	eor	r27, r27
     c8e:	93 95       	inc	r25
     c90:	f6 95       	lsr	r31
     c92:	87 95       	ror	r24
     c94:	77 95       	ror	r23
     c96:	67 95       	ror	r22
     c98:	b7 95       	ror	r27
     c9a:	f1 11       	cpse	r31, r1
     c9c:	f8 cf       	rjmp	.-16     	; 0xc8e <__floatsisf+0x1c>
     c9e:	fa f4       	brpl	.+62     	; 0xcde <__floatsisf+0x6c>
     ca0:	bb 0f       	add	r27, r27
     ca2:	11 f4       	brne	.+4      	; 0xca8 <__floatsisf+0x36>
     ca4:	60 ff       	sbrs	r22, 0
     ca6:	1b c0       	rjmp	.+54     	; 0xcde <__floatsisf+0x6c>
     ca8:	6f 5f       	subi	r22, 0xFF	; 255
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	8f 4f       	sbci	r24, 0xFF	; 255
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	16 c0       	rjmp	.+44     	; 0xcde <__floatsisf+0x6c>
     cb2:	88 23       	and	r24, r24
     cb4:	11 f0       	breq	.+4      	; 0xcba <__floatsisf+0x48>
     cb6:	96 e9       	ldi	r25, 0x96	; 150
     cb8:	11 c0       	rjmp	.+34     	; 0xcdc <__floatsisf+0x6a>
     cba:	77 23       	and	r23, r23
     cbc:	21 f0       	breq	.+8      	; 0xcc6 <__floatsisf+0x54>
     cbe:	9e e8       	ldi	r25, 0x8E	; 142
     cc0:	87 2f       	mov	r24, r23
     cc2:	76 2f       	mov	r23, r22
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__floatsisf+0x5e>
     cc6:	66 23       	and	r22, r22
     cc8:	71 f0       	breq	.+28     	; 0xce6 <__floatsisf+0x74>
     cca:	96 e8       	ldi	r25, 0x86	; 134
     ccc:	86 2f       	mov	r24, r22
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	2a f0       	brmi	.+10     	; 0xcde <__floatsisf+0x6c>
     cd4:	9a 95       	dec	r25
     cd6:	66 0f       	add	r22, r22
     cd8:	77 1f       	adc	r23, r23
     cda:	88 1f       	adc	r24, r24
     cdc:	da f7       	brpl	.-10     	; 0xcd4 <__floatsisf+0x62>
     cde:	88 0f       	add	r24, r24
     ce0:	96 95       	lsr	r25
     ce2:	87 95       	ror	r24
     ce4:	97 f9       	bld	r25, 7
     ce6:	08 95       	ret

00000ce8 <__fp_inf>:
     ce8:	97 f9       	bld	r25, 7
     cea:	9f 67       	ori	r25, 0x7F	; 127
     cec:	80 e8       	ldi	r24, 0x80	; 128
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	08 95       	ret

00000cf4 <__fp_nan>:
     cf4:	9f ef       	ldi	r25, 0xFF	; 255
     cf6:	80 ec       	ldi	r24, 0xC0	; 192
     cf8:	08 95       	ret

00000cfa <__fp_pscA>:
     cfa:	00 24       	eor	r0, r0
     cfc:	0a 94       	dec	r0
     cfe:	16 16       	cp	r1, r22
     d00:	17 06       	cpc	r1, r23
     d02:	18 06       	cpc	r1, r24
     d04:	09 06       	cpc	r0, r25
     d06:	08 95       	ret

00000d08 <__fp_pscB>:
     d08:	00 24       	eor	r0, r0
     d0a:	0a 94       	dec	r0
     d0c:	12 16       	cp	r1, r18
     d0e:	13 06       	cpc	r1, r19
     d10:	14 06       	cpc	r1, r20
     d12:	05 06       	cpc	r0, r21
     d14:	08 95       	ret

00000d16 <__fp_round>:
     d16:	09 2e       	mov	r0, r25
     d18:	03 94       	inc	r0
     d1a:	00 0c       	add	r0, r0
     d1c:	11 f4       	brne	.+4      	; 0xd22 <__fp_round+0xc>
     d1e:	88 23       	and	r24, r24
     d20:	52 f0       	brmi	.+20     	; 0xd36 <__fp_round+0x20>
     d22:	bb 0f       	add	r27, r27
     d24:	40 f4       	brcc	.+16     	; 0xd36 <__fp_round+0x20>
     d26:	bf 2b       	or	r27, r31
     d28:	11 f4       	brne	.+4      	; 0xd2e <__fp_round+0x18>
     d2a:	60 ff       	sbrs	r22, 0
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <__fp_round+0x20>
     d2e:	6f 5f       	subi	r22, 0xFF	; 255
     d30:	7f 4f       	sbci	r23, 0xFF	; 255
     d32:	8f 4f       	sbci	r24, 0xFF	; 255
     d34:	9f 4f       	sbci	r25, 0xFF	; 255
     d36:	08 95       	ret

00000d38 <__fp_split3>:
     d38:	57 fd       	sbrc	r21, 7
     d3a:	90 58       	subi	r25, 0x80	; 128
     d3c:	44 0f       	add	r20, r20
     d3e:	55 1f       	adc	r21, r21
     d40:	59 f0       	breq	.+22     	; 0xd58 <__fp_splitA+0x10>
     d42:	5f 3f       	cpi	r21, 0xFF	; 255
     d44:	71 f0       	breq	.+28     	; 0xd62 <__fp_splitA+0x1a>
     d46:	47 95       	ror	r20

00000d48 <__fp_splitA>:
     d48:	88 0f       	add	r24, r24
     d4a:	97 fb       	bst	r25, 7
     d4c:	99 1f       	adc	r25, r25
     d4e:	61 f0       	breq	.+24     	; 0xd68 <__fp_splitA+0x20>
     d50:	9f 3f       	cpi	r25, 0xFF	; 255
     d52:	79 f0       	breq	.+30     	; 0xd72 <__fp_splitA+0x2a>
     d54:	87 95       	ror	r24
     d56:	08 95       	ret
     d58:	12 16       	cp	r1, r18
     d5a:	13 06       	cpc	r1, r19
     d5c:	14 06       	cpc	r1, r20
     d5e:	55 1f       	adc	r21, r21
     d60:	f2 cf       	rjmp	.-28     	; 0xd46 <__fp_split3+0xe>
     d62:	46 95       	lsr	r20
     d64:	f1 df       	rcall	.-30     	; 0xd48 <__fp_splitA>
     d66:	08 c0       	rjmp	.+16     	; 0xd78 <__fp_splitA+0x30>
     d68:	16 16       	cp	r1, r22
     d6a:	17 06       	cpc	r1, r23
     d6c:	18 06       	cpc	r1, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	f1 cf       	rjmp	.-30     	; 0xd54 <__fp_splitA+0xc>
     d72:	86 95       	lsr	r24
     d74:	71 05       	cpc	r23, r1
     d76:	61 05       	cpc	r22, r1
     d78:	08 94       	sec
     d7a:	08 95       	ret

00000d7c <__fp_zero>:
     d7c:	e8 94       	clt

00000d7e <__fp_szero>:
     d7e:	bb 27       	eor	r27, r27
     d80:	66 27       	eor	r22, r22
     d82:	77 27       	eor	r23, r23
     d84:	cb 01       	movw	r24, r22
     d86:	97 f9       	bld	r25, 7
     d88:	08 95       	ret

00000d8a <__udivmodsi4>:
     d8a:	a1 e2       	ldi	r26, 0x21	; 33
     d8c:	1a 2e       	mov	r1, r26
     d8e:	aa 1b       	sub	r26, r26
     d90:	bb 1b       	sub	r27, r27
     d92:	fd 01       	movw	r30, r26
     d94:	0d c0       	rjmp	.+26     	; 0xdb0 <__udivmodsi4_ep>

00000d96 <__udivmodsi4_loop>:
     d96:	aa 1f       	adc	r26, r26
     d98:	bb 1f       	adc	r27, r27
     d9a:	ee 1f       	adc	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	a2 17       	cp	r26, r18
     da0:	b3 07       	cpc	r27, r19
     da2:	e4 07       	cpc	r30, r20
     da4:	f5 07       	cpc	r31, r21
     da6:	20 f0       	brcs	.+8      	; 0xdb0 <__udivmodsi4_ep>
     da8:	a2 1b       	sub	r26, r18
     daa:	b3 0b       	sbc	r27, r19
     dac:	e4 0b       	sbc	r30, r20
     dae:	f5 0b       	sbc	r31, r21

00000db0 <__udivmodsi4_ep>:
     db0:	66 1f       	adc	r22, r22
     db2:	77 1f       	adc	r23, r23
     db4:	88 1f       	adc	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	1a 94       	dec	r1
     dba:	69 f7       	brne	.-38     	; 0xd96 <__udivmodsi4_loop>
     dbc:	60 95       	com	r22
     dbe:	70 95       	com	r23
     dc0:	80 95       	com	r24
     dc2:	90 95       	com	r25
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	bd 01       	movw	r22, r26
     dca:	cf 01       	movw	r24, r30
     dcc:	08 95       	ret

00000dce <__tablejump2__>:
     dce:	ee 0f       	add	r30, r30
     dd0:	ff 1f       	adc	r31, r31
     dd2:	00 24       	eor	r0, r0
     dd4:	00 1c       	adc	r0, r0
     dd6:	0b be       	out	0x3b, r0	; 59
     dd8:	07 90       	elpm	r0, Z+
     dda:	f6 91       	elpm	r31, Z
     ddc:	e0 2d       	mov	r30, r0
     dde:	09 94       	ijmp

00000de0 <vsnprintf>:
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	2e 97       	sbiw	r28, 0x0e	; 14
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	8c 01       	movw	r16, r24
     dfa:	fa 01       	movw	r30, r20
     dfc:	86 e0       	ldi	r24, 0x06	; 6
     dfe:	8c 83       	std	Y+4, r24	; 0x04
     e00:	1a 83       	std	Y+2, r17	; 0x02
     e02:	09 83       	std	Y+1, r16	; 0x01
     e04:	77 ff       	sbrs	r23, 7
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <vsnprintf+0x2c>
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e8       	ldi	r23, 0x80	; 128
     e0c:	cb 01       	movw	r24, r22
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	a9 01       	movw	r20, r18
     e16:	bf 01       	movw	r22, r30
     e18:	ce 01       	movw	r24, r28
     e1a:	01 96       	adiw	r24, 0x01	; 1
     e1c:	19 d0       	rcall	.+50     	; 0xe50 <vfprintf>
     e1e:	4d 81       	ldd	r20, Y+5	; 0x05
     e20:	5e 81       	ldd	r21, Y+6	; 0x06
     e22:	57 fd       	sbrc	r21, 7
     e24:	0a c0       	rjmp	.+20     	; 0xe3a <vsnprintf+0x5a>
     e26:	2f 81       	ldd	r18, Y+7	; 0x07
     e28:	38 85       	ldd	r19, Y+8	; 0x08
     e2a:	42 17       	cp	r20, r18
     e2c:	53 07       	cpc	r21, r19
     e2e:	0c f4       	brge	.+2      	; 0xe32 <vsnprintf+0x52>
     e30:	9a 01       	movw	r18, r20
     e32:	f8 01       	movw	r30, r16
     e34:	e2 0f       	add	r30, r18
     e36:	f3 1f       	adc	r31, r19
     e38:	10 82       	st	Z, r1
     e3a:	2e 96       	adiw	r28, 0x0e	; 14
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	08 95       	ret

00000e50 <vfprintf>:
     e50:	2f 92       	push	r2
     e52:	3f 92       	push	r3
     e54:	4f 92       	push	r4
     e56:	5f 92       	push	r5
     e58:	6f 92       	push	r6
     e5a:	7f 92       	push	r7
     e5c:	8f 92       	push	r8
     e5e:	9f 92       	push	r9
     e60:	af 92       	push	r10
     e62:	bf 92       	push	r11
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	2b 97       	sbiw	r28, 0x0b	; 11
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	6c 01       	movw	r12, r24
     e86:	7b 01       	movw	r14, r22
     e88:	8a 01       	movw	r16, r20
     e8a:	fc 01       	movw	r30, r24
     e8c:	17 82       	std	Z+7, r1	; 0x07
     e8e:	16 82       	std	Z+6, r1	; 0x06
     e90:	83 81       	ldd	r24, Z+3	; 0x03
     e92:	81 ff       	sbrs	r24, 1
     e94:	bf c1       	rjmp	.+894    	; 0x1214 <__stack+0x115>
     e96:	ce 01       	movw	r24, r28
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	3c 01       	movw	r6, r24
     e9c:	f6 01       	movw	r30, r12
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	f7 01       	movw	r30, r14
     ea2:	93 fd       	sbrc	r25, 3
     ea4:	85 91       	lpm	r24, Z+
     ea6:	93 ff       	sbrs	r25, 3
     ea8:	81 91       	ld	r24, Z+
     eaa:	7f 01       	movw	r14, r30
     eac:	88 23       	and	r24, r24
     eae:	09 f4       	brne	.+2      	; 0xeb2 <vfprintf+0x62>
     eb0:	ad c1       	rjmp	.+858    	; 0x120c <__stack+0x10d>
     eb2:	85 32       	cpi	r24, 0x25	; 37
     eb4:	39 f4       	brne	.+14     	; 0xec4 <vfprintf+0x74>
     eb6:	93 fd       	sbrc	r25, 3
     eb8:	85 91       	lpm	r24, Z+
     eba:	93 ff       	sbrs	r25, 3
     ebc:	81 91       	ld	r24, Z+
     ebe:	7f 01       	movw	r14, r30
     ec0:	85 32       	cpi	r24, 0x25	; 37
     ec2:	21 f4       	brne	.+8      	; 0xecc <vfprintf+0x7c>
     ec4:	b6 01       	movw	r22, r12
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	d6 d1       	rcall	.+940    	; 0x1276 <fputc>
     eca:	e8 cf       	rjmp	.-48     	; 0xe9c <vfprintf+0x4c>
     ecc:	91 2c       	mov	r9, r1
     ece:	21 2c       	mov	r2, r1
     ed0:	31 2c       	mov	r3, r1
     ed2:	ff e1       	ldi	r31, 0x1F	; 31
     ed4:	f3 15       	cp	r31, r3
     ed6:	d8 f0       	brcs	.+54     	; 0xf0e <vfprintf+0xbe>
     ed8:	8b 32       	cpi	r24, 0x2B	; 43
     eda:	79 f0       	breq	.+30     	; 0xefa <vfprintf+0xaa>
     edc:	38 f4       	brcc	.+14     	; 0xeec <vfprintf+0x9c>
     ede:	80 32       	cpi	r24, 0x20	; 32
     ee0:	79 f0       	breq	.+30     	; 0xf00 <vfprintf+0xb0>
     ee2:	83 32       	cpi	r24, 0x23	; 35
     ee4:	a1 f4       	brne	.+40     	; 0xf0e <vfprintf+0xbe>
     ee6:	23 2d       	mov	r18, r3
     ee8:	20 61       	ori	r18, 0x10	; 16
     eea:	1d c0       	rjmp	.+58     	; 0xf26 <vfprintf+0xd6>
     eec:	8d 32       	cpi	r24, 0x2D	; 45
     eee:	61 f0       	breq	.+24     	; 0xf08 <vfprintf+0xb8>
     ef0:	80 33       	cpi	r24, 0x30	; 48
     ef2:	69 f4       	brne	.+26     	; 0xf0e <vfprintf+0xbe>
     ef4:	23 2d       	mov	r18, r3
     ef6:	21 60       	ori	r18, 0x01	; 1
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <vfprintf+0xd6>
     efa:	83 2d       	mov	r24, r3
     efc:	82 60       	ori	r24, 0x02	; 2
     efe:	38 2e       	mov	r3, r24
     f00:	e3 2d       	mov	r30, r3
     f02:	e4 60       	ori	r30, 0x04	; 4
     f04:	3e 2e       	mov	r3, r30
     f06:	2a c0       	rjmp	.+84     	; 0xf5c <vfprintf+0x10c>
     f08:	f3 2d       	mov	r31, r3
     f0a:	f8 60       	ori	r31, 0x08	; 8
     f0c:	1d c0       	rjmp	.+58     	; 0xf48 <vfprintf+0xf8>
     f0e:	37 fc       	sbrc	r3, 7
     f10:	2d c0       	rjmp	.+90     	; 0xf6c <vfprintf+0x11c>
     f12:	20 ed       	ldi	r18, 0xD0	; 208
     f14:	28 0f       	add	r18, r24
     f16:	2a 30       	cpi	r18, 0x0A	; 10
     f18:	40 f0       	brcs	.+16     	; 0xf2a <vfprintf+0xda>
     f1a:	8e 32       	cpi	r24, 0x2E	; 46
     f1c:	b9 f4       	brne	.+46     	; 0xf4c <vfprintf+0xfc>
     f1e:	36 fc       	sbrc	r3, 6
     f20:	75 c1       	rjmp	.+746    	; 0x120c <__stack+0x10d>
     f22:	23 2d       	mov	r18, r3
     f24:	20 64       	ori	r18, 0x40	; 64
     f26:	32 2e       	mov	r3, r18
     f28:	19 c0       	rjmp	.+50     	; 0xf5c <vfprintf+0x10c>
     f2a:	36 fe       	sbrs	r3, 6
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <vfprintf+0xea>
     f2e:	8a e0       	ldi	r24, 0x0A	; 10
     f30:	98 9e       	mul	r9, r24
     f32:	20 0d       	add	r18, r0
     f34:	11 24       	eor	r1, r1
     f36:	92 2e       	mov	r9, r18
     f38:	11 c0       	rjmp	.+34     	; 0xf5c <vfprintf+0x10c>
     f3a:	ea e0       	ldi	r30, 0x0A	; 10
     f3c:	2e 9e       	mul	r2, r30
     f3e:	20 0d       	add	r18, r0
     f40:	11 24       	eor	r1, r1
     f42:	22 2e       	mov	r2, r18
     f44:	f3 2d       	mov	r31, r3
     f46:	f0 62       	ori	r31, 0x20	; 32
     f48:	3f 2e       	mov	r3, r31
     f4a:	08 c0       	rjmp	.+16     	; 0xf5c <vfprintf+0x10c>
     f4c:	8c 36       	cpi	r24, 0x6C	; 108
     f4e:	21 f4       	brne	.+8      	; 0xf58 <vfprintf+0x108>
     f50:	83 2d       	mov	r24, r3
     f52:	80 68       	ori	r24, 0x80	; 128
     f54:	38 2e       	mov	r3, r24
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <vfprintf+0x10c>
     f58:	88 36       	cpi	r24, 0x68	; 104
     f5a:	41 f4       	brne	.+16     	; 0xf6c <vfprintf+0x11c>
     f5c:	f7 01       	movw	r30, r14
     f5e:	93 fd       	sbrc	r25, 3
     f60:	85 91       	lpm	r24, Z+
     f62:	93 ff       	sbrs	r25, 3
     f64:	81 91       	ld	r24, Z+
     f66:	7f 01       	movw	r14, r30
     f68:	81 11       	cpse	r24, r1
     f6a:	b3 cf       	rjmp	.-154    	; 0xed2 <vfprintf+0x82>
     f6c:	98 2f       	mov	r25, r24
     f6e:	9f 7d       	andi	r25, 0xDF	; 223
     f70:	95 54       	subi	r25, 0x45	; 69
     f72:	93 30       	cpi	r25, 0x03	; 3
     f74:	28 f4       	brcc	.+10     	; 0xf80 <vfprintf+0x130>
     f76:	0c 5f       	subi	r16, 0xFC	; 252
     f78:	1f 4f       	sbci	r17, 0xFF	; 255
     f7a:	9f e3       	ldi	r25, 0x3F	; 63
     f7c:	99 83       	std	Y+1, r25	; 0x01
     f7e:	0d c0       	rjmp	.+26     	; 0xf9a <vfprintf+0x14a>
     f80:	83 36       	cpi	r24, 0x63	; 99
     f82:	31 f0       	breq	.+12     	; 0xf90 <vfprintf+0x140>
     f84:	83 37       	cpi	r24, 0x73	; 115
     f86:	71 f0       	breq	.+28     	; 0xfa4 <vfprintf+0x154>
     f88:	83 35       	cpi	r24, 0x53	; 83
     f8a:	09 f0       	breq	.+2      	; 0xf8e <vfprintf+0x13e>
     f8c:	55 c0       	rjmp	.+170    	; 0x1038 <vfprintf+0x1e8>
     f8e:	20 c0       	rjmp	.+64     	; 0xfd0 <vfprintf+0x180>
     f90:	f8 01       	movw	r30, r16
     f92:	80 81       	ld	r24, Z
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	0e 5f       	subi	r16, 0xFE	; 254
     f98:	1f 4f       	sbci	r17, 0xFF	; 255
     f9a:	88 24       	eor	r8, r8
     f9c:	83 94       	inc	r8
     f9e:	91 2c       	mov	r9, r1
     fa0:	53 01       	movw	r10, r6
     fa2:	12 c0       	rjmp	.+36     	; 0xfc8 <vfprintf+0x178>
     fa4:	28 01       	movw	r4, r16
     fa6:	f2 e0       	ldi	r31, 0x02	; 2
     fa8:	4f 0e       	add	r4, r31
     faa:	51 1c       	adc	r5, r1
     fac:	f8 01       	movw	r30, r16
     fae:	a0 80       	ld	r10, Z
     fb0:	b1 80       	ldd	r11, Z+1	; 0x01
     fb2:	36 fe       	sbrs	r3, 6
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <vfprintf+0x16c>
     fb6:	69 2d       	mov	r22, r9
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <vfprintf+0x170>
     fbc:	6f ef       	ldi	r22, 0xFF	; 255
     fbe:	7f ef       	ldi	r23, 0xFF	; 255
     fc0:	c5 01       	movw	r24, r10
     fc2:	4e d1       	rcall	.+668    	; 0x1260 <strnlen>
     fc4:	4c 01       	movw	r8, r24
     fc6:	82 01       	movw	r16, r4
     fc8:	f3 2d       	mov	r31, r3
     fca:	ff 77       	andi	r31, 0x7F	; 127
     fcc:	3f 2e       	mov	r3, r31
     fce:	15 c0       	rjmp	.+42     	; 0xffa <vfprintf+0x1aa>
     fd0:	28 01       	movw	r4, r16
     fd2:	22 e0       	ldi	r18, 0x02	; 2
     fd4:	42 0e       	add	r4, r18
     fd6:	51 1c       	adc	r5, r1
     fd8:	f8 01       	movw	r30, r16
     fda:	a0 80       	ld	r10, Z
     fdc:	b1 80       	ldd	r11, Z+1	; 0x01
     fde:	36 fe       	sbrs	r3, 6
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <vfprintf+0x198>
     fe2:	69 2d       	mov	r22, r9
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <vfprintf+0x19c>
     fe8:	6f ef       	ldi	r22, 0xFF	; 255
     fea:	7f ef       	ldi	r23, 0xFF	; 255
     fec:	c5 01       	movw	r24, r10
     fee:	2d d1       	rcall	.+602    	; 0x124a <strnlen_P>
     ff0:	4c 01       	movw	r8, r24
     ff2:	f3 2d       	mov	r31, r3
     ff4:	f0 68       	ori	r31, 0x80	; 128
     ff6:	3f 2e       	mov	r3, r31
     ff8:	82 01       	movw	r16, r4
     ffa:	33 fc       	sbrc	r3, 3
     ffc:	19 c0       	rjmp	.+50     	; 0x1030 <vfprintf+0x1e0>
     ffe:	82 2d       	mov	r24, r2
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	88 16       	cp	r8, r24
    1004:	99 06       	cpc	r9, r25
    1006:	a0 f4       	brcc	.+40     	; 0x1030 <vfprintf+0x1e0>
    1008:	b6 01       	movw	r22, r12
    100a:	80 e2       	ldi	r24, 0x20	; 32
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	33 d1       	rcall	.+614    	; 0x1276 <fputc>
    1010:	2a 94       	dec	r2
    1012:	f5 cf       	rjmp	.-22     	; 0xffe <vfprintf+0x1ae>
    1014:	f5 01       	movw	r30, r10
    1016:	37 fc       	sbrc	r3, 7
    1018:	85 91       	lpm	r24, Z+
    101a:	37 fe       	sbrs	r3, 7
    101c:	81 91       	ld	r24, Z+
    101e:	5f 01       	movw	r10, r30
    1020:	b6 01       	movw	r22, r12
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	28 d1       	rcall	.+592    	; 0x1276 <fputc>
    1026:	21 10       	cpse	r2, r1
    1028:	2a 94       	dec	r2
    102a:	21 e0       	ldi	r18, 0x01	; 1
    102c:	82 1a       	sub	r8, r18
    102e:	91 08       	sbc	r9, r1
    1030:	81 14       	cp	r8, r1
    1032:	91 04       	cpc	r9, r1
    1034:	79 f7       	brne	.-34     	; 0x1014 <vfprintf+0x1c4>
    1036:	e1 c0       	rjmp	.+450    	; 0x11fa <__stack+0xfb>
    1038:	84 36       	cpi	r24, 0x64	; 100
    103a:	11 f0       	breq	.+4      	; 0x1040 <vfprintf+0x1f0>
    103c:	89 36       	cpi	r24, 0x69	; 105
    103e:	39 f5       	brne	.+78     	; 0x108e <vfprintf+0x23e>
    1040:	f8 01       	movw	r30, r16
    1042:	37 fe       	sbrs	r3, 7
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <vfprintf+0x204>
    1046:	60 81       	ld	r22, Z
    1048:	71 81       	ldd	r23, Z+1	; 0x01
    104a:	82 81       	ldd	r24, Z+2	; 0x02
    104c:	93 81       	ldd	r25, Z+3	; 0x03
    104e:	0c 5f       	subi	r16, 0xFC	; 252
    1050:	1f 4f       	sbci	r17, 0xFF	; 255
    1052:	08 c0       	rjmp	.+16     	; 0x1064 <vfprintf+0x214>
    1054:	60 81       	ld	r22, Z
    1056:	71 81       	ldd	r23, Z+1	; 0x01
    1058:	07 2e       	mov	r0, r23
    105a:	00 0c       	add	r0, r0
    105c:	88 0b       	sbc	r24, r24
    105e:	99 0b       	sbc	r25, r25
    1060:	0e 5f       	subi	r16, 0xFE	; 254
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	f3 2d       	mov	r31, r3
    1066:	ff 76       	andi	r31, 0x6F	; 111
    1068:	3f 2e       	mov	r3, r31
    106a:	97 ff       	sbrs	r25, 7
    106c:	09 c0       	rjmp	.+18     	; 0x1080 <vfprintf+0x230>
    106e:	90 95       	com	r25
    1070:	80 95       	com	r24
    1072:	70 95       	com	r23
    1074:	61 95       	neg	r22
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	8f 4f       	sbci	r24, 0xFF	; 255
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	f0 68       	ori	r31, 0x80	; 128
    107e:	3f 2e       	mov	r3, r31
    1080:	2a e0       	ldi	r18, 0x0A	; 10
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	a3 01       	movw	r20, r6
    1086:	33 d1       	rcall	.+614    	; 0x12ee <__ultoa_invert>
    1088:	88 2e       	mov	r8, r24
    108a:	86 18       	sub	r8, r6
    108c:	44 c0       	rjmp	.+136    	; 0x1116 <__stack+0x17>
    108e:	85 37       	cpi	r24, 0x75	; 117
    1090:	31 f4       	brne	.+12     	; 0x109e <vfprintf+0x24e>
    1092:	23 2d       	mov	r18, r3
    1094:	2f 7e       	andi	r18, 0xEF	; 239
    1096:	b2 2e       	mov	r11, r18
    1098:	2a e0       	ldi	r18, 0x0A	; 10
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	25 c0       	rjmp	.+74     	; 0x10e8 <vfprintf+0x298>
    109e:	93 2d       	mov	r25, r3
    10a0:	99 7f       	andi	r25, 0xF9	; 249
    10a2:	b9 2e       	mov	r11, r25
    10a4:	8f 36       	cpi	r24, 0x6F	; 111
    10a6:	c1 f0       	breq	.+48     	; 0x10d8 <vfprintf+0x288>
    10a8:	18 f4       	brcc	.+6      	; 0x10b0 <vfprintf+0x260>
    10aa:	88 35       	cpi	r24, 0x58	; 88
    10ac:	79 f0       	breq	.+30     	; 0x10cc <vfprintf+0x27c>
    10ae:	ae c0       	rjmp	.+348    	; 0x120c <__stack+0x10d>
    10b0:	80 37       	cpi	r24, 0x70	; 112
    10b2:	19 f0       	breq	.+6      	; 0x10ba <vfprintf+0x26a>
    10b4:	88 37       	cpi	r24, 0x78	; 120
    10b6:	21 f0       	breq	.+8      	; 0x10c0 <vfprintf+0x270>
    10b8:	a9 c0       	rjmp	.+338    	; 0x120c <__stack+0x10d>
    10ba:	e9 2f       	mov	r30, r25
    10bc:	e0 61       	ori	r30, 0x10	; 16
    10be:	be 2e       	mov	r11, r30
    10c0:	b4 fe       	sbrs	r11, 4
    10c2:	0d c0       	rjmp	.+26     	; 0x10de <vfprintf+0x28e>
    10c4:	fb 2d       	mov	r31, r11
    10c6:	f4 60       	ori	r31, 0x04	; 4
    10c8:	bf 2e       	mov	r11, r31
    10ca:	09 c0       	rjmp	.+18     	; 0x10de <vfprintf+0x28e>
    10cc:	34 fe       	sbrs	r3, 4
    10ce:	0a c0       	rjmp	.+20     	; 0x10e4 <vfprintf+0x294>
    10d0:	29 2f       	mov	r18, r25
    10d2:	26 60       	ori	r18, 0x06	; 6
    10d4:	b2 2e       	mov	r11, r18
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <vfprintf+0x294>
    10d8:	28 e0       	ldi	r18, 0x08	; 8
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	05 c0       	rjmp	.+10     	; 0x10e8 <vfprintf+0x298>
    10de:	20 e1       	ldi	r18, 0x10	; 16
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <vfprintf+0x298>
    10e4:	20 e1       	ldi	r18, 0x10	; 16
    10e6:	32 e0       	ldi	r19, 0x02	; 2
    10e8:	f8 01       	movw	r30, r16
    10ea:	b7 fe       	sbrs	r11, 7
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <vfprintf+0x2ac>
    10ee:	60 81       	ld	r22, Z
    10f0:	71 81       	ldd	r23, Z+1	; 0x01
    10f2:	82 81       	ldd	r24, Z+2	; 0x02
    10f4:	93 81       	ldd	r25, Z+3	; 0x03
    10f6:	0c 5f       	subi	r16, 0xFC	; 252
    10f8:	1f 4f       	sbci	r17, 0xFF	; 255
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <__stack+0x9>
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 5f       	subi	r16, 0xFE	; 254
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	a3 01       	movw	r20, r6
    110a:	f1 d0       	rcall	.+482    	; 0x12ee <__ultoa_invert>
    110c:	88 2e       	mov	r8, r24
    110e:	86 18       	sub	r8, r6
    1110:	fb 2d       	mov	r31, r11
    1112:	ff 77       	andi	r31, 0x7F	; 127
    1114:	3f 2e       	mov	r3, r31
    1116:	36 fe       	sbrs	r3, 6
    1118:	0d c0       	rjmp	.+26     	; 0x1134 <__stack+0x35>
    111a:	23 2d       	mov	r18, r3
    111c:	2e 7f       	andi	r18, 0xFE	; 254
    111e:	a2 2e       	mov	r10, r18
    1120:	89 14       	cp	r8, r9
    1122:	58 f4       	brcc	.+22     	; 0x113a <__stack+0x3b>
    1124:	34 fe       	sbrs	r3, 4
    1126:	0b c0       	rjmp	.+22     	; 0x113e <__stack+0x3f>
    1128:	32 fc       	sbrc	r3, 2
    112a:	09 c0       	rjmp	.+18     	; 0x113e <__stack+0x3f>
    112c:	83 2d       	mov	r24, r3
    112e:	8e 7e       	andi	r24, 0xEE	; 238
    1130:	a8 2e       	mov	r10, r24
    1132:	05 c0       	rjmp	.+10     	; 0x113e <__stack+0x3f>
    1134:	b8 2c       	mov	r11, r8
    1136:	a3 2c       	mov	r10, r3
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <__stack+0x41>
    113a:	b8 2c       	mov	r11, r8
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <__stack+0x41>
    113e:	b9 2c       	mov	r11, r9
    1140:	a4 fe       	sbrs	r10, 4
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <__stack+0x63>
    1144:	fe 01       	movw	r30, r28
    1146:	e8 0d       	add	r30, r8
    1148:	f1 1d       	adc	r31, r1
    114a:	80 81       	ld	r24, Z
    114c:	80 33       	cpi	r24, 0x30	; 48
    114e:	21 f4       	brne	.+8      	; 0x1158 <__stack+0x59>
    1150:	9a 2d       	mov	r25, r10
    1152:	99 7e       	andi	r25, 0xE9	; 233
    1154:	a9 2e       	mov	r10, r25
    1156:	09 c0       	rjmp	.+18     	; 0x116a <__stack+0x6b>
    1158:	a2 fe       	sbrs	r10, 2
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <__stack+0x69>
    115c:	b3 94       	inc	r11
    115e:	b3 94       	inc	r11
    1160:	04 c0       	rjmp	.+8      	; 0x116a <__stack+0x6b>
    1162:	8a 2d       	mov	r24, r10
    1164:	86 78       	andi	r24, 0x86	; 134
    1166:	09 f0       	breq	.+2      	; 0x116a <__stack+0x6b>
    1168:	b3 94       	inc	r11
    116a:	a3 fc       	sbrc	r10, 3
    116c:	10 c0       	rjmp	.+32     	; 0x118e <__stack+0x8f>
    116e:	a0 fe       	sbrs	r10, 0
    1170:	06 c0       	rjmp	.+12     	; 0x117e <__stack+0x7f>
    1172:	b2 14       	cp	r11, r2
    1174:	80 f4       	brcc	.+32     	; 0x1196 <__stack+0x97>
    1176:	28 0c       	add	r2, r8
    1178:	92 2c       	mov	r9, r2
    117a:	9b 18       	sub	r9, r11
    117c:	0d c0       	rjmp	.+26     	; 0x1198 <__stack+0x99>
    117e:	b2 14       	cp	r11, r2
    1180:	58 f4       	brcc	.+22     	; 0x1198 <__stack+0x99>
    1182:	b6 01       	movw	r22, r12
    1184:	80 e2       	ldi	r24, 0x20	; 32
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	76 d0       	rcall	.+236    	; 0x1276 <fputc>
    118a:	b3 94       	inc	r11
    118c:	f8 cf       	rjmp	.-16     	; 0x117e <__stack+0x7f>
    118e:	b2 14       	cp	r11, r2
    1190:	18 f4       	brcc	.+6      	; 0x1198 <__stack+0x99>
    1192:	2b 18       	sub	r2, r11
    1194:	02 c0       	rjmp	.+4      	; 0x119a <__stack+0x9b>
    1196:	98 2c       	mov	r9, r8
    1198:	21 2c       	mov	r2, r1
    119a:	a4 fe       	sbrs	r10, 4
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <__stack+0xbd>
    119e:	b6 01       	movw	r22, r12
    11a0:	80 e3       	ldi	r24, 0x30	; 48
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	68 d0       	rcall	.+208    	; 0x1276 <fputc>
    11a6:	a2 fe       	sbrs	r10, 2
    11a8:	16 c0       	rjmp	.+44     	; 0x11d6 <__stack+0xd7>
    11aa:	a1 fc       	sbrc	r10, 1
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <__stack+0xb5>
    11ae:	88 e7       	ldi	r24, 0x78	; 120
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <__stack+0xb9>
    11b4:	88 e5       	ldi	r24, 0x58	; 88
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	b6 01       	movw	r22, r12
    11ba:	0c c0       	rjmp	.+24     	; 0x11d4 <__stack+0xd5>
    11bc:	8a 2d       	mov	r24, r10
    11be:	86 78       	andi	r24, 0x86	; 134
    11c0:	51 f0       	breq	.+20     	; 0x11d6 <__stack+0xd7>
    11c2:	a1 fe       	sbrs	r10, 1
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <__stack+0xcb>
    11c6:	8b e2       	ldi	r24, 0x2B	; 43
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <__stack+0xcd>
    11ca:	80 e2       	ldi	r24, 0x20	; 32
    11cc:	a7 fc       	sbrc	r10, 7
    11ce:	8d e2       	ldi	r24, 0x2D	; 45
    11d0:	b6 01       	movw	r22, r12
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	50 d0       	rcall	.+160    	; 0x1276 <fputc>
    11d6:	89 14       	cp	r8, r9
    11d8:	30 f4       	brcc	.+12     	; 0x11e6 <__stack+0xe7>
    11da:	b6 01       	movw	r22, r12
    11dc:	80 e3       	ldi	r24, 0x30	; 48
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	4a d0       	rcall	.+148    	; 0x1276 <fputc>
    11e2:	9a 94       	dec	r9
    11e4:	f8 cf       	rjmp	.-16     	; 0x11d6 <__stack+0xd7>
    11e6:	8a 94       	dec	r8
    11e8:	f3 01       	movw	r30, r6
    11ea:	e8 0d       	add	r30, r8
    11ec:	f1 1d       	adc	r31, r1
    11ee:	80 81       	ld	r24, Z
    11f0:	b6 01       	movw	r22, r12
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	40 d0       	rcall	.+128    	; 0x1276 <fputc>
    11f6:	81 10       	cpse	r8, r1
    11f8:	f6 cf       	rjmp	.-20     	; 0x11e6 <__stack+0xe7>
    11fa:	22 20       	and	r2, r2
    11fc:	09 f4       	brne	.+2      	; 0x1200 <__stack+0x101>
    11fe:	4e ce       	rjmp	.-868    	; 0xe9c <vfprintf+0x4c>
    1200:	b6 01       	movw	r22, r12
    1202:	80 e2       	ldi	r24, 0x20	; 32
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	37 d0       	rcall	.+110    	; 0x1276 <fputc>
    1208:	2a 94       	dec	r2
    120a:	f7 cf       	rjmp	.-18     	; 0x11fa <__stack+0xfb>
    120c:	f6 01       	movw	r30, r12
    120e:	86 81       	ldd	r24, Z+6	; 0x06
    1210:	97 81       	ldd	r25, Z+7	; 0x07
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <__stack+0x119>
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	2b 96       	adiw	r28, 0x0b	; 11
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	df 90       	pop	r13
    1232:	cf 90       	pop	r12
    1234:	bf 90       	pop	r11
    1236:	af 90       	pop	r10
    1238:	9f 90       	pop	r9
    123a:	8f 90       	pop	r8
    123c:	7f 90       	pop	r7
    123e:	6f 90       	pop	r6
    1240:	5f 90       	pop	r5
    1242:	4f 90       	pop	r4
    1244:	3f 90       	pop	r3
    1246:	2f 90       	pop	r2
    1248:	08 95       	ret

0000124a <strnlen_P>:
    124a:	fc 01       	movw	r30, r24
    124c:	05 90       	lpm	r0, Z+
    124e:	61 50       	subi	r22, 0x01	; 1
    1250:	70 40       	sbci	r23, 0x00	; 0
    1252:	01 10       	cpse	r0, r1
    1254:	d8 f7       	brcc	.-10     	; 0x124c <strnlen_P+0x2>
    1256:	80 95       	com	r24
    1258:	90 95       	com	r25
    125a:	8e 0f       	add	r24, r30
    125c:	9f 1f       	adc	r25, r31
    125e:	08 95       	ret

00001260 <strnlen>:
    1260:	fc 01       	movw	r30, r24
    1262:	61 50       	subi	r22, 0x01	; 1
    1264:	70 40       	sbci	r23, 0x00	; 0
    1266:	01 90       	ld	r0, Z+
    1268:	01 10       	cpse	r0, r1
    126a:	d8 f7       	brcc	.-10     	; 0x1262 <strnlen+0x2>
    126c:	80 95       	com	r24
    126e:	90 95       	com	r25
    1270:	8e 0f       	add	r24, r30
    1272:	9f 1f       	adc	r25, r31
    1274:	08 95       	ret

00001276 <fputc>:
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	fb 01       	movw	r30, r22
    1280:	23 81       	ldd	r18, Z+3	; 0x03
    1282:	21 fd       	sbrc	r18, 1
    1284:	03 c0       	rjmp	.+6      	; 0x128c <fputc+0x16>
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	9f ef       	ldi	r25, 0xFF	; 255
    128a:	2c c0       	rjmp	.+88     	; 0x12e4 <fputc+0x6e>
    128c:	22 ff       	sbrs	r18, 2
    128e:	16 c0       	rjmp	.+44     	; 0x12bc <fputc+0x46>
    1290:	46 81       	ldd	r20, Z+6	; 0x06
    1292:	57 81       	ldd	r21, Z+7	; 0x07
    1294:	24 81       	ldd	r18, Z+4	; 0x04
    1296:	35 81       	ldd	r19, Z+5	; 0x05
    1298:	42 17       	cp	r20, r18
    129a:	53 07       	cpc	r21, r19
    129c:	44 f4       	brge	.+16     	; 0x12ae <fputc+0x38>
    129e:	a0 81       	ld	r26, Z
    12a0:	b1 81       	ldd	r27, Z+1	; 0x01
    12a2:	9d 01       	movw	r18, r26
    12a4:	2f 5f       	subi	r18, 0xFF	; 255
    12a6:	3f 4f       	sbci	r19, 0xFF	; 255
    12a8:	31 83       	std	Z+1, r19	; 0x01
    12aa:	20 83       	st	Z, r18
    12ac:	8c 93       	st	X, r24
    12ae:	26 81       	ldd	r18, Z+6	; 0x06
    12b0:	37 81       	ldd	r19, Z+7	; 0x07
    12b2:	2f 5f       	subi	r18, 0xFF	; 255
    12b4:	3f 4f       	sbci	r19, 0xFF	; 255
    12b6:	37 83       	std	Z+7, r19	; 0x07
    12b8:	26 83       	std	Z+6, r18	; 0x06
    12ba:	14 c0       	rjmp	.+40     	; 0x12e4 <fputc+0x6e>
    12bc:	8b 01       	movw	r16, r22
    12be:	ec 01       	movw	r28, r24
    12c0:	fb 01       	movw	r30, r22
    12c2:	00 84       	ldd	r0, Z+8	; 0x08
    12c4:	f1 85       	ldd	r31, Z+9	; 0x09
    12c6:	e0 2d       	mov	r30, r0
    12c8:	09 95       	icall
    12ca:	89 2b       	or	r24, r25
    12cc:	e1 f6       	brne	.-72     	; 0x1286 <fputc+0x10>
    12ce:	d8 01       	movw	r26, r16
    12d0:	16 96       	adiw	r26, 0x06	; 6
    12d2:	8d 91       	ld	r24, X+
    12d4:	9c 91       	ld	r25, X
    12d6:	17 97       	sbiw	r26, 0x07	; 7
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	17 96       	adiw	r26, 0x07	; 7
    12dc:	9c 93       	st	X, r25
    12de:	8e 93       	st	-X, r24
    12e0:	16 97       	sbiw	r26, 0x06	; 6
    12e2:	ce 01       	movw	r24, r28
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	08 95       	ret

000012ee <__ultoa_invert>:
    12ee:	fa 01       	movw	r30, r20
    12f0:	aa 27       	eor	r26, r26
    12f2:	28 30       	cpi	r18, 0x08	; 8
    12f4:	51 f1       	breq	.+84     	; 0x134a <__ultoa_invert+0x5c>
    12f6:	20 31       	cpi	r18, 0x10	; 16
    12f8:	81 f1       	breq	.+96     	; 0x135a <__ultoa_invert+0x6c>
    12fa:	e8 94       	clt
    12fc:	6f 93       	push	r22
    12fe:	6e 7f       	andi	r22, 0xFE	; 254
    1300:	6e 5f       	subi	r22, 0xFE	; 254
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	8f 4f       	sbci	r24, 0xFF	; 255
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	af 4f       	sbci	r26, 0xFF	; 255
    130a:	b1 e0       	ldi	r27, 0x01	; 1
    130c:	3e d0       	rcall	.+124    	; 0x138a <__ultoa_invert+0x9c>
    130e:	b4 e0       	ldi	r27, 0x04	; 4
    1310:	3c d0       	rcall	.+120    	; 0x138a <__ultoa_invert+0x9c>
    1312:	67 0f       	add	r22, r23
    1314:	78 1f       	adc	r23, r24
    1316:	89 1f       	adc	r24, r25
    1318:	9a 1f       	adc	r25, r26
    131a:	a1 1d       	adc	r26, r1
    131c:	68 0f       	add	r22, r24
    131e:	79 1f       	adc	r23, r25
    1320:	8a 1f       	adc	r24, r26
    1322:	91 1d       	adc	r25, r1
    1324:	a1 1d       	adc	r26, r1
    1326:	6a 0f       	add	r22, r26
    1328:	71 1d       	adc	r23, r1
    132a:	81 1d       	adc	r24, r1
    132c:	91 1d       	adc	r25, r1
    132e:	a1 1d       	adc	r26, r1
    1330:	20 d0       	rcall	.+64     	; 0x1372 <__ultoa_invert+0x84>
    1332:	09 f4       	brne	.+2      	; 0x1336 <__ultoa_invert+0x48>
    1334:	68 94       	set
    1336:	3f 91       	pop	r19
    1338:	2a e0       	ldi	r18, 0x0A	; 10
    133a:	26 9f       	mul	r18, r22
    133c:	11 24       	eor	r1, r1
    133e:	30 19       	sub	r19, r0
    1340:	30 5d       	subi	r19, 0xD0	; 208
    1342:	31 93       	st	Z+, r19
    1344:	de f6       	brtc	.-74     	; 0x12fc <__ultoa_invert+0xe>
    1346:	cf 01       	movw	r24, r30
    1348:	08 95       	ret
    134a:	46 2f       	mov	r20, r22
    134c:	47 70       	andi	r20, 0x07	; 7
    134e:	40 5d       	subi	r20, 0xD0	; 208
    1350:	41 93       	st	Z+, r20
    1352:	b3 e0       	ldi	r27, 0x03	; 3
    1354:	0f d0       	rcall	.+30     	; 0x1374 <__ultoa_invert+0x86>
    1356:	c9 f7       	brne	.-14     	; 0x134a <__ultoa_invert+0x5c>
    1358:	f6 cf       	rjmp	.-20     	; 0x1346 <__ultoa_invert+0x58>
    135a:	46 2f       	mov	r20, r22
    135c:	4f 70       	andi	r20, 0x0F	; 15
    135e:	40 5d       	subi	r20, 0xD0	; 208
    1360:	4a 33       	cpi	r20, 0x3A	; 58
    1362:	18 f0       	brcs	.+6      	; 0x136a <__ultoa_invert+0x7c>
    1364:	49 5d       	subi	r20, 0xD9	; 217
    1366:	31 fd       	sbrc	r19, 1
    1368:	40 52       	subi	r20, 0x20	; 32
    136a:	41 93       	st	Z+, r20
    136c:	02 d0       	rcall	.+4      	; 0x1372 <__ultoa_invert+0x84>
    136e:	a9 f7       	brne	.-22     	; 0x135a <__ultoa_invert+0x6c>
    1370:	ea cf       	rjmp	.-44     	; 0x1346 <__ultoa_invert+0x58>
    1372:	b4 e0       	ldi	r27, 0x04	; 4
    1374:	a6 95       	lsr	r26
    1376:	97 95       	ror	r25
    1378:	87 95       	ror	r24
    137a:	77 95       	ror	r23
    137c:	67 95       	ror	r22
    137e:	ba 95       	dec	r27
    1380:	c9 f7       	brne	.-14     	; 0x1374 <__ultoa_invert+0x86>
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	61 05       	cpc	r22, r1
    1386:	71 05       	cpc	r23, r1
    1388:	08 95       	ret
    138a:	9b 01       	movw	r18, r22
    138c:	ac 01       	movw	r20, r24
    138e:	0a 2e       	mov	r0, r26
    1390:	06 94       	lsr	r0
    1392:	57 95       	ror	r21
    1394:	47 95       	ror	r20
    1396:	37 95       	ror	r19
    1398:	27 95       	ror	r18
    139a:	ba 95       	dec	r27
    139c:	c9 f7       	brne	.-14     	; 0x1390 <__ultoa_invert+0xa2>
    139e:	62 0f       	add	r22, r18
    13a0:	73 1f       	adc	r23, r19
    13a2:	84 1f       	adc	r24, r20
    13a4:	95 1f       	adc	r25, r21
    13a6:	a0 1d       	adc	r26, r0
    13a8:	08 95       	ret

000013aa <_exit>:
    13aa:	f8 94       	cli

000013ac <__stop_program>:
    13ac:	ff cf       	rjmp	.-2      	; 0x13ac <__stop_program>
