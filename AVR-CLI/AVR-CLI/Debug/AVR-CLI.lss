
AVR-CLI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00001274  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  00800138  00800138  00001340  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d3c  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001035  00000000  00000000  000032fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001195  00000000  00000000  00004331  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  000054c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008be  00000000  00000000  0000591c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001794  00000000  00000000  000061da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000796e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
       2:	00 00       	nop
       4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
       6:	00 00       	nop
       8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
       a:	00 00       	nop
       c:	6b c0       	rjmp	.+214    	; 0xe4 <__bad_interrupt>
       e:	00 00       	nop
      10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
      12:	00 00       	nop
      14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
      16:	00 00       	nop
      18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
      22:	00 00       	nop
      24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
      26:	00 00       	nop
      28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
      32:	00 00       	nop
      34:	57 c0       	rjmp	.+174    	; 0xe4 <__bad_interrupt>
      36:	00 00       	nop
      38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
      42:	00 00       	nop
      44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
      46:	00 00       	nop
      48:	70 c0       	rjmp	.+224    	; 0x12a <__vector_18>
      4a:	00 00       	nop
      4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
      52:	00 00       	nop
      54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
      56:	00 00       	nop
      58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
      62:	00 00       	nop
      64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
      66:	00 00       	nop
      68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
      72:	00 00       	nop
      74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
      76:	00 00       	nop
      78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
      82:	00 00       	nop
      84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
      86:	00 00       	nop
      88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	62 01       	movw	r12, r4
      8e:	85 01       	movw	r16, r10
      90:	a8 01       	movw	r20, r16
      92:	cb 01       	movw	r24, r22
      94:	ee 01       	movw	r28, r28
      96:	11 02       	muls	r17, r17
      98:	37 02       	muls	r19, r23
      9a:	65 02       	muls	r22, r21
      9c:	70 02       	muls	r23, r16
      9e:	7b 02       	muls	r23, r27
      a0:	86 02       	muls	r24, r22
      a2:	91 02       	muls	r25, r17
      a4:	9c 02       	muls	r25, r28
      a6:	a9 02       	muls	r26, r25

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d0 e1       	ldi	r29, 0x10	; 16
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	e4 e7       	ldi	r30, 0x74	; 116
      bc:	f2 e1       	ldi	r31, 0x12	; 18
      be:	00 e0       	ldi	r16, 0x00	; 0
      c0:	0b bf       	out	0x3b, r16	; 59
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
      c4:	07 90       	elpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a8 33       	cpi	r26, 0x38	; 56
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
      ce:	23 e0       	ldi	r18, 0x03	; 3
      d0:	a8 e3       	ldi	r26, 0x38	; 56
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	ad 35       	cpi	r26, 0x5D	; 93
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	4d d4       	rcall	.+2202   	; 0x97a <main>
      e0:	0c 94 38 09 	jmp	0x1270	; 0x1270 <_exit>

000000e4 <__bad_interrupt>:
      e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <apInit>:
﻿#include "ap.h"

void apInit(void)
{
	uartOpen(_DEF_UART0, 115200);
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	52 ec       	ldi	r21, 0xC2	; 194
      ea:	61 e0       	ldi	r22, 0x01	; 1
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	66 c0       	rjmp	.+204    	; 0x1be <uartOpen>
      f2:	08 95       	ret

000000f4 <apMain>:
		
		gpioPinToggle(_DEF_GPIO0);
		_delay_ms(500);
		
		
		uartPrintf(_DEF_UART0, "uart0 : %s\n", str);
      f4:	0d e1       	ldi	r16, 0x1D	; 29
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	cb e2       	ldi	r28, 0x2B	; 43
      fa:	d1 e0       	ldi	r29, 0x01	; 1
	char *str = "Hello, World!";

	while(true)
	{
		
		gpioPinToggle(_DEF_GPIO0);
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	55 d0       	rcall	.+170    	; 0x1aa <gpioPinToggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     100:	2f ef       	ldi	r18, 0xFF	; 255
     102:	89 e6       	ldi	r24, 0x69	; 105
     104:	98 e1       	ldi	r25, 0x18	; 24
     106:	21 50       	subi	r18, 0x01	; 1
     108:	80 40       	sbci	r24, 0x00	; 0
     10a:	90 40       	sbci	r25, 0x00	; 0
     10c:	e1 f7       	brne	.-8      	; 0x106 <apMain+0x12>
     10e:	00 c0       	rjmp	.+0      	; 0x110 <apMain+0x1c>
     110:	00 00       	nop
		_delay_ms(500);
		
		
		uartPrintf(_DEF_UART0, "uart0 : %s\n", str);
     112:	1f 93       	push	r17
     114:	0f 93       	push	r16
     116:	df 93       	push	r29
     118:	cf 93       	push	r28
     11a:	1f 92       	push	r1
     11c:	98 d0       	rcall	.+304    	; 0x24e <uartPrintf>
     11e:	0f 90       	pop	r0
     120:	0f 90       	pop	r0
     122:	0f 90       	pop	r0
     124:	0f 90       	pop	r0
     126:	0f 90       	pop	r0
     128:	e9 cf       	rjmp	.-46     	; 0xfc <apMain+0x8>

0000012a <__vector_18>:
﻿#include "main.h"
#include "atmega128_it.h"


ISR(USART0_RX_vect)
{
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	11 24       	eor	r1, r1
	
     134:	0f 90       	pop	r0
     136:	0f be       	out	0x3f, r0	; 63
     138:	0f 90       	pop	r0
     13a:	1f 90       	pop	r1
     13c:	18 95       	reti

0000013e <bspInit>:
﻿#include "bsp.h"


void bspInit(void)
{
     13e:	08 95       	ret

00000140 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
     140:	fc 01       	movw	r30, r24
	bool ret = true;

	p_node->in    = 0;
     142:	10 82       	st	Z, r1
     144:	11 82       	std	Z+1, r1	; 0x01
     146:	12 82       	std	Z+2, r1	; 0x02
     148:	13 82       	std	Z+3, r1	; 0x03
	p_node->out   = 0;
     14a:	14 82       	std	Z+4, r1	; 0x04
     14c:	15 82       	std	Z+5, r1	; 0x05
     14e:	16 82       	std	Z+6, r1	; 0x06
     150:	17 82       	std	Z+7, r1	; 0x07
	p_node->len   = length;
     152:	20 87       	std	Z+8, r18	; 0x08
     154:	31 87       	std	Z+9, r19	; 0x09
     156:	42 87       	std	Z+10, r20	; 0x0a
     158:	53 87       	std	Z+11, r21	; 0x0b
	p_node->p_buf = p_buf;
     15a:	75 87       	std	Z+13, r23	; 0x0d
     15c:	64 87       	std	Z+12, r22	; 0x0c

	return ret;
}
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	08 95       	ret

00000162 <gpioPinMode>:
	if (GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
	{
		ret = true;	
	}
	return ret;
}
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	00 d0       	rcall	.+0      	; 0x168 <gpioPinMode+0x6>
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	1a 82       	std	Y+2, r1	; 0x02
     16e:	19 82       	std	Y+1, r1	; 0x01
     170:	81 11       	cpse	r24, r1
     172:	0f c0       	rjmp	.+30     	; 0x192 <gpioPinMode+0x30>
     174:	61 30       	cpi	r22, 0x01	; 1
     176:	11 f4       	brne	.+4      	; 0x17c <gpioPinMode+0x1a>
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	8a 83       	std	Y+2, r24	; 0x02
     17c:	e0 e0       	ldi	r30, 0x00	; 0
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	81 81       	ldd	r24, Z+1	; 0x01
     182:	89 83       	std	Y+1, r24	; 0x01
     184:	be 01       	movw	r22, r28
     186:	6f 5f       	subi	r22, 0xFF	; 255
     188:	7f 4f       	sbci	r23, 0xFF	; 255
     18a:	80 81       	ld	r24, Z
     18c:	92 d0       	rcall	.+292    	; 0x2b2 <GPIO_Init>
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	01 c0       	rjmp	.+2      	; 0x194 <gpioPinMode+0x32>
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	0f 90       	pop	r0
     196:	0f 90       	pop	r0
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret

0000019e <gpioInit>:
     19e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	de df       	rcall	.-68     	; 0x162 <gpioPinMode>
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	08 95       	ret

000001aa <gpioPinToggle>:

void gpioPinToggle(uint8_t ch)
{
	if (ch < 0 || ch >= GPIO_MAX_CH) return;
     1aa:	81 11       	cpse	r24, r1
     1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <gpioPinToggle+0xe>
	GPIO_TogglePin(gpio_tbl[ch].port, gpio_tbl[ch].pin);
     1ae:	e0 e0       	ldi	r30, 0x00	; 0
     1b0:	f1 e0       	ldi	r31, 0x01	; 1
     1b2:	61 81       	ldd	r22, Z+1	; 0x01
     1b4:	80 81       	ld	r24, Z
     1b6:	80 c1       	rjmp	.+768    	; 0x4b8 <GPIO_TogglePin>
     1b8:	08 95       	ret

000001ba <uartInit>:
		qbufferRead(&qbuffer[ch], &ret, 1);
		break;
	}

	return ret;
}
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	08 95       	ret

000001be <uartOpen>:
     1be:	81 11       	cpse	r24, r1
     1c0:	1e c0       	rjmp	.+60     	; 0x1fe <uartOpen+0x40>
     1c2:	e6 e4       	ldi	r30, 0x46	; 70
     1c4:	f3 e0       	ldi	r31, 0x03	; 3
     1c6:	10 82       	st	Z, r1
     1c8:	41 83       	std	Z+1, r20	; 0x01
     1ca:	52 83       	std	Z+2, r21	; 0x02
     1cc:	63 83       	std	Z+3, r22	; 0x03
     1ce:	74 83       	std	Z+4, r23	; 0x04
     1d0:	16 82       	std	Z+6, r1	; 0x06
     1d2:	17 82       	std	Z+7, r1	; 0x07
     1d4:	15 82       	std	Z+5, r1	; 0x05
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	80 87       	std	Z+8, r24	; 0x08
     1da:	11 86       	std	Z+9, r1	; 0x09
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	32 e0       	ldi	r19, 0x02	; 2
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	68 e3       	ldi	r22, 0x38	; 56
     1e6:	71 e0       	ldi	r23, 0x01	; 1
     1e8:	88 e3       	ldi	r24, 0x38	; 56
     1ea:	93 e0       	ldi	r25, 0x03	; 3
     1ec:	a9 df       	rcall	.-174    	; 0x140 <qbufferCreate>
     1ee:	86 e4       	ldi	r24, 0x46	; 70
     1f0:	93 e0       	ldi	r25, 0x03	; 3
     1f2:	bc d1       	rcall	.+888    	; 0x56c <UART_Init>
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	88 23       	and	r24, r24
     1f8:	19 f0       	breq	.+6      	; 0x200 <uartOpen+0x42>
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <uartOpen+0x42>
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	89 2f       	mov	r24, r25
     202:	08 95       	ret

00000204 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	69 01       	movw	r12, r18
     212:	7a 01       	movw	r14, r20
	uint32_t ret = 0;
	StatusTypeDef status;
	switch(ch)
     214:	81 11       	cpse	r24, r1
     216:	0b c0       	rjmp	.+22     	; 0x22e <uartWrite+0x2a>
	{
		case _DEF_UART0:
		status = UART_Transmit(&huart1, p_data, length, 100);
     218:	04 e6       	ldi	r16, 0x64	; 100
     21a:	10 e0       	ldi	r17, 0x00	; 0
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	a6 01       	movw	r20, r12
     222:	86 e4       	ldi	r24, 0x46	; 70
     224:	93 e0       	ldi	r25, 0x03	; 3
     226:	3e d3       	rcall	.+1660   	; 0x8a4 <UART_Transmit>
		if (status == OK)
     228:	88 23       	and	r24, r24
     22a:	41 f0       	breq	.+16     	; 0x23c <uartWrite+0x38>
     22c:	04 c0       	rjmp	.+8      	; 0x236 <uartWrite+0x32>
	return ret;
}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
	uint32_t ret = 0;
     22e:	c1 2c       	mov	r12, r1
     230:	d1 2c       	mov	r13, r1
     232:	76 01       	movw	r14, r12
     234:	03 c0       	rjmp	.+6      	; 0x23c <uartWrite+0x38>
     236:	c1 2c       	mov	r12, r1
     238:	d1 2c       	mov	r13, r1
     23a:	76 01       	movw	r14, r12
			ret = length;
		}
		break;
	}
	return ret;
}
     23c:	c7 01       	movw	r24, r14
     23e:	b6 01       	movw	r22, r12
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	ff 90       	pop	r15
     246:	ef 90       	pop	r14
     248:	df 90       	pop	r13
     24a:	cf 90       	pop	r12
     24c:	08 95       	ret

0000024e <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	cd b7       	in	r28, 0x3d	; 61
     254:	de b7       	in	r29, 0x3e	; 62
     256:	da 95       	dec	r29
     258:	0f b6       	in	r0, 0x3f	; 63
     25a:	f8 94       	cli
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	0f be       	out	0x3f, r0	; 63
     260:	cd bf       	out	0x3d, r28	; 61
	va_list args;
	int len;
	uint32_t ret;

	va_start(args, fmt);
	len = vsnprintf(buf, 256, fmt, args);
     262:	9e 01       	movw	r18, r28
     264:	28 5f       	subi	r18, 0xF8	; 248
     266:	3e 4f       	sbci	r19, 0xFE	; 254
     268:	ca 5f       	subi	r28, 0xFA	; 250
     26a:	de 4f       	sbci	r29, 0xFE	; 254
     26c:	48 81       	ld	r20, Y
     26e:	59 81       	ldd	r21, Y+1	; 0x01
     270:	c6 50       	subi	r28, 0x06	; 6
     272:	d1 40       	sbci	r29, 0x01	; 1
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	71 e0       	ldi	r23, 0x01	; 1
     278:	ce 01       	movw	r24, r28
     27a:	01 96       	adiw	r24, 0x01	; 1
     27c:	14 d5       	rcall	.+2600   	; 0xca6 <vsnprintf>

	ret = uartWrite(ch, (uint8_t *)buf, len);
     27e:	9c 01       	movw	r18, r24
     280:	99 0f       	add	r25, r25
     282:	44 0b       	sbc	r20, r20
     284:	55 0b       	sbc	r21, r21
     286:	be 01       	movw	r22, r28
     288:	6f 5f       	subi	r22, 0xFF	; 255
     28a:	7f 4f       	sbci	r23, 0xFF	; 255
     28c:	cb 5f       	subi	r28, 0xFB	; 251
     28e:	de 4f       	sbci	r29, 0xFE	; 254
     290:	88 81       	ld	r24, Y
     292:	c5 50       	subi	r28, 0x05	; 5
     294:	d1 40       	sbci	r29, 0x01	; 1
     296:	b6 df       	rcall	.-148    	; 0x204 <uartWrite>

	va_end(args);
	return ret;
}
     298:	d3 95       	inc	r29
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <hwInit>:
﻿#include "hw.h"

void hwInit(void)
{
	bspInit();
     2aa:	49 df       	rcall	.-366    	; 0x13e <bspInit>
	gpioInit();
     2ac:	78 df       	rcall	.-272    	; 0x19e <gpioInit>
	uartInit();
     2ae:	85 cf       	rjmp	.-246    	; 0x1ba <uartInit>
     2b0:	08 95       	ret

000002b2 <GPIO_Init>:
     2b2:	90 e0       	ldi	r25, 0x00	; 0
			{
				CLRB(PORTG, pin);
			}
			else if(pinState == PIN_SET)
			{
				SETB(PORTG, pin);
     2b4:	87 30       	cpi	r24, 0x07	; 7
     2b6:	91 05       	cpc	r25, r1
     2b8:	08 f0       	brcs	.+2      	; 0x2bc <GPIO_Init+0xa>
     2ba:	fd c0       	rjmp	.+506    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     2bc:	fc 01       	movw	r30, r24
     2be:	ea 5b       	subi	r30, 0xBA	; 186
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	e8 c4       	rjmp	.+2512   	; 0xc94 <__tablejump2__>
     2c4:	db 01       	movw	r26, r22
     2c6:	11 96       	adiw	r26, 0x01	; 1
     2c8:	8c 91       	ld	r24, X
     2ca:	11 97       	sbiw	r26, 0x01	; 1
     2cc:	81 11       	cpse	r24, r1
     2ce:	0d c0       	rjmp	.+26     	; 0x2ea <GPIO_Init+0x38>
     2d0:	2a b3       	in	r18, 0x1a	; 26
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0c 90       	ld	r0, X
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <GPIO_Init+0x2c>
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	0a 94       	dec	r0
     2e0:	e2 f7       	brpl	.-8      	; 0x2da <GPIO_Init+0x28>
     2e2:	80 95       	com	r24
     2e4:	82 23       	and	r24, r18
     2e6:	8a bb       	out	0x1a, r24	; 26
     2e8:	08 95       	ret
     2ea:	81 30       	cpi	r24, 0x01	; 1
     2ec:	09 f0       	breq	.+2      	; 0x2f0 <GPIO_Init+0x3e>
     2ee:	e3 c0       	rjmp	.+454    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     2f0:	2a b3       	in	r18, 0x1a	; 26
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	fb 01       	movw	r30, r22
     2f8:	00 80       	ld	r0, Z
     2fa:	02 c0       	rjmp	.+4      	; 0x300 <GPIO_Init+0x4e>
     2fc:	88 0f       	add	r24, r24
     2fe:	99 1f       	adc	r25, r25
     300:	0a 94       	dec	r0
     302:	e2 f7       	brpl	.-8      	; 0x2fc <GPIO_Init+0x4a>
     304:	82 2b       	or	r24, r18
     306:	8a bb       	out	0x1a, r24	; 26
     308:	08 95       	ret
     30a:	db 01       	movw	r26, r22
     30c:	11 96       	adiw	r26, 0x01	; 1
     30e:	8c 91       	ld	r24, X
     310:	11 97       	sbiw	r26, 0x01	; 1
     312:	81 11       	cpse	r24, r1
     314:	0d c0       	rjmp	.+26     	; 0x330 <GPIO_Init+0x7e>
     316:	27 b3       	in	r18, 0x17	; 23
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0c 90       	ld	r0, X
     31e:	02 c0       	rjmp	.+4      	; 0x324 <GPIO_Init+0x72>
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	0a 94       	dec	r0
     326:	e2 f7       	brpl	.-8      	; 0x320 <GPIO_Init+0x6e>
     328:	80 95       	com	r24
     32a:	82 23       	and	r24, r18
     32c:	87 bb       	out	0x17, r24	; 23
     32e:	08 95       	ret
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	09 f0       	breq	.+2      	; 0x336 <GPIO_Init+0x84>
     334:	c0 c0       	rjmp	.+384    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     336:	27 b3       	in	r18, 0x17	; 23
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	fb 01       	movw	r30, r22
     33e:	00 80       	ld	r0, Z
     340:	02 c0       	rjmp	.+4      	; 0x346 <GPIO_Init+0x94>
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	0a 94       	dec	r0
     348:	e2 f7       	brpl	.-8      	; 0x342 <GPIO_Init+0x90>
     34a:	82 2b       	or	r24, r18
     34c:	87 bb       	out	0x17, r24	; 23
     34e:	08 95       	ret
     350:	db 01       	movw	r26, r22
     352:	11 96       	adiw	r26, 0x01	; 1
     354:	8c 91       	ld	r24, X
     356:	11 97       	sbiw	r26, 0x01	; 1
     358:	81 11       	cpse	r24, r1
     35a:	0d c0       	rjmp	.+26     	; 0x376 <GPIO_Init+0xc4>
     35c:	24 b3       	in	r18, 0x14	; 20
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0c 90       	ld	r0, X
     364:	02 c0       	rjmp	.+4      	; 0x36a <GPIO_Init+0xb8>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <GPIO_Init+0xb4>
     36e:	80 95       	com	r24
     370:	82 23       	and	r24, r18
     372:	84 bb       	out	0x14, r24	; 20
     374:	08 95       	ret
     376:	81 30       	cpi	r24, 0x01	; 1
     378:	09 f0       	breq	.+2      	; 0x37c <GPIO_Init+0xca>
     37a:	9d c0       	rjmp	.+314    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     37c:	24 b3       	in	r18, 0x14	; 20
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	fb 01       	movw	r30, r22
     384:	00 80       	ld	r0, Z
     386:	02 c0       	rjmp	.+4      	; 0x38c <GPIO_Init+0xda>
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	0a 94       	dec	r0
     38e:	e2 f7       	brpl	.-8      	; 0x388 <GPIO_Init+0xd6>
     390:	82 2b       	or	r24, r18
     392:	84 bb       	out	0x14, r24	; 20
     394:	08 95       	ret
     396:	db 01       	movw	r26, r22
     398:	11 96       	adiw	r26, 0x01	; 1
     39a:	8c 91       	ld	r24, X
     39c:	11 97       	sbiw	r26, 0x01	; 1
     39e:	81 11       	cpse	r24, r1
     3a0:	0d c0       	rjmp	.+26     	; 0x3bc <GPIO_Init+0x10a>
     3a2:	21 b3       	in	r18, 0x11	; 17
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0c 90       	ld	r0, X
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <GPIO_Init+0xfe>
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	0a 94       	dec	r0
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <GPIO_Init+0xfa>
     3b4:	80 95       	com	r24
     3b6:	82 23       	and	r24, r18
     3b8:	81 bb       	out	0x11, r24	; 17
     3ba:	08 95       	ret
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	09 f0       	breq	.+2      	; 0x3c2 <GPIO_Init+0x110>
     3c0:	7a c0       	rjmp	.+244    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     3c2:	21 b3       	in	r18, 0x11	; 17
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	fb 01       	movw	r30, r22
     3ca:	00 80       	ld	r0, Z
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <GPIO_Init+0x120>
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	0a 94       	dec	r0
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <GPIO_Init+0x11c>
     3d6:	82 2b       	or	r24, r18
     3d8:	81 bb       	out	0x11, r24	; 17
     3da:	08 95       	ret
     3dc:	db 01       	movw	r26, r22
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	8c 91       	ld	r24, X
     3e2:	11 97       	sbiw	r26, 0x01	; 1
     3e4:	81 11       	cpse	r24, r1
     3e6:	0d c0       	rjmp	.+26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3e8:	22 b1       	in	r18, 0x02	; 2
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0c 90       	ld	r0, X
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <GPIO_Init+0x144>
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	0a 94       	dec	r0
     3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <GPIO_Init+0x140>
     3fa:	80 95       	com	r24
     3fc:	82 23       	and	r24, r18
     3fe:	82 b9       	out	0x02, r24	; 2
     400:	08 95       	ret
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	09 f0       	breq	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	57 c0       	rjmp	.+174    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     408:	22 b1       	in	r18, 0x02	; 2
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	fb 01       	movw	r30, r22
     410:	00 80       	ld	r0, Z
     412:	02 c0       	rjmp	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	0a 94       	dec	r0
     41a:	e2 f7       	brpl	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41c:	82 2b       	or	r24, r18
     41e:	82 b9       	out	0x02, r24	; 2
     420:	08 95       	ret
     422:	db 01       	movw	r26, r22
     424:	11 96       	adiw	r26, 0x01	; 1
     426:	8c 91       	ld	r24, X
     428:	11 97       	sbiw	r26, 0x01	; 1
     42a:	81 11       	cpse	r24, r1
     42c:	0f c0       	rjmp	.+30     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     42e:	e1 e6       	ldi	r30, 0x61	; 97
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	20 81       	ld	r18, Z
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0c 90       	ld	r0, X
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	0a 94       	dec	r0
     442:	e2 f7       	brpl	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     444:	80 95       	com	r24
     446:	82 23       	and	r24, r18
     448:	80 83       	st	Z, r24
     44a:	08 95       	ret
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	99 f5       	brne	.+102    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     450:	e1 e6       	ldi	r30, 0x61	; 97
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	20 81       	ld	r18, Z
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	db 01       	movw	r26, r22
     45c:	0c 90       	ld	r0, X
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	0a 94       	dec	r0
     466:	e2 f7       	brpl	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     468:	82 2b       	or	r24, r18
     46a:	80 83       	st	Z, r24
     46c:	08 95       	ret
     46e:	fb 01       	movw	r30, r22
     470:	81 81       	ldd	r24, Z+1	; 0x01
     472:	81 11       	cpse	r24, r1
     474:	10 c0       	rjmp	.+32     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     476:	e4 e6       	ldi	r30, 0x64	; 100
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	20 81       	ld	r18, Z
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	db 01       	movw	r26, r22
     482:	0c 90       	ld	r0, X
     484:	02 c0       	rjmp	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     48e:	80 95       	com	r24
     490:	82 23       	and	r24, r18
     492:	80 83       	st	Z, r24
     494:	08 95       	ret
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	71 f4       	brne	.+28     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     49a:	e4 e6       	ldi	r30, 0x64	; 100
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	20 81       	ld	r18, Z
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	db 01       	movw	r26, r22
     4a6:	0c 90       	ld	r0, X
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	0a 94       	dec	r0
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4b2:	82 2b       	or	r24, r18
     4b4:	80 83       	st	Z, r24
     4b6:	08 95       	ret

000004b8 <GPIO_TogglePin>:
	}
}

void GPIO_TogglePin(uint8_t port, uint8_t pin)
{
	switch(port)
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	87 30       	cpi	r24, 0x07	; 7
     4bc:	91 05       	cpc	r25, r1
     4be:	08 f0       	brcs	.+2      	; 0x4c2 <GPIO_TogglePin+0xa>
     4c0:	54 c0       	rjmp	.+168    	; 0x56a <GPIO_TogglePin+0xb2>
     4c2:	fc 01       	movw	r30, r24
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	e5 c3       	rjmp	.+1994   	; 0xc94 <__tablejump2__>
	{
		case GPIOA:
			TGLB(PORTA, pin);
     4ca:	2b b3       	in	r18, 0x1b	; 27
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <GPIO_TogglePin+0x1e>
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	6a 95       	dec	r22
     4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <GPIO_TogglePin+0x1a>
     4da:	82 27       	eor	r24, r18
     4dc:	8b bb       	out	0x1b, r24	; 27
		break;
     4de:	08 95       	ret
		case GPIOB:
			TGLB(PORTB, pin);
     4e0:	28 b3       	in	r18, 0x18	; 24
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <GPIO_TogglePin+0x34>
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	6a 95       	dec	r22
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <GPIO_TogglePin+0x30>
     4f0:	82 27       	eor	r24, r18
     4f2:	88 bb       	out	0x18, r24	; 24
		break;
     4f4:	08 95       	ret
		case GPIOC:
			TGLB(PORTC, pin);
     4f6:	25 b3       	in	r18, 0x15	; 21
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <GPIO_TogglePin+0x4a>
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	6a 95       	dec	r22
     504:	e2 f7       	brpl	.-8      	; 0x4fe <GPIO_TogglePin+0x46>
     506:	82 27       	eor	r24, r18
     508:	85 bb       	out	0x15, r24	; 21
		break;
     50a:	08 95       	ret
		case GPIOD:
			TGLB(PORTD, pin);
     50c:	22 b3       	in	r18, 0x12	; 18
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 c0       	rjmp	.+4      	; 0x518 <GPIO_TogglePin+0x60>
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	6a 95       	dec	r22
     51a:	e2 f7       	brpl	.-8      	; 0x514 <GPIO_TogglePin+0x5c>
     51c:	82 27       	eor	r24, r18
     51e:	82 bb       	out	0x12, r24	; 18
		break;
     520:	08 95       	ret
		case GPIOE:
			TGLB(PORTE, pin);
     522:	23 b1       	in	r18, 0x03	; 3
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	02 c0       	rjmp	.+4      	; 0x52e <GPIO_TogglePin+0x76>
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	6a 95       	dec	r22
     530:	e2 f7       	brpl	.-8      	; 0x52a <GPIO_TogglePin+0x72>
     532:	82 27       	eor	r24, r18
     534:	83 b9       	out	0x03, r24	; 3
		break;
     536:	08 95       	ret
		case GPIOF:
			TGLB(PORTF, pin);
     538:	e2 e6       	ldi	r30, 0x62	; 98
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	20 81       	ld	r18, Z
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	02 c0       	rjmp	.+4      	; 0x548 <GPIO_TogglePin+0x90>
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	6a 95       	dec	r22
     54a:	e2 f7       	brpl	.-8      	; 0x544 <GPIO_TogglePin+0x8c>
     54c:	82 27       	eor	r24, r18
     54e:	80 83       	st	Z, r24
		break;
     550:	08 95       	ret
		case GPIOG:
			TGLB(PORTG, pin);
     552:	e5 e6       	ldi	r30, 0x65	; 101
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	20 81       	ld	r18, Z
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	02 c0       	rjmp	.+4      	; 0x562 <GPIO_TogglePin+0xaa>
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	6a 95       	dec	r22
     564:	e2 f7       	brpl	.-8      	; 0x55e <GPIO_TogglePin+0xa6>
     566:	82 27       	eor	r24, r18
     568:	80 83       	st	Z, r24
     56a:	08 95       	ret

0000056c <UART_Init>:
USART_TypeDef USART1_descripter = {&UDR1, &UCSR1A, &UCSR1B, &UCSR1C, &UBRR1H, &UBRR1L};



StatusTypeDef UART_Init(UART_HandleTypeDef *huart)
{
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
	uint32_t temp;
	USART_TypeDef *usart = NULL;
	if (huart == NULL)
     57c:	00 97       	sbiw	r24, 0x00	; 0
     57e:	09 f4       	brne	.+2      	; 0x582 <UART_Init+0x16>
     580:	77 c1       	rjmp	.+750    	; 0x870 <UART_Init+0x304>
	{
		return ERROR;
	}
	
	switch(huart->USARTn)
     582:	dc 01       	movw	r26, r24
     584:	2c 91       	ld	r18, X
     586:	22 23       	and	r18, r18
     588:	09 f4       	brne	.+2      	; 0x58c <UART_Init+0x20>
     58a:	78 c1       	rjmp	.+752    	; 0x87c <UART_Init+0x310>
     58c:	21 30       	cpi	r18, 0x01	; 1
     58e:	09 f0       	breq	.+2      	; 0x592 <UART_Init+0x26>
     590:	71 c1       	rjmp	.+738    	; 0x874 <UART_Init+0x308>
	{
		case USART0:
		usart = &USART0_descripter;
		break;
		case USART1:
		usart = &USART1_descripter;
     592:	05 e0       	ldi	r16, 0x05	; 5
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	74 c1       	rjmp	.+744    	; 0x880 <UART_Init+0x314>
	}
	
	switch(huart->Init.OverSampling)
	{
		case UART_OVERSAMPLING_8:
		temp = (float)(F_CPU / (float)(16 * huart->Init.BaudRate)) - 0.5; //-1.0 + 0.5 => for rounding
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	9a 81       	ldd	r25, Y+2	; 0x02
     59c:	ab 81       	ldd	r26, Y+3	; 0x03
     59e:	bc 81       	ldd	r27, Y+4	; 0x04
     5a0:	88 0f       	add	r24, r24
     5a2:	99 1f       	adc	r25, r25
     5a4:	aa 1f       	adc	r26, r26
     5a6:	bb 1f       	adc	r27, r27
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	aa 1f       	adc	r26, r26
     5ae:	bb 1f       	adc	r27, r27
     5b0:	bc 01       	movw	r22, r24
     5b2:	cd 01       	movw	r24, r26
     5b4:	66 0f       	add	r22, r22
     5b6:	77 1f       	adc	r23, r23
     5b8:	88 1f       	adc	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	66 0f       	add	r22, r22
     5be:	77 1f       	adc	r23, r23
     5c0:	88 1f       	adc	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	d9 d2       	rcall	.+1458   	; 0xb78 <__floatunsisf>
     5c6:	9b 01       	movw	r18, r22
     5c8:	ac 01       	movw	r20, r24
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	74 e2       	ldi	r23, 0x24	; 36
     5ce:	84 e7       	ldi	r24, 0x74	; 116
     5d0:	9b e4       	ldi	r25, 0x4B	; 75
     5d2:	3e d2       	rcall	.+1148   	; 0xa50 <__divsf3>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	5f e3       	ldi	r21, 0x3F	; 63
     5dc:	d4 d1       	rcall	.+936    	; 0x986 <__subsf3>
     5de:	a0 d2       	rcall	.+1344   	; 0xb20 <__fixunssfsi>
		*(usart->UBRRnH) = (temp >> 8) & 0xFF;
     5e0:	d8 01       	movw	r26, r16
     5e2:	18 96       	adiw	r26, 0x08	; 8
     5e4:	ed 91       	ld	r30, X+
     5e6:	fc 91       	ld	r31, X
     5e8:	19 97       	sbiw	r26, 0x09	; 9
     5ea:	c7 2e       	mov	r12, r23
     5ec:	d8 2e       	mov	r13, r24
     5ee:	e9 2e       	mov	r14, r25
     5f0:	ff 24       	eor	r15, r15
     5f2:	c0 82       	st	Z, r12
		*(usart->UBRRnL) = temp & 0xFF;
     5f4:	1a 96       	adiw	r26, 0x0a	; 10
     5f6:	ed 91       	ld	r30, X+
     5f8:	fc 91       	ld	r31, X
     5fa:	1b 97       	sbiw	r26, 0x0b	; 11
     5fc:	60 83       	st	Z, r22
		CLRB(*(usart->UCSRnA), 1);
     5fe:	12 96       	adiw	r26, 0x02	; 2
     600:	ed 91       	ld	r30, X+
     602:	fc 91       	ld	r31, X
     604:	13 97       	sbiw	r26, 0x03	; 3
     606:	80 81       	ld	r24, Z
     608:	8d 7f       	andi	r24, 0xFD	; 253
     60a:	80 83       	st	Z, r24
		break;
     60c:	36 c0       	rjmp	.+108    	; 0x67a <UART_Init+0x10e>
		case UART_OVERSAMPLING_16:
		temp = (float)(F_CPU / (float)(8 * huart->Init.BaudRate)) - 0.5;
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	9a 81       	ldd	r25, Y+2	; 0x02
     612:	ab 81       	ldd	r26, Y+3	; 0x03
     614:	bc 81       	ldd	r27, Y+4	; 0x04
     616:	88 0f       	add	r24, r24
     618:	99 1f       	adc	r25, r25
     61a:	aa 1f       	adc	r26, r26
     61c:	bb 1f       	adc	r27, r27
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	aa 1f       	adc	r26, r26
     624:	bb 1f       	adc	r27, r27
     626:	bc 01       	movw	r22, r24
     628:	cd 01       	movw	r24, r26
     62a:	66 0f       	add	r22, r22
     62c:	77 1f       	adc	r23, r23
     62e:	88 1f       	adc	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	a2 d2       	rcall	.+1348   	; 0xb78 <__floatunsisf>
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	74 e2       	ldi	r23, 0x24	; 36
     63c:	84 e7       	ldi	r24, 0x74	; 116
     63e:	9b e4       	ldi	r25, 0x4B	; 75
     640:	07 d2       	rcall	.+1038   	; 0xa50 <__divsf3>
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	5f e3       	ldi	r21, 0x3F	; 63
     64a:	9d d1       	rcall	.+826    	; 0x986 <__subsf3>
     64c:	69 d2       	rcall	.+1234   	; 0xb20 <__fixunssfsi>
		*(usart->UBRRnH) = (temp >> 8) & 0xFF;
     64e:	d8 01       	movw	r26, r16
     650:	18 96       	adiw	r26, 0x08	; 8
     652:	ed 91       	ld	r30, X+
     654:	fc 91       	ld	r31, X
     656:	19 97       	sbiw	r26, 0x09	; 9
     658:	c7 2e       	mov	r12, r23
     65a:	d8 2e       	mov	r13, r24
     65c:	e9 2e       	mov	r14, r25
     65e:	ff 24       	eor	r15, r15
     660:	c0 82       	st	Z, r12
		*(usart->UBRRnL) = temp & 0xFF;
     662:	1a 96       	adiw	r26, 0x0a	; 10
     664:	ed 91       	ld	r30, X+
     666:	fc 91       	ld	r31, X
     668:	1b 97       	sbiw	r26, 0x0b	; 11
     66a:	60 83       	st	Z, r22
		SETB(*(usart->UCSRnA), 1);
     66c:	12 96       	adiw	r26, 0x02	; 2
     66e:	ed 91       	ld	r30, X+
     670:	fc 91       	ld	r31, X
     672:	13 97       	sbiw	r26, 0x03	; 3
     674:	80 81       	ld	r24, Z
     676:	82 60       	ori	r24, 0x02	; 2
     678:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	
	switch(huart->Init.WordLength)
     67a:	8d 81       	ldd	r24, Y+5	; 0x05
     67c:	82 30       	cpi	r24, 0x02	; 2
     67e:	d9 f1       	breq	.+118    	; 0x6f6 <UART_Init+0x18a>
     680:	28 f4       	brcc	.+10     	; 0x68c <UART_Init+0x120>
     682:	88 23       	and	r24, r24
     684:	51 f0       	breq	.+20     	; 0x69a <UART_Init+0x12e>
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	f9 f0       	breq	.+62     	; 0x6c8 <UART_Init+0x15c>
     68a:	79 c0       	rjmp	.+242    	; 0x77e <UART_Init+0x212>
     68c:	83 30       	cpi	r24, 0x03	; 3
     68e:	09 f4       	brne	.+2      	; 0x692 <UART_Init+0x126>
     690:	49 c0       	rjmp	.+146    	; 0x724 <UART_Init+0x1b8>
     692:	84 30       	cpi	r24, 0x04	; 4
     694:	09 f4       	brne	.+2      	; 0x698 <UART_Init+0x12c>
     696:	5d c0       	rjmp	.+186    	; 0x752 <UART_Init+0x1e6>
     698:	72 c0       	rjmp	.+228    	; 0x77e <UART_Init+0x212>
	{
		case UART_WORDLENGTH_8B:
		CLRB(*(usart->UCSRnB), 2);
     69a:	d8 01       	movw	r26, r16
     69c:	14 96       	adiw	r26, 0x04	; 4
     69e:	ed 91       	ld	r30, X+
     6a0:	fc 91       	ld	r31, X
     6a2:	15 97       	sbiw	r26, 0x05	; 5
     6a4:	80 81       	ld	r24, Z
     6a6:	8b 7f       	andi	r24, 0xFB	; 251
     6a8:	80 83       	st	Z, r24
		SETB(*(usart->UCSRnC), 2);
     6aa:	16 96       	adiw	r26, 0x06	; 6
     6ac:	ed 91       	ld	r30, X+
     6ae:	fc 91       	ld	r31, X
     6b0:	17 97       	sbiw	r26, 0x07	; 7
     6b2:	80 81       	ld	r24, Z
     6b4:	84 60       	ori	r24, 0x04	; 4
     6b6:	80 83       	st	Z, r24
		SETB(*(usart->UCSRnC), 1);
     6b8:	16 96       	adiw	r26, 0x06	; 6
     6ba:	ed 91       	ld	r30, X+
     6bc:	fc 91       	ld	r31, X
     6be:	17 97       	sbiw	r26, 0x07	; 7
     6c0:	80 81       	ld	r24, Z
     6c2:	82 60       	ori	r24, 0x02	; 2
     6c4:	80 83       	st	Z, r24
		break;
     6c6:	5b c0       	rjmp	.+182    	; 0x77e <UART_Init+0x212>
		case UART_WORDLENGTH_5B:
		CLRB(*(usart->UCSRnB), 2);
     6c8:	d8 01       	movw	r26, r16
     6ca:	14 96       	adiw	r26, 0x04	; 4
     6cc:	ed 91       	ld	r30, X+
     6ce:	fc 91       	ld	r31, X
     6d0:	15 97       	sbiw	r26, 0x05	; 5
     6d2:	80 81       	ld	r24, Z
     6d4:	8b 7f       	andi	r24, 0xFB	; 251
     6d6:	80 83       	st	Z, r24
		CLRB(*(usart->UCSRnC), 2);
     6d8:	16 96       	adiw	r26, 0x06	; 6
     6da:	ed 91       	ld	r30, X+
     6dc:	fc 91       	ld	r31, X
     6de:	17 97       	sbiw	r26, 0x07	; 7
     6e0:	80 81       	ld	r24, Z
     6e2:	8b 7f       	andi	r24, 0xFB	; 251
     6e4:	80 83       	st	Z, r24
		CLRB(*(usart->UCSRnC), 1);
     6e6:	16 96       	adiw	r26, 0x06	; 6
     6e8:	ed 91       	ld	r30, X+
     6ea:	fc 91       	ld	r31, X
     6ec:	17 97       	sbiw	r26, 0x07	; 7
     6ee:	80 81       	ld	r24, Z
     6f0:	8d 7f       	andi	r24, 0xFD	; 253
     6f2:	80 83       	st	Z, r24
		break;
     6f4:	44 c0       	rjmp	.+136    	; 0x77e <UART_Init+0x212>
		case UART_WORDLENGTH_6B:
		CLRB(*(usart->UCSRnB), 2);
     6f6:	d8 01       	movw	r26, r16
     6f8:	14 96       	adiw	r26, 0x04	; 4
     6fa:	ed 91       	ld	r30, X+
     6fc:	fc 91       	ld	r31, X
     6fe:	15 97       	sbiw	r26, 0x05	; 5
     700:	80 81       	ld	r24, Z
     702:	8b 7f       	andi	r24, 0xFB	; 251
     704:	80 83       	st	Z, r24
		CLRB(*(usart->UCSRnC), 2);
     706:	16 96       	adiw	r26, 0x06	; 6
     708:	ed 91       	ld	r30, X+
     70a:	fc 91       	ld	r31, X
     70c:	17 97       	sbiw	r26, 0x07	; 7
     70e:	80 81       	ld	r24, Z
     710:	8b 7f       	andi	r24, 0xFB	; 251
     712:	80 83       	st	Z, r24
		SETB(*(usart->UCSRnC), 1);
     714:	16 96       	adiw	r26, 0x06	; 6
     716:	ed 91       	ld	r30, X+
     718:	fc 91       	ld	r31, X
     71a:	17 97       	sbiw	r26, 0x07	; 7
     71c:	80 81       	ld	r24, Z
     71e:	82 60       	ori	r24, 0x02	; 2
     720:	80 83       	st	Z, r24
		break;
     722:	2d c0       	rjmp	.+90     	; 0x77e <UART_Init+0x212>
		case UART_WORDLENGTH_7B:
		CLRB(*(usart->UCSRnB), 2);
     724:	d8 01       	movw	r26, r16
     726:	14 96       	adiw	r26, 0x04	; 4
     728:	ed 91       	ld	r30, X+
     72a:	fc 91       	ld	r31, X
     72c:	15 97       	sbiw	r26, 0x05	; 5
     72e:	80 81       	ld	r24, Z
     730:	8b 7f       	andi	r24, 0xFB	; 251
     732:	80 83       	st	Z, r24
		SETB(*(usart->UCSRnC), 2);
     734:	16 96       	adiw	r26, 0x06	; 6
     736:	ed 91       	ld	r30, X+
     738:	fc 91       	ld	r31, X
     73a:	17 97       	sbiw	r26, 0x07	; 7
     73c:	80 81       	ld	r24, Z
     73e:	84 60       	ori	r24, 0x04	; 4
     740:	80 83       	st	Z, r24
		CLRB(*(usart->UCSRnC), 1);
     742:	16 96       	adiw	r26, 0x06	; 6
     744:	ed 91       	ld	r30, X+
     746:	fc 91       	ld	r31, X
     748:	17 97       	sbiw	r26, 0x07	; 7
     74a:	80 81       	ld	r24, Z
     74c:	8d 7f       	andi	r24, 0xFD	; 253
     74e:	80 83       	st	Z, r24
		break;
     750:	16 c0       	rjmp	.+44     	; 0x77e <UART_Init+0x212>
		case UART_WORDLENGTH_9B:
		SETB(*(usart->UCSRnB), 2);
     752:	d8 01       	movw	r26, r16
     754:	14 96       	adiw	r26, 0x04	; 4
     756:	ed 91       	ld	r30, X+
     758:	fc 91       	ld	r31, X
     75a:	15 97       	sbiw	r26, 0x05	; 5
     75c:	80 81       	ld	r24, Z
     75e:	84 60       	ori	r24, 0x04	; 4
     760:	80 83       	st	Z, r24
		SETB(*(usart->UCSRnC), 2);
     762:	16 96       	adiw	r26, 0x06	; 6
     764:	ed 91       	ld	r30, X+
     766:	fc 91       	ld	r31, X
     768:	17 97       	sbiw	r26, 0x07	; 7
     76a:	80 81       	ld	r24, Z
     76c:	84 60       	ori	r24, 0x04	; 4
     76e:	80 83       	st	Z, r24
		SETB(*(usart->UCSRnC), 1);
     770:	16 96       	adiw	r26, 0x06	; 6
     772:	ed 91       	ld	r30, X+
     774:	fc 91       	ld	r31, X
     776:	17 97       	sbiw	r26, 0x07	; 7
     778:	80 81       	ld	r24, Z
     77a:	82 60       	ori	r24, 0x02	; 2
     77c:	80 83       	st	Z, r24
		break;
		default:
		break;
	}
	
	switch(huart->Init.StopBits)
     77e:	8e 81       	ldd	r24, Y+6	; 0x06
     780:	88 23       	and	r24, r24
     782:	19 f0       	breq	.+6      	; 0x78a <UART_Init+0x21e>
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	51 f0       	breq	.+20     	; 0x79c <UART_Init+0x230>
     788:	11 c0       	rjmp	.+34     	; 0x7ac <UART_Init+0x240>
	{
		case UART_STOPBITS_1:
		CLRB(*(usart->UCSRnC), 4);
     78a:	d8 01       	movw	r26, r16
     78c:	16 96       	adiw	r26, 0x06	; 6
     78e:	ed 91       	ld	r30, X+
     790:	fc 91       	ld	r31, X
     792:	17 97       	sbiw	r26, 0x07	; 7
     794:	80 81       	ld	r24, Z
     796:	8f 7e       	andi	r24, 0xEF	; 239
     798:	80 83       	st	Z, r24
		break;
     79a:	08 c0       	rjmp	.+16     	; 0x7ac <UART_Init+0x240>
		case UART_STOPBITS_2:
		SETB(*(usart->UCSRnC), 4);
     79c:	d8 01       	movw	r26, r16
     79e:	16 96       	adiw	r26, 0x06	; 6
     7a0:	ed 91       	ld	r30, X+
     7a2:	fc 91       	ld	r31, X
     7a4:	17 97       	sbiw	r26, 0x07	; 7
     7a6:	80 81       	ld	r24, Z
     7a8:	80 61       	ori	r24, 0x10	; 16
     7aa:	80 83       	st	Z, r24
		break;
	}
	
	switch(huart->Init.Parity)
     7ac:	8f 81       	ldd	r24, Y+7	; 0x07
     7ae:	81 30       	cpi	r24, 0x01	; 1
     7b0:	a1 f0       	breq	.+40     	; 0x7da <UART_Init+0x26e>
     7b2:	18 f0       	brcs	.+6      	; 0x7ba <UART_Init+0x24e>
     7b4:	82 30       	cpi	r24, 0x02	; 2
     7b6:	09 f1       	breq	.+66     	; 0x7fa <UART_Init+0x28e>
     7b8:	2f c0       	rjmp	.+94     	; 0x818 <UART_Init+0x2ac>
	{
		case UART_PARITY_NONE:
		CLRB(*(usart->UCSRnC), 6);
     7ba:	d8 01       	movw	r26, r16
     7bc:	16 96       	adiw	r26, 0x06	; 6
     7be:	ed 91       	ld	r30, X+
     7c0:	fc 91       	ld	r31, X
     7c2:	17 97       	sbiw	r26, 0x07	; 7
     7c4:	80 81       	ld	r24, Z
     7c6:	8f 7b       	andi	r24, 0xBF	; 191
     7c8:	80 83       	st	Z, r24
		CLRB(*(usart->UCSRnC), 5);
     7ca:	16 96       	adiw	r26, 0x06	; 6
     7cc:	ed 91       	ld	r30, X+
     7ce:	fc 91       	ld	r31, X
     7d0:	17 97       	sbiw	r26, 0x07	; 7
     7d2:	80 81       	ld	r24, Z
     7d4:	8f 7d       	andi	r24, 0xDF	; 223
     7d6:	80 83       	st	Z, r24
		break;
     7d8:	1f c0       	rjmp	.+62     	; 0x818 <UART_Init+0x2ac>
		case UART_PARITY_EVEN:
		SETB(*(usart->UCSRnC), 6);
     7da:	d8 01       	movw	r26, r16
     7dc:	16 96       	adiw	r26, 0x06	; 6
     7de:	ed 91       	ld	r30, X+
     7e0:	fc 91       	ld	r31, X
     7e2:	17 97       	sbiw	r26, 0x07	; 7
     7e4:	80 81       	ld	r24, Z
     7e6:	80 64       	ori	r24, 0x40	; 64
     7e8:	80 83       	st	Z, r24
		CLRB(*(usart->UCSRnC), 5);
     7ea:	16 96       	adiw	r26, 0x06	; 6
     7ec:	ed 91       	ld	r30, X+
     7ee:	fc 91       	ld	r31, X
     7f0:	17 97       	sbiw	r26, 0x07	; 7
     7f2:	80 81       	ld	r24, Z
     7f4:	8f 7d       	andi	r24, 0xDF	; 223
     7f6:	80 83       	st	Z, r24
		break;
     7f8:	0f c0       	rjmp	.+30     	; 0x818 <UART_Init+0x2ac>
		case  UART_PARITY_ODD:
		SETB(*(usart->UCSRnC), 6);
     7fa:	d8 01       	movw	r26, r16
     7fc:	16 96       	adiw	r26, 0x06	; 6
     7fe:	ed 91       	ld	r30, X+
     800:	fc 91       	ld	r31, X
     802:	17 97       	sbiw	r26, 0x07	; 7
     804:	80 81       	ld	r24, Z
     806:	80 64       	ori	r24, 0x40	; 64
     808:	80 83       	st	Z, r24
		SETB(*(usart->UCSRnC), 5);
     80a:	16 96       	adiw	r26, 0x06	; 6
     80c:	ed 91       	ld	r30, X+
     80e:	fc 91       	ld	r31, X
     810:	17 97       	sbiw	r26, 0x07	; 7
     812:	80 81       	ld	r24, Z
     814:	80 62       	ori	r24, 0x20	; 32
     816:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	switch(huart->Init.Mode)
     818:	88 85       	ldd	r24, Y+8	; 0x08
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	71 f0       	breq	.+28     	; 0x83a <UART_Init+0x2ce>
     81e:	18 f0       	brcs	.+6      	; 0x826 <UART_Init+0x2ba>
     820:	82 30       	cpi	r24, 0x02	; 2
     822:	a9 f0       	breq	.+42     	; 0x84e <UART_Init+0x2e2>
     824:	29 c0       	rjmp	.+82     	; 0x878 <UART_Init+0x30c>
	{
		case UART_MODE_RX:
		SETB(*(usart->UCSRnB), 4);
     826:	d8 01       	movw	r26, r16
     828:	14 96       	adiw	r26, 0x04	; 4
     82a:	ed 91       	ld	r30, X+
     82c:	fc 91       	ld	r31, X
     82e:	15 97       	sbiw	r26, 0x05	; 5
     830:	80 81       	ld	r24, Z
     832:	80 61       	ori	r24, 0x10	; 16
     834:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     836:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(huart->Init.Mode)
	{
		case UART_MODE_RX:
		SETB(*(usart->UCSRnB), 4);
		break;
     838:	2c c0       	rjmp	.+88     	; 0x892 <UART_Init+0x326>
		case UART_MODE_TX:
		SETB(*(usart->UCSRnB), 3);
     83a:	d8 01       	movw	r26, r16
     83c:	14 96       	adiw	r26, 0x04	; 4
     83e:	ed 91       	ld	r30, X+
     840:	fc 91       	ld	r31, X
     842:	15 97       	sbiw	r26, 0x05	; 5
     844:	80 81       	ld	r24, Z
     846:	88 60       	ori	r24, 0x08	; 8
     848:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     84a:	80 e0       	ldi	r24, 0x00	; 0
		case UART_MODE_RX:
		SETB(*(usart->UCSRnB), 4);
		break;
		case UART_MODE_TX:
		SETB(*(usart->UCSRnB), 3);
		break;
     84c:	22 c0       	rjmp	.+68     	; 0x892 <UART_Init+0x326>
		case UART_MODE_RX_TX:
		SETB(*(usart->UCSRnB), 3);
     84e:	d8 01       	movw	r26, r16
     850:	14 96       	adiw	r26, 0x04	; 4
     852:	ed 91       	ld	r30, X+
     854:	fc 91       	ld	r31, X
     856:	15 97       	sbiw	r26, 0x05	; 5
     858:	80 81       	ld	r24, Z
     85a:	88 60       	ori	r24, 0x08	; 8
     85c:	80 83       	st	Z, r24
		SETB(*(usart->UCSRnB), 4);
     85e:	14 96       	adiw	r26, 0x04	; 4
     860:	ed 91       	ld	r30, X+
     862:	fc 91       	ld	r31, X
     864:	15 97       	sbiw	r26, 0x05	; 5
     866:	80 81       	ld	r24, Z
     868:	80 61       	ori	r24, 0x10	; 16
     86a:	80 83       	st	Z, r24
		default:
		break;
	}
	
	
	return OK;
     86c:	80 e0       	ldi	r24, 0x00	; 0
		SETB(*(usart->UCSRnB), 3);
		break;
		case UART_MODE_RX_TX:
		SETB(*(usart->UCSRnB), 3);
		SETB(*(usart->UCSRnB), 4);
		break;
     86e:	11 c0       	rjmp	.+34     	; 0x892 <UART_Init+0x326>
{
	uint32_t temp;
	USART_TypeDef *usart = NULL;
	if (huart == NULL)
	{
		return ERROR;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	0f c0       	rjmp	.+30     	; 0x892 <UART_Init+0x326>
		break;
	}
	
	if (usart == NULL)
	{
		return ERROR;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	0d c0       	rjmp	.+26     	; 0x892 <UART_Init+0x326>
		default:
		break;
	}
	
	
	return OK;
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0b c0       	rjmp	.+22     	; 0x892 <UART_Init+0x326>
	}
	
	switch(huart->USARTn)
	{
		case USART0:
		usart = &USART0_descripter;
     87c:	01 e1       	ldi	r16, 0x11	; 17
     87e:	11 e0       	ldi	r17, 0x01	; 1
     880:	ec 01       	movw	r28, r24
	if (usart == NULL)
	{
		return ERROR;
	}
	
	switch(huart->Init.OverSampling)
     882:	89 85       	ldd	r24, Y+9	; 0x09
     884:	88 23       	and	r24, r24
     886:	09 f4       	brne	.+2      	; 0x88a <UART_Init+0x31e>
     888:	87 ce       	rjmp	.-754    	; 0x598 <UART_Init+0x2c>
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	09 f4       	brne	.+2      	; 0x890 <UART_Init+0x324>
     88e:	bf ce       	rjmp	.-642    	; 0x60e <UART_Init+0xa2>
     890:	f4 ce       	rjmp	.-536    	; 0x67a <UART_Init+0x10e>
		break;
	}
	
	
	return OK;
}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	08 95       	ret

000008a4 <UART_Transmit>:

StatusTypeDef UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
     8a4:	af 92       	push	r10
     8a6:	bf 92       	push	r11
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	7c 01       	movw	r14, r24
	uint8_t		*pdata8bits = NULL;
	uint16_t	*pdata16bits = NULL;
	USART_TypeDef *usart = NULL;
	
	huart->ErrorCode = UART_ERROR_NONE;
     8ba:	ec 01       	movw	r28, r24
     8bc:	1e 8a       	std	Y+22, r1	; 0x16
	
	huart->TxXferSize = Size;
     8be:	5f 87       	std	Y+15, r21	; 0x0f
     8c0:	4e 87       	std	Y+14, r20	; 0x0e
	huart->TxXferCount = Size;
     8c2:	5b 8b       	std	Y+19, r21	; 0x13
     8c4:	4a 8b       	std	Y+18, r20	; 0x12
	
	switch(huart->USARTn)
     8c6:	88 81       	ld	r24, Y
     8c8:	88 23       	and	r24, r24
     8ca:	19 f0       	breq	.+6      	; 0x8d2 <UART_Transmit+0x2e>
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	21 f0       	breq	.+8      	; 0x8d8 <UART_Transmit+0x34>
     8d0:	06 c0       	rjmp	.+12     	; 0x8de <UART_Transmit+0x3a>
	{
		case USART0:
		usart = &USART0_descripter;
     8d2:	01 e1       	ldi	r16, 0x11	; 17
     8d4:	11 e0       	ldi	r17, 0x01	; 1
     8d6:	05 c0       	rjmp	.+10     	; 0x8e2 <UART_Transmit+0x3e>
		break;
		case USART1:
		usart = &USART1_descripter;
     8d8:	05 e0       	ldi	r16, 0x05	; 5
     8da:	11 e0       	ldi	r17, 0x01	; 1
		break;
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <UART_Transmit+0x3e>

StatusTypeDef UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
	uint8_t		*pdata8bits = NULL;
	uint16_t	*pdata16bits = NULL;
	USART_TypeDef *usart = NULL;
     8de:	00 e0       	ldi	r16, 0x00	; 0
     8e0:	10 e0       	ldi	r17, 0x00	; 0
		break;
		default:
		break;
	}
	
	if (huart == NULL)
     8e2:	e1 14       	cp	r14, r1
     8e4:	f1 04       	cpc	r15, r1
     8e6:	d9 f1       	breq	.+118    	; 0x95e <UART_Transmit+0xba>
	{
		return ERROR;
	}
	
	if (huart->Init.WordLength == UART_WORDLENGTH_9B && huart->Init.Parity == UART_PARITY_NONE)
     8e8:	f7 01       	movw	r30, r14
     8ea:	85 81       	ldd	r24, Z+5	; 0x05
     8ec:	84 30       	cpi	r24, 0x04	; 4
     8ee:	41 f4       	brne	.+16     	; 0x900 <UART_Transmit+0x5c>
     8f0:	87 81       	ldd	r24, Z+7	; 0x07
     8f2:	81 11       	cpse	r24, r1
     8f4:	08 c0       	rjmp	.+16     	; 0x906 <UART_Transmit+0x62>
	{
		pdata8bits = NULL;
		pdata16bits = (uint16_t *) pData;
     8f6:	c6 2e       	mov	r12, r22
     8f8:	d7 2e       	mov	r13, r23
		return ERROR;
	}
	
	if (huart->Init.WordLength == UART_WORDLENGTH_9B && huart->Init.Parity == UART_PARITY_NONE)
	{
		pdata8bits = NULL;
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	05 c0       	rjmp	.+10     	; 0x90a <UART_Transmit+0x66>
		pdata16bits = (uint16_t *) pData;
	}
	else
	{
		pdata8bits = pData;
		pdata16bits = NULL;
     900:	c1 2c       	mov	r12, r1
     902:	d1 2c       	mov	r13, r1
     904:	02 c0       	rjmp	.+4      	; 0x90a <UART_Transmit+0x66>
     906:	c1 2c       	mov	r12, r1
     908:	d1 2c       	mov	r13, r1
	}
	

	for(int i = 0; i < huart->TxXferCount; i++)
     90a:	45 2b       	or	r20, r21
     90c:	51 f1       	breq	.+84     	; 0x962 <UART_Transmit+0xbe>
     90e:	a6 2e       	mov	r10, r22
     910:	b7 2e       	mov	r11, r23
     912:	d6 01       	movw	r26, r12
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
	{
		while (!(*(usart->UCSRnA) & 0x20));
     918:	e8 01       	movw	r28, r16
     91a:	ea 81       	ldd	r30, Y+2	; 0x02
     91c:	fb 81       	ldd	r31, Y+3	; 0x03
     91e:	90 81       	ld	r25, Z
     920:	95 ff       	sbrs	r25, 5
     922:	fd cf       	rjmp	.-6      	; 0x91e <UART_Transmit+0x7a>
		if (pdata16bits == NULL)
     924:	c1 14       	cp	r12, r1
     926:	d1 04       	cpc	r13, r1
     928:	39 f4       	brne	.+14     	; 0x938 <UART_Transmit+0x94>
		{
			*(usart->UDRn) = *(pdata8bits + i);
     92a:	e8 01       	movw	r28, r16
     92c:	e8 81       	ld	r30, Y
     92e:	f9 81       	ldd	r31, Y+1	; 0x01
     930:	e5 01       	movw	r28, r10
     932:	88 81       	ld	r24, Y
     934:	80 83       	st	Z, r24
     936:	05 c0       	rjmp	.+10     	; 0x942 <UART_Transmit+0x9e>
		}
		else
		{
			*(usart->UDRn) = *(pdata16bits + i);
     938:	e8 01       	movw	r28, r16
     93a:	e8 81       	ld	r30, Y
     93c:	f9 81       	ldd	r31, Y+1	; 0x01
     93e:	8c 91       	ld	r24, X
     940:	80 83       	st	Z, r24
		pdata8bits = pData;
		pdata16bits = NULL;
	}
	

	for(int i = 0; i < huart->TxXferCount; i++)
     942:	2f 5f       	subi	r18, 0xFF	; 255
     944:	3f 4f       	sbci	r19, 0xFF	; 255
     946:	df ef       	ldi	r29, 0xFF	; 255
     948:	ad 1a       	sub	r10, r29
     94a:	bd 0a       	sbc	r11, r29
     94c:	12 96       	adiw	r26, 0x02	; 2
     94e:	f7 01       	movw	r30, r14
     950:	42 89       	ldd	r20, Z+18	; 0x12
     952:	53 89       	ldd	r21, Z+19	; 0x13
     954:	24 17       	cp	r18, r20
     956:	35 07       	cpc	r19, r21
     958:	f8 f2       	brcs	.-66     	; 0x918 <UART_Transmit+0x74>
			*(usart->UDRn) = *(pdata16bits + i);
		}
	}
	
	
	return OK;
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	03 c0       	rjmp	.+6      	; 0x964 <UART_Transmit+0xc0>
		break;
	}
	
	if (huart == NULL)
	{
		return ERROR;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	01 c0       	rjmp	.+2      	; 0x964 <UART_Transmit+0xc0>
			*(usart->UDRn) = *(pdata16bits + i);
		}
	}
	
	
	return OK;
     962:	80 e0       	ldi	r24, 0x00	; 0
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	08 95       	ret

0000097a <main>:
#include "main.h"


int main(void)
{
    hwInit();
     97a:	97 dc       	rcall	.-1746   	; 0x2aa <hwInit>
	apInit();
     97c:	b4 db       	rcall	.-2200   	; 0xe6 <apInit>
	
	apMain();
     97e:	ba db       	rcall	.-2188   	; 0xf4 <apMain>
     980:	80 e0       	ldi	r24, 0x00	; 0
}
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	08 95       	ret

00000986 <__subsf3>:
     986:	50 58       	subi	r21, 0x80	; 128

00000988 <__addsf3>:
     988:	bb 27       	eor	r27, r27
     98a:	aa 27       	eor	r26, r26
     98c:	0e d0       	rcall	.+28     	; 0x9aa <__addsf3x>
     98e:	48 c1       	rjmp	.+656    	; 0xc20 <__fp_round>
     990:	39 d1       	rcall	.+626    	; 0xc04 <__fp_pscA>
     992:	30 f0       	brcs	.+12     	; 0x9a0 <__addsf3+0x18>
     994:	3e d1       	rcall	.+636    	; 0xc12 <__fp_pscB>
     996:	20 f0       	brcs	.+8      	; 0x9a0 <__addsf3+0x18>
     998:	31 f4       	brne	.+12     	; 0x9a6 <__addsf3+0x1e>
     99a:	9f 3f       	cpi	r25, 0xFF	; 255
     99c:	11 f4       	brne	.+4      	; 0x9a2 <__addsf3+0x1a>
     99e:	1e f4       	brtc	.+6      	; 0x9a6 <__addsf3+0x1e>
     9a0:	2e c1       	rjmp	.+604    	; 0xbfe <__fp_nan>
     9a2:	0e f4       	brtc	.+2      	; 0x9a6 <__addsf3+0x1e>
     9a4:	e0 95       	com	r30
     9a6:	e7 fb       	bst	r30, 7
     9a8:	24 c1       	rjmp	.+584    	; 0xbf2 <__fp_inf>

000009aa <__addsf3x>:
     9aa:	e9 2f       	mov	r30, r25
     9ac:	4a d1       	rcall	.+660    	; 0xc42 <__fp_split3>
     9ae:	80 f3       	brcs	.-32     	; 0x990 <__addsf3+0x8>
     9b0:	ba 17       	cp	r27, r26
     9b2:	62 07       	cpc	r22, r18
     9b4:	73 07       	cpc	r23, r19
     9b6:	84 07       	cpc	r24, r20
     9b8:	95 07       	cpc	r25, r21
     9ba:	18 f0       	brcs	.+6      	; 0x9c2 <__addsf3x+0x18>
     9bc:	71 f4       	brne	.+28     	; 0x9da <__addsf3x+0x30>
     9be:	9e f5       	brtc	.+102    	; 0xa26 <__addsf3x+0x7c>
     9c0:	62 c1       	rjmp	.+708    	; 0xc86 <__fp_zero>
     9c2:	0e f4       	brtc	.+2      	; 0x9c6 <__addsf3x+0x1c>
     9c4:	e0 95       	com	r30
     9c6:	0b 2e       	mov	r0, r27
     9c8:	ba 2f       	mov	r27, r26
     9ca:	a0 2d       	mov	r26, r0
     9cc:	0b 01       	movw	r0, r22
     9ce:	b9 01       	movw	r22, r18
     9d0:	90 01       	movw	r18, r0
     9d2:	0c 01       	movw	r0, r24
     9d4:	ca 01       	movw	r24, r20
     9d6:	a0 01       	movw	r20, r0
     9d8:	11 24       	eor	r1, r1
     9da:	ff 27       	eor	r31, r31
     9dc:	59 1b       	sub	r21, r25
     9de:	99 f0       	breq	.+38     	; 0xa06 <__addsf3x+0x5c>
     9e0:	59 3f       	cpi	r21, 0xF9	; 249
     9e2:	50 f4       	brcc	.+20     	; 0x9f8 <__addsf3x+0x4e>
     9e4:	50 3e       	cpi	r21, 0xE0	; 224
     9e6:	68 f1       	brcs	.+90     	; 0xa42 <__addsf3x+0x98>
     9e8:	1a 16       	cp	r1, r26
     9ea:	f0 40       	sbci	r31, 0x00	; 0
     9ec:	a2 2f       	mov	r26, r18
     9ee:	23 2f       	mov	r18, r19
     9f0:	34 2f       	mov	r19, r20
     9f2:	44 27       	eor	r20, r20
     9f4:	58 5f       	subi	r21, 0xF8	; 248
     9f6:	f3 cf       	rjmp	.-26     	; 0x9de <__addsf3x+0x34>
     9f8:	46 95       	lsr	r20
     9fa:	37 95       	ror	r19
     9fc:	27 95       	ror	r18
     9fe:	a7 95       	ror	r26
     a00:	f0 40       	sbci	r31, 0x00	; 0
     a02:	53 95       	inc	r21
     a04:	c9 f7       	brne	.-14     	; 0x9f8 <__addsf3x+0x4e>
     a06:	7e f4       	brtc	.+30     	; 0xa26 <__addsf3x+0x7c>
     a08:	1f 16       	cp	r1, r31
     a0a:	ba 0b       	sbc	r27, r26
     a0c:	62 0b       	sbc	r22, r18
     a0e:	73 0b       	sbc	r23, r19
     a10:	84 0b       	sbc	r24, r20
     a12:	ba f0       	brmi	.+46     	; 0xa42 <__addsf3x+0x98>
     a14:	91 50       	subi	r25, 0x01	; 1
     a16:	a1 f0       	breq	.+40     	; 0xa40 <__addsf3x+0x96>
     a18:	ff 0f       	add	r31, r31
     a1a:	bb 1f       	adc	r27, r27
     a1c:	66 1f       	adc	r22, r22
     a1e:	77 1f       	adc	r23, r23
     a20:	88 1f       	adc	r24, r24
     a22:	c2 f7       	brpl	.-16     	; 0xa14 <__addsf3x+0x6a>
     a24:	0e c0       	rjmp	.+28     	; 0xa42 <__addsf3x+0x98>
     a26:	ba 0f       	add	r27, r26
     a28:	62 1f       	adc	r22, r18
     a2a:	73 1f       	adc	r23, r19
     a2c:	84 1f       	adc	r24, r20
     a2e:	48 f4       	brcc	.+18     	; 0xa42 <__addsf3x+0x98>
     a30:	87 95       	ror	r24
     a32:	77 95       	ror	r23
     a34:	67 95       	ror	r22
     a36:	b7 95       	ror	r27
     a38:	f7 95       	ror	r31
     a3a:	9e 3f       	cpi	r25, 0xFE	; 254
     a3c:	08 f0       	brcs	.+2      	; 0xa40 <__addsf3x+0x96>
     a3e:	b3 cf       	rjmp	.-154    	; 0x9a6 <__addsf3+0x1e>
     a40:	93 95       	inc	r25
     a42:	88 0f       	add	r24, r24
     a44:	08 f0       	brcs	.+2      	; 0xa48 <__addsf3x+0x9e>
     a46:	99 27       	eor	r25, r25
     a48:	ee 0f       	add	r30, r30
     a4a:	97 95       	ror	r25
     a4c:	87 95       	ror	r24
     a4e:	08 95       	ret

00000a50 <__divsf3>:
     a50:	0c d0       	rcall	.+24     	; 0xa6a <__divsf3x>
     a52:	e6 c0       	rjmp	.+460    	; 0xc20 <__fp_round>
     a54:	de d0       	rcall	.+444    	; 0xc12 <__fp_pscB>
     a56:	40 f0       	brcs	.+16     	; 0xa68 <__divsf3+0x18>
     a58:	d5 d0       	rcall	.+426    	; 0xc04 <__fp_pscA>
     a5a:	30 f0       	brcs	.+12     	; 0xa68 <__divsf3+0x18>
     a5c:	21 f4       	brne	.+8      	; 0xa66 <__divsf3+0x16>
     a5e:	5f 3f       	cpi	r21, 0xFF	; 255
     a60:	19 f0       	breq	.+6      	; 0xa68 <__divsf3+0x18>
     a62:	c7 c0       	rjmp	.+398    	; 0xbf2 <__fp_inf>
     a64:	51 11       	cpse	r21, r1
     a66:	10 c1       	rjmp	.+544    	; 0xc88 <__fp_szero>
     a68:	ca c0       	rjmp	.+404    	; 0xbfe <__fp_nan>

00000a6a <__divsf3x>:
     a6a:	eb d0       	rcall	.+470    	; 0xc42 <__fp_split3>
     a6c:	98 f3       	brcs	.-26     	; 0xa54 <__divsf3+0x4>

00000a6e <__divsf3_pse>:
     a6e:	99 23       	and	r25, r25
     a70:	c9 f3       	breq	.-14     	; 0xa64 <__divsf3+0x14>
     a72:	55 23       	and	r21, r21
     a74:	b1 f3       	breq	.-20     	; 0xa62 <__divsf3+0x12>
     a76:	95 1b       	sub	r25, r21
     a78:	55 0b       	sbc	r21, r21
     a7a:	bb 27       	eor	r27, r27
     a7c:	aa 27       	eor	r26, r26
     a7e:	62 17       	cp	r22, r18
     a80:	73 07       	cpc	r23, r19
     a82:	84 07       	cpc	r24, r20
     a84:	38 f0       	brcs	.+14     	; 0xa94 <__divsf3_pse+0x26>
     a86:	9f 5f       	subi	r25, 0xFF	; 255
     a88:	5f 4f       	sbci	r21, 0xFF	; 255
     a8a:	22 0f       	add	r18, r18
     a8c:	33 1f       	adc	r19, r19
     a8e:	44 1f       	adc	r20, r20
     a90:	aa 1f       	adc	r26, r26
     a92:	a9 f3       	breq	.-22     	; 0xa7e <__divsf3_pse+0x10>
     a94:	33 d0       	rcall	.+102    	; 0xafc <__divsf3_pse+0x8e>
     a96:	0e 2e       	mov	r0, r30
     a98:	3a f0       	brmi	.+14     	; 0xaa8 <__divsf3_pse+0x3a>
     a9a:	e0 e8       	ldi	r30, 0x80	; 128
     a9c:	30 d0       	rcall	.+96     	; 0xafe <__divsf3_pse+0x90>
     a9e:	91 50       	subi	r25, 0x01	; 1
     aa0:	50 40       	sbci	r21, 0x00	; 0
     aa2:	e6 95       	lsr	r30
     aa4:	00 1c       	adc	r0, r0
     aa6:	ca f7       	brpl	.-14     	; 0xa9a <__divsf3_pse+0x2c>
     aa8:	29 d0       	rcall	.+82     	; 0xafc <__divsf3_pse+0x8e>
     aaa:	fe 2f       	mov	r31, r30
     aac:	27 d0       	rcall	.+78     	; 0xafc <__divsf3_pse+0x8e>
     aae:	66 0f       	add	r22, r22
     ab0:	77 1f       	adc	r23, r23
     ab2:	88 1f       	adc	r24, r24
     ab4:	bb 1f       	adc	r27, r27
     ab6:	26 17       	cp	r18, r22
     ab8:	37 07       	cpc	r19, r23
     aba:	48 07       	cpc	r20, r24
     abc:	ab 07       	cpc	r26, r27
     abe:	b0 e8       	ldi	r27, 0x80	; 128
     ac0:	09 f0       	breq	.+2      	; 0xac4 <__divsf3_pse+0x56>
     ac2:	bb 0b       	sbc	r27, r27
     ac4:	80 2d       	mov	r24, r0
     ac6:	bf 01       	movw	r22, r30
     ac8:	ff 27       	eor	r31, r31
     aca:	93 58       	subi	r25, 0x83	; 131
     acc:	5f 4f       	sbci	r21, 0xFF	; 255
     ace:	2a f0       	brmi	.+10     	; 0xada <__divsf3_pse+0x6c>
     ad0:	9e 3f       	cpi	r25, 0xFE	; 254
     ad2:	51 05       	cpc	r21, r1
     ad4:	68 f0       	brcs	.+26     	; 0xaf0 <__divsf3_pse+0x82>
     ad6:	8d c0       	rjmp	.+282    	; 0xbf2 <__fp_inf>
     ad8:	d7 c0       	rjmp	.+430    	; 0xc88 <__fp_szero>
     ada:	5f 3f       	cpi	r21, 0xFF	; 255
     adc:	ec f3       	brlt	.-6      	; 0xad8 <__divsf3_pse+0x6a>
     ade:	98 3e       	cpi	r25, 0xE8	; 232
     ae0:	dc f3       	brlt	.-10     	; 0xad8 <__divsf3_pse+0x6a>
     ae2:	86 95       	lsr	r24
     ae4:	77 95       	ror	r23
     ae6:	67 95       	ror	r22
     ae8:	b7 95       	ror	r27
     aea:	f7 95       	ror	r31
     aec:	9f 5f       	subi	r25, 0xFF	; 255
     aee:	c9 f7       	brne	.-14     	; 0xae2 <__divsf3_pse+0x74>
     af0:	88 0f       	add	r24, r24
     af2:	91 1d       	adc	r25, r1
     af4:	96 95       	lsr	r25
     af6:	87 95       	ror	r24
     af8:	97 f9       	bld	r25, 7
     afa:	08 95       	ret
     afc:	e1 e0       	ldi	r30, 0x01	; 1
     afe:	66 0f       	add	r22, r22
     b00:	77 1f       	adc	r23, r23
     b02:	88 1f       	adc	r24, r24
     b04:	bb 1f       	adc	r27, r27
     b06:	62 17       	cp	r22, r18
     b08:	73 07       	cpc	r23, r19
     b0a:	84 07       	cpc	r24, r20
     b0c:	ba 07       	cpc	r27, r26
     b0e:	20 f0       	brcs	.+8      	; 0xb18 <__divsf3_pse+0xaa>
     b10:	62 1b       	sub	r22, r18
     b12:	73 0b       	sbc	r23, r19
     b14:	84 0b       	sbc	r24, r20
     b16:	ba 0b       	sbc	r27, r26
     b18:	ee 1f       	adc	r30, r30
     b1a:	88 f7       	brcc	.-30     	; 0xafe <__divsf3_pse+0x90>
     b1c:	e0 95       	com	r30
     b1e:	08 95       	ret

00000b20 <__fixunssfsi>:
     b20:	98 d0       	rcall	.+304    	; 0xc52 <__fp_splitA>
     b22:	88 f0       	brcs	.+34     	; 0xb46 <__fixunssfsi+0x26>
     b24:	9f 57       	subi	r25, 0x7F	; 127
     b26:	90 f0       	brcs	.+36     	; 0xb4c <__fixunssfsi+0x2c>
     b28:	b9 2f       	mov	r27, r25
     b2a:	99 27       	eor	r25, r25
     b2c:	b7 51       	subi	r27, 0x17	; 23
     b2e:	a0 f0       	brcs	.+40     	; 0xb58 <__fixunssfsi+0x38>
     b30:	d1 f0       	breq	.+52     	; 0xb66 <__fixunssfsi+0x46>
     b32:	66 0f       	add	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	88 1f       	adc	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	1a f0       	brmi	.+6      	; 0xb42 <__fixunssfsi+0x22>
     b3c:	ba 95       	dec	r27
     b3e:	c9 f7       	brne	.-14     	; 0xb32 <__fixunssfsi+0x12>
     b40:	12 c0       	rjmp	.+36     	; 0xb66 <__fixunssfsi+0x46>
     b42:	b1 30       	cpi	r27, 0x01	; 1
     b44:	81 f0       	breq	.+32     	; 0xb66 <__fixunssfsi+0x46>
     b46:	9f d0       	rcall	.+318    	; 0xc86 <__fp_zero>
     b48:	b1 e0       	ldi	r27, 0x01	; 1
     b4a:	08 95       	ret
     b4c:	9c c0       	rjmp	.+312    	; 0xc86 <__fp_zero>
     b4e:	67 2f       	mov	r22, r23
     b50:	78 2f       	mov	r23, r24
     b52:	88 27       	eor	r24, r24
     b54:	b8 5f       	subi	r27, 0xF8	; 248
     b56:	39 f0       	breq	.+14     	; 0xb66 <__fixunssfsi+0x46>
     b58:	b9 3f       	cpi	r27, 0xF9	; 249
     b5a:	cc f3       	brlt	.-14     	; 0xb4e <__fixunssfsi+0x2e>
     b5c:	86 95       	lsr	r24
     b5e:	77 95       	ror	r23
     b60:	67 95       	ror	r22
     b62:	b3 95       	inc	r27
     b64:	d9 f7       	brne	.-10     	; 0xb5c <__fixunssfsi+0x3c>
     b66:	3e f4       	brtc	.+14     	; 0xb76 <__fixunssfsi+0x56>
     b68:	90 95       	com	r25
     b6a:	80 95       	com	r24
     b6c:	70 95       	com	r23
     b6e:	61 95       	neg	r22
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	8f 4f       	sbci	r24, 0xFF	; 255
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	08 95       	ret

00000b78 <__floatunsisf>:
     b78:	e8 94       	clt
     b7a:	09 c0       	rjmp	.+18     	; 0xb8e <__floatsisf+0x12>

00000b7c <__floatsisf>:
     b7c:	97 fb       	bst	r25, 7
     b7e:	3e f4       	brtc	.+14     	; 0xb8e <__floatsisf+0x12>
     b80:	90 95       	com	r25
     b82:	80 95       	com	r24
     b84:	70 95       	com	r23
     b86:	61 95       	neg	r22
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	8f 4f       	sbci	r24, 0xFF	; 255
     b8c:	9f 4f       	sbci	r25, 0xFF	; 255
     b8e:	99 23       	and	r25, r25
     b90:	a9 f0       	breq	.+42     	; 0xbbc <__floatsisf+0x40>
     b92:	f9 2f       	mov	r31, r25
     b94:	96 e9       	ldi	r25, 0x96	; 150
     b96:	bb 27       	eor	r27, r27
     b98:	93 95       	inc	r25
     b9a:	f6 95       	lsr	r31
     b9c:	87 95       	ror	r24
     b9e:	77 95       	ror	r23
     ba0:	67 95       	ror	r22
     ba2:	b7 95       	ror	r27
     ba4:	f1 11       	cpse	r31, r1
     ba6:	f8 cf       	rjmp	.-16     	; 0xb98 <__floatsisf+0x1c>
     ba8:	fa f4       	brpl	.+62     	; 0xbe8 <__floatsisf+0x6c>
     baa:	bb 0f       	add	r27, r27
     bac:	11 f4       	brne	.+4      	; 0xbb2 <__floatsisf+0x36>
     bae:	60 ff       	sbrs	r22, 0
     bb0:	1b c0       	rjmp	.+54     	; 0xbe8 <__floatsisf+0x6c>
     bb2:	6f 5f       	subi	r22, 0xFF	; 255
     bb4:	7f 4f       	sbci	r23, 0xFF	; 255
     bb6:	8f 4f       	sbci	r24, 0xFF	; 255
     bb8:	9f 4f       	sbci	r25, 0xFF	; 255
     bba:	16 c0       	rjmp	.+44     	; 0xbe8 <__floatsisf+0x6c>
     bbc:	88 23       	and	r24, r24
     bbe:	11 f0       	breq	.+4      	; 0xbc4 <__floatsisf+0x48>
     bc0:	96 e9       	ldi	r25, 0x96	; 150
     bc2:	11 c0       	rjmp	.+34     	; 0xbe6 <__floatsisf+0x6a>
     bc4:	77 23       	and	r23, r23
     bc6:	21 f0       	breq	.+8      	; 0xbd0 <__floatsisf+0x54>
     bc8:	9e e8       	ldi	r25, 0x8E	; 142
     bca:	87 2f       	mov	r24, r23
     bcc:	76 2f       	mov	r23, r22
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__floatsisf+0x5e>
     bd0:	66 23       	and	r22, r22
     bd2:	71 f0       	breq	.+28     	; 0xbf0 <__floatsisf+0x74>
     bd4:	96 e8       	ldi	r25, 0x86	; 134
     bd6:	86 2f       	mov	r24, r22
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	2a f0       	brmi	.+10     	; 0xbe8 <__floatsisf+0x6c>
     bde:	9a 95       	dec	r25
     be0:	66 0f       	add	r22, r22
     be2:	77 1f       	adc	r23, r23
     be4:	88 1f       	adc	r24, r24
     be6:	da f7       	brpl	.-10     	; 0xbde <__floatsisf+0x62>
     be8:	88 0f       	add	r24, r24
     bea:	96 95       	lsr	r25
     bec:	87 95       	ror	r24
     bee:	97 f9       	bld	r25, 7
     bf0:	08 95       	ret

00000bf2 <__fp_inf>:
     bf2:	97 f9       	bld	r25, 7
     bf4:	9f 67       	ori	r25, 0x7F	; 127
     bf6:	80 e8       	ldi	r24, 0x80	; 128
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	08 95       	ret

00000bfe <__fp_nan>:
     bfe:	9f ef       	ldi	r25, 0xFF	; 255
     c00:	80 ec       	ldi	r24, 0xC0	; 192
     c02:	08 95       	ret

00000c04 <__fp_pscA>:
     c04:	00 24       	eor	r0, r0
     c06:	0a 94       	dec	r0
     c08:	16 16       	cp	r1, r22
     c0a:	17 06       	cpc	r1, r23
     c0c:	18 06       	cpc	r1, r24
     c0e:	09 06       	cpc	r0, r25
     c10:	08 95       	ret

00000c12 <__fp_pscB>:
     c12:	00 24       	eor	r0, r0
     c14:	0a 94       	dec	r0
     c16:	12 16       	cp	r1, r18
     c18:	13 06       	cpc	r1, r19
     c1a:	14 06       	cpc	r1, r20
     c1c:	05 06       	cpc	r0, r21
     c1e:	08 95       	ret

00000c20 <__fp_round>:
     c20:	09 2e       	mov	r0, r25
     c22:	03 94       	inc	r0
     c24:	00 0c       	add	r0, r0
     c26:	11 f4       	brne	.+4      	; 0xc2c <__fp_round+0xc>
     c28:	88 23       	and	r24, r24
     c2a:	52 f0       	brmi	.+20     	; 0xc40 <__fp_round+0x20>
     c2c:	bb 0f       	add	r27, r27
     c2e:	40 f4       	brcc	.+16     	; 0xc40 <__fp_round+0x20>
     c30:	bf 2b       	or	r27, r31
     c32:	11 f4       	brne	.+4      	; 0xc38 <__fp_round+0x18>
     c34:	60 ff       	sbrs	r22, 0
     c36:	04 c0       	rjmp	.+8      	; 0xc40 <__fp_round+0x20>
     c38:	6f 5f       	subi	r22, 0xFF	; 255
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
     c3c:	8f 4f       	sbci	r24, 0xFF	; 255
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	08 95       	ret

00000c42 <__fp_split3>:
     c42:	57 fd       	sbrc	r21, 7
     c44:	90 58       	subi	r25, 0x80	; 128
     c46:	44 0f       	add	r20, r20
     c48:	55 1f       	adc	r21, r21
     c4a:	59 f0       	breq	.+22     	; 0xc62 <__fp_splitA+0x10>
     c4c:	5f 3f       	cpi	r21, 0xFF	; 255
     c4e:	71 f0       	breq	.+28     	; 0xc6c <__fp_splitA+0x1a>
     c50:	47 95       	ror	r20

00000c52 <__fp_splitA>:
     c52:	88 0f       	add	r24, r24
     c54:	97 fb       	bst	r25, 7
     c56:	99 1f       	adc	r25, r25
     c58:	61 f0       	breq	.+24     	; 0xc72 <__fp_splitA+0x20>
     c5a:	9f 3f       	cpi	r25, 0xFF	; 255
     c5c:	79 f0       	breq	.+30     	; 0xc7c <__fp_splitA+0x2a>
     c5e:	87 95       	ror	r24
     c60:	08 95       	ret
     c62:	12 16       	cp	r1, r18
     c64:	13 06       	cpc	r1, r19
     c66:	14 06       	cpc	r1, r20
     c68:	55 1f       	adc	r21, r21
     c6a:	f2 cf       	rjmp	.-28     	; 0xc50 <__fp_split3+0xe>
     c6c:	46 95       	lsr	r20
     c6e:	f1 df       	rcall	.-30     	; 0xc52 <__fp_splitA>
     c70:	08 c0       	rjmp	.+16     	; 0xc82 <__fp_splitA+0x30>
     c72:	16 16       	cp	r1, r22
     c74:	17 06       	cpc	r1, r23
     c76:	18 06       	cpc	r1, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	f1 cf       	rjmp	.-30     	; 0xc5e <__fp_splitA+0xc>
     c7c:	86 95       	lsr	r24
     c7e:	71 05       	cpc	r23, r1
     c80:	61 05       	cpc	r22, r1
     c82:	08 94       	sec
     c84:	08 95       	ret

00000c86 <__fp_zero>:
     c86:	e8 94       	clt

00000c88 <__fp_szero>:
     c88:	bb 27       	eor	r27, r27
     c8a:	66 27       	eor	r22, r22
     c8c:	77 27       	eor	r23, r23
     c8e:	cb 01       	movw	r24, r22
     c90:	97 f9       	bld	r25, 7
     c92:	08 95       	ret

00000c94 <__tablejump2__>:
     c94:	ee 0f       	add	r30, r30
     c96:	ff 1f       	adc	r31, r31
     c98:	00 24       	eor	r0, r0
     c9a:	00 1c       	adc	r0, r0
     c9c:	0b be       	out	0x3b, r0	; 59
     c9e:	07 90       	elpm	r0, Z+
     ca0:	f6 91       	elpm	r31, Z
     ca2:	e0 2d       	mov	r30, r0
     ca4:	09 94       	ijmp

00000ca6 <vsnprintf>:
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	2e 97       	sbiw	r28, 0x0e	; 14
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	8c 01       	movw	r16, r24
     cc0:	fa 01       	movw	r30, r20
     cc2:	86 e0       	ldi	r24, 0x06	; 6
     cc4:	8c 83       	std	Y+4, r24	; 0x04
     cc6:	1a 83       	std	Y+2, r17	; 0x02
     cc8:	09 83       	std	Y+1, r16	; 0x01
     cca:	77 ff       	sbrs	r23, 7
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vsnprintf+0x2c>
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	70 e8       	ldi	r23, 0x80	; 128
     cd2:	cb 01       	movw	r24, r22
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	9e 83       	std	Y+6, r25	; 0x06
     cd8:	8d 83       	std	Y+5, r24	; 0x05
     cda:	a9 01       	movw	r20, r18
     cdc:	bf 01       	movw	r22, r30
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	19 d0       	rcall	.+50     	; 0xd16 <vfprintf>
     ce4:	4d 81       	ldd	r20, Y+5	; 0x05
     ce6:	5e 81       	ldd	r21, Y+6	; 0x06
     ce8:	57 fd       	sbrc	r21, 7
     cea:	0a c0       	rjmp	.+20     	; 0xd00 <vsnprintf+0x5a>
     cec:	2f 81       	ldd	r18, Y+7	; 0x07
     cee:	38 85       	ldd	r19, Y+8	; 0x08
     cf0:	42 17       	cp	r20, r18
     cf2:	53 07       	cpc	r21, r19
     cf4:	0c f4       	brge	.+2      	; 0xcf8 <vsnprintf+0x52>
     cf6:	9a 01       	movw	r18, r20
     cf8:	f8 01       	movw	r30, r16
     cfa:	e2 0f       	add	r30, r18
     cfc:	f3 1f       	adc	r31, r19
     cfe:	10 82       	st	Z, r1
     d00:	2e 96       	adiw	r28, 0x0e	; 14
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <vfprintf>:
     d16:	2f 92       	push	r2
     d18:	3f 92       	push	r3
     d1a:	4f 92       	push	r4
     d1c:	5f 92       	push	r5
     d1e:	6f 92       	push	r6
     d20:	7f 92       	push	r7
     d22:	8f 92       	push	r8
     d24:	9f 92       	push	r9
     d26:	af 92       	push	r10
     d28:	bf 92       	push	r11
     d2a:	cf 92       	push	r12
     d2c:	df 92       	push	r13
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	2b 97       	sbiw	r28, 0x0b	; 11
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	6c 01       	movw	r12, r24
     d4c:	7b 01       	movw	r14, r22
     d4e:	8a 01       	movw	r16, r20
     d50:	fc 01       	movw	r30, r24
     d52:	17 82       	std	Z+7, r1	; 0x07
     d54:	16 82       	std	Z+6, r1	; 0x06
     d56:	83 81       	ldd	r24, Z+3	; 0x03
     d58:	81 ff       	sbrs	r24, 1
     d5a:	bf c1       	rjmp	.+894    	; 0x10da <vfprintf+0x3c4>
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	3c 01       	movw	r6, r24
     d62:	f6 01       	movw	r30, r12
     d64:	93 81       	ldd	r25, Z+3	; 0x03
     d66:	f7 01       	movw	r30, r14
     d68:	93 fd       	sbrc	r25, 3
     d6a:	85 91       	lpm	r24, Z+
     d6c:	93 ff       	sbrs	r25, 3
     d6e:	81 91       	ld	r24, Z+
     d70:	7f 01       	movw	r14, r30
     d72:	88 23       	and	r24, r24
     d74:	09 f4       	brne	.+2      	; 0xd78 <vfprintf+0x62>
     d76:	ad c1       	rjmp	.+858    	; 0x10d2 <vfprintf+0x3bc>
     d78:	85 32       	cpi	r24, 0x25	; 37
     d7a:	39 f4       	brne	.+14     	; 0xd8a <vfprintf+0x74>
     d7c:	93 fd       	sbrc	r25, 3
     d7e:	85 91       	lpm	r24, Z+
     d80:	93 ff       	sbrs	r25, 3
     d82:	81 91       	ld	r24, Z+
     d84:	7f 01       	movw	r14, r30
     d86:	85 32       	cpi	r24, 0x25	; 37
     d88:	21 f4       	brne	.+8      	; 0xd92 <vfprintf+0x7c>
     d8a:	b6 01       	movw	r22, r12
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	d6 d1       	rcall	.+940    	; 0x113c <fputc>
     d90:	e8 cf       	rjmp	.-48     	; 0xd62 <vfprintf+0x4c>
     d92:	91 2c       	mov	r9, r1
     d94:	21 2c       	mov	r2, r1
     d96:	31 2c       	mov	r3, r1
     d98:	ff e1       	ldi	r31, 0x1F	; 31
     d9a:	f3 15       	cp	r31, r3
     d9c:	d8 f0       	brcs	.+54     	; 0xdd4 <vfprintf+0xbe>
     d9e:	8b 32       	cpi	r24, 0x2B	; 43
     da0:	79 f0       	breq	.+30     	; 0xdc0 <vfprintf+0xaa>
     da2:	38 f4       	brcc	.+14     	; 0xdb2 <vfprintf+0x9c>
     da4:	80 32       	cpi	r24, 0x20	; 32
     da6:	79 f0       	breq	.+30     	; 0xdc6 <vfprintf+0xb0>
     da8:	83 32       	cpi	r24, 0x23	; 35
     daa:	a1 f4       	brne	.+40     	; 0xdd4 <vfprintf+0xbe>
     dac:	23 2d       	mov	r18, r3
     dae:	20 61       	ori	r18, 0x10	; 16
     db0:	1d c0       	rjmp	.+58     	; 0xdec <vfprintf+0xd6>
     db2:	8d 32       	cpi	r24, 0x2D	; 45
     db4:	61 f0       	breq	.+24     	; 0xdce <vfprintf+0xb8>
     db6:	80 33       	cpi	r24, 0x30	; 48
     db8:	69 f4       	brne	.+26     	; 0xdd4 <vfprintf+0xbe>
     dba:	23 2d       	mov	r18, r3
     dbc:	21 60       	ori	r18, 0x01	; 1
     dbe:	16 c0       	rjmp	.+44     	; 0xdec <vfprintf+0xd6>
     dc0:	83 2d       	mov	r24, r3
     dc2:	82 60       	ori	r24, 0x02	; 2
     dc4:	38 2e       	mov	r3, r24
     dc6:	e3 2d       	mov	r30, r3
     dc8:	e4 60       	ori	r30, 0x04	; 4
     dca:	3e 2e       	mov	r3, r30
     dcc:	2a c0       	rjmp	.+84     	; 0xe22 <vfprintf+0x10c>
     dce:	f3 2d       	mov	r31, r3
     dd0:	f8 60       	ori	r31, 0x08	; 8
     dd2:	1d c0       	rjmp	.+58     	; 0xe0e <vfprintf+0xf8>
     dd4:	37 fc       	sbrc	r3, 7
     dd6:	2d c0       	rjmp	.+90     	; 0xe32 <vfprintf+0x11c>
     dd8:	20 ed       	ldi	r18, 0xD0	; 208
     dda:	28 0f       	add	r18, r24
     ddc:	2a 30       	cpi	r18, 0x0A	; 10
     dde:	40 f0       	brcs	.+16     	; 0xdf0 <vfprintf+0xda>
     de0:	8e 32       	cpi	r24, 0x2E	; 46
     de2:	b9 f4       	brne	.+46     	; 0xe12 <vfprintf+0xfc>
     de4:	36 fc       	sbrc	r3, 6
     de6:	75 c1       	rjmp	.+746    	; 0x10d2 <vfprintf+0x3bc>
     de8:	23 2d       	mov	r18, r3
     dea:	20 64       	ori	r18, 0x40	; 64
     dec:	32 2e       	mov	r3, r18
     dee:	19 c0       	rjmp	.+50     	; 0xe22 <vfprintf+0x10c>
     df0:	36 fe       	sbrs	r3, 6
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <vfprintf+0xea>
     df4:	8a e0       	ldi	r24, 0x0A	; 10
     df6:	98 9e       	mul	r9, r24
     df8:	20 0d       	add	r18, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	92 2e       	mov	r9, r18
     dfe:	11 c0       	rjmp	.+34     	; 0xe22 <vfprintf+0x10c>
     e00:	ea e0       	ldi	r30, 0x0A	; 10
     e02:	2e 9e       	mul	r2, r30
     e04:	20 0d       	add	r18, r0
     e06:	11 24       	eor	r1, r1
     e08:	22 2e       	mov	r2, r18
     e0a:	f3 2d       	mov	r31, r3
     e0c:	f0 62       	ori	r31, 0x20	; 32
     e0e:	3f 2e       	mov	r3, r31
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <vfprintf+0x10c>
     e12:	8c 36       	cpi	r24, 0x6C	; 108
     e14:	21 f4       	brne	.+8      	; 0xe1e <vfprintf+0x108>
     e16:	83 2d       	mov	r24, r3
     e18:	80 68       	ori	r24, 0x80	; 128
     e1a:	38 2e       	mov	r3, r24
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <vfprintf+0x10c>
     e1e:	88 36       	cpi	r24, 0x68	; 104
     e20:	41 f4       	brne	.+16     	; 0xe32 <vfprintf+0x11c>
     e22:	f7 01       	movw	r30, r14
     e24:	93 fd       	sbrc	r25, 3
     e26:	85 91       	lpm	r24, Z+
     e28:	93 ff       	sbrs	r25, 3
     e2a:	81 91       	ld	r24, Z+
     e2c:	7f 01       	movw	r14, r30
     e2e:	81 11       	cpse	r24, r1
     e30:	b3 cf       	rjmp	.-154    	; 0xd98 <vfprintf+0x82>
     e32:	98 2f       	mov	r25, r24
     e34:	9f 7d       	andi	r25, 0xDF	; 223
     e36:	95 54       	subi	r25, 0x45	; 69
     e38:	93 30       	cpi	r25, 0x03	; 3
     e3a:	28 f4       	brcc	.+10     	; 0xe46 <vfprintf+0x130>
     e3c:	0c 5f       	subi	r16, 0xFC	; 252
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
     e40:	9f e3       	ldi	r25, 0x3F	; 63
     e42:	99 83       	std	Y+1, r25	; 0x01
     e44:	0d c0       	rjmp	.+26     	; 0xe60 <vfprintf+0x14a>
     e46:	83 36       	cpi	r24, 0x63	; 99
     e48:	31 f0       	breq	.+12     	; 0xe56 <vfprintf+0x140>
     e4a:	83 37       	cpi	r24, 0x73	; 115
     e4c:	71 f0       	breq	.+28     	; 0xe6a <vfprintf+0x154>
     e4e:	83 35       	cpi	r24, 0x53	; 83
     e50:	09 f0       	breq	.+2      	; 0xe54 <vfprintf+0x13e>
     e52:	55 c0       	rjmp	.+170    	; 0xefe <vfprintf+0x1e8>
     e54:	20 c0       	rjmp	.+64     	; 0xe96 <vfprintf+0x180>
     e56:	f8 01       	movw	r30, r16
     e58:	80 81       	ld	r24, Z
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	0e 5f       	subi	r16, 0xFE	; 254
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	88 24       	eor	r8, r8
     e62:	83 94       	inc	r8
     e64:	91 2c       	mov	r9, r1
     e66:	53 01       	movw	r10, r6
     e68:	12 c0       	rjmp	.+36     	; 0xe8e <vfprintf+0x178>
     e6a:	28 01       	movw	r4, r16
     e6c:	f2 e0       	ldi	r31, 0x02	; 2
     e6e:	4f 0e       	add	r4, r31
     e70:	51 1c       	adc	r5, r1
     e72:	f8 01       	movw	r30, r16
     e74:	a0 80       	ld	r10, Z
     e76:	b1 80       	ldd	r11, Z+1	; 0x01
     e78:	36 fe       	sbrs	r3, 6
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <vfprintf+0x16c>
     e7c:	69 2d       	mov	r22, r9
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <vfprintf+0x170>
     e82:	6f ef       	ldi	r22, 0xFF	; 255
     e84:	7f ef       	ldi	r23, 0xFF	; 255
     e86:	c5 01       	movw	r24, r10
     e88:	4e d1       	rcall	.+668    	; 0x1126 <strnlen>
     e8a:	4c 01       	movw	r8, r24
     e8c:	82 01       	movw	r16, r4
     e8e:	f3 2d       	mov	r31, r3
     e90:	ff 77       	andi	r31, 0x7F	; 127
     e92:	3f 2e       	mov	r3, r31
     e94:	15 c0       	rjmp	.+42     	; 0xec0 <vfprintf+0x1aa>
     e96:	28 01       	movw	r4, r16
     e98:	22 e0       	ldi	r18, 0x02	; 2
     e9a:	42 0e       	add	r4, r18
     e9c:	51 1c       	adc	r5, r1
     e9e:	f8 01       	movw	r30, r16
     ea0:	a0 80       	ld	r10, Z
     ea2:	b1 80       	ldd	r11, Z+1	; 0x01
     ea4:	36 fe       	sbrs	r3, 6
     ea6:	03 c0       	rjmp	.+6      	; 0xeae <vfprintf+0x198>
     ea8:	69 2d       	mov	r22, r9
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x19c>
     eae:	6f ef       	ldi	r22, 0xFF	; 255
     eb0:	7f ef       	ldi	r23, 0xFF	; 255
     eb2:	c5 01       	movw	r24, r10
     eb4:	2d d1       	rcall	.+602    	; 0x1110 <strnlen_P>
     eb6:	4c 01       	movw	r8, r24
     eb8:	f3 2d       	mov	r31, r3
     eba:	f0 68       	ori	r31, 0x80	; 128
     ebc:	3f 2e       	mov	r3, r31
     ebe:	82 01       	movw	r16, r4
     ec0:	33 fc       	sbrc	r3, 3
     ec2:	19 c0       	rjmp	.+50     	; 0xef6 <vfprintf+0x1e0>
     ec4:	82 2d       	mov	r24, r2
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	88 16       	cp	r8, r24
     eca:	99 06       	cpc	r9, r25
     ecc:	a0 f4       	brcc	.+40     	; 0xef6 <vfprintf+0x1e0>
     ece:	b6 01       	movw	r22, r12
     ed0:	80 e2       	ldi	r24, 0x20	; 32
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	33 d1       	rcall	.+614    	; 0x113c <fputc>
     ed6:	2a 94       	dec	r2
     ed8:	f5 cf       	rjmp	.-22     	; 0xec4 <vfprintf+0x1ae>
     eda:	f5 01       	movw	r30, r10
     edc:	37 fc       	sbrc	r3, 7
     ede:	85 91       	lpm	r24, Z+
     ee0:	37 fe       	sbrs	r3, 7
     ee2:	81 91       	ld	r24, Z+
     ee4:	5f 01       	movw	r10, r30
     ee6:	b6 01       	movw	r22, r12
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	28 d1       	rcall	.+592    	; 0x113c <fputc>
     eec:	21 10       	cpse	r2, r1
     eee:	2a 94       	dec	r2
     ef0:	21 e0       	ldi	r18, 0x01	; 1
     ef2:	82 1a       	sub	r8, r18
     ef4:	91 08       	sbc	r9, r1
     ef6:	81 14       	cp	r8, r1
     ef8:	91 04       	cpc	r9, r1
     efa:	79 f7       	brne	.-34     	; 0xeda <vfprintf+0x1c4>
     efc:	e1 c0       	rjmp	.+450    	; 0x10c0 <vfprintf+0x3aa>
     efe:	84 36       	cpi	r24, 0x64	; 100
     f00:	11 f0       	breq	.+4      	; 0xf06 <vfprintf+0x1f0>
     f02:	89 36       	cpi	r24, 0x69	; 105
     f04:	39 f5       	brne	.+78     	; 0xf54 <vfprintf+0x23e>
     f06:	f8 01       	movw	r30, r16
     f08:	37 fe       	sbrs	r3, 7
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <vfprintf+0x204>
     f0c:	60 81       	ld	r22, Z
     f0e:	71 81       	ldd	r23, Z+1	; 0x01
     f10:	82 81       	ldd	r24, Z+2	; 0x02
     f12:	93 81       	ldd	r25, Z+3	; 0x03
     f14:	0c 5f       	subi	r16, 0xFC	; 252
     f16:	1f 4f       	sbci	r17, 0xFF	; 255
     f18:	08 c0       	rjmp	.+16     	; 0xf2a <vfprintf+0x214>
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	07 2e       	mov	r0, r23
     f20:	00 0c       	add	r0, r0
     f22:	88 0b       	sbc	r24, r24
     f24:	99 0b       	sbc	r25, r25
     f26:	0e 5f       	subi	r16, 0xFE	; 254
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	f3 2d       	mov	r31, r3
     f2c:	ff 76       	andi	r31, 0x6F	; 111
     f2e:	3f 2e       	mov	r3, r31
     f30:	97 ff       	sbrs	r25, 7
     f32:	09 c0       	rjmp	.+18     	; 0xf46 <vfprintf+0x230>
     f34:	90 95       	com	r25
     f36:	80 95       	com	r24
     f38:	70 95       	com	r23
     f3a:	61 95       	neg	r22
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	8f 4f       	sbci	r24, 0xFF	; 255
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	f0 68       	ori	r31, 0x80	; 128
     f44:	3f 2e       	mov	r3, r31
     f46:	2a e0       	ldi	r18, 0x0A	; 10
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	a3 01       	movw	r20, r6
     f4c:	33 d1       	rcall	.+614    	; 0x11b4 <__ultoa_invert>
     f4e:	88 2e       	mov	r8, r24
     f50:	86 18       	sub	r8, r6
     f52:	44 c0       	rjmp	.+136    	; 0xfdc <vfprintf+0x2c6>
     f54:	85 37       	cpi	r24, 0x75	; 117
     f56:	31 f4       	brne	.+12     	; 0xf64 <vfprintf+0x24e>
     f58:	23 2d       	mov	r18, r3
     f5a:	2f 7e       	andi	r18, 0xEF	; 239
     f5c:	b2 2e       	mov	r11, r18
     f5e:	2a e0       	ldi	r18, 0x0A	; 10
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	25 c0       	rjmp	.+74     	; 0xfae <vfprintf+0x298>
     f64:	93 2d       	mov	r25, r3
     f66:	99 7f       	andi	r25, 0xF9	; 249
     f68:	b9 2e       	mov	r11, r25
     f6a:	8f 36       	cpi	r24, 0x6F	; 111
     f6c:	c1 f0       	breq	.+48     	; 0xf9e <vfprintf+0x288>
     f6e:	18 f4       	brcc	.+6      	; 0xf76 <vfprintf+0x260>
     f70:	88 35       	cpi	r24, 0x58	; 88
     f72:	79 f0       	breq	.+30     	; 0xf92 <vfprintf+0x27c>
     f74:	ae c0       	rjmp	.+348    	; 0x10d2 <vfprintf+0x3bc>
     f76:	80 37       	cpi	r24, 0x70	; 112
     f78:	19 f0       	breq	.+6      	; 0xf80 <vfprintf+0x26a>
     f7a:	88 37       	cpi	r24, 0x78	; 120
     f7c:	21 f0       	breq	.+8      	; 0xf86 <vfprintf+0x270>
     f7e:	a9 c0       	rjmp	.+338    	; 0x10d2 <vfprintf+0x3bc>
     f80:	e9 2f       	mov	r30, r25
     f82:	e0 61       	ori	r30, 0x10	; 16
     f84:	be 2e       	mov	r11, r30
     f86:	b4 fe       	sbrs	r11, 4
     f88:	0d c0       	rjmp	.+26     	; 0xfa4 <vfprintf+0x28e>
     f8a:	fb 2d       	mov	r31, r11
     f8c:	f4 60       	ori	r31, 0x04	; 4
     f8e:	bf 2e       	mov	r11, r31
     f90:	09 c0       	rjmp	.+18     	; 0xfa4 <vfprintf+0x28e>
     f92:	34 fe       	sbrs	r3, 4
     f94:	0a c0       	rjmp	.+20     	; 0xfaa <vfprintf+0x294>
     f96:	29 2f       	mov	r18, r25
     f98:	26 60       	ori	r18, 0x06	; 6
     f9a:	b2 2e       	mov	r11, r18
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <vfprintf+0x294>
     f9e:	28 e0       	ldi	r18, 0x08	; 8
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	05 c0       	rjmp	.+10     	; 0xfae <vfprintf+0x298>
     fa4:	20 e1       	ldi	r18, 0x10	; 16
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <vfprintf+0x298>
     faa:	20 e1       	ldi	r18, 0x10	; 16
     fac:	32 e0       	ldi	r19, 0x02	; 2
     fae:	f8 01       	movw	r30, r16
     fb0:	b7 fe       	sbrs	r11, 7
     fb2:	07 c0       	rjmp	.+14     	; 0xfc2 <vfprintf+0x2ac>
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	0c 5f       	subi	r16, 0xFC	; 252
     fbe:	1f 4f       	sbci	r17, 0xFF	; 255
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <vfprintf+0x2b8>
     fc2:	60 81       	ld	r22, Z
     fc4:	71 81       	ldd	r23, Z+1	; 0x01
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 5f       	subi	r16, 0xFE	; 254
     fcc:	1f 4f       	sbci	r17, 0xFF	; 255
     fce:	a3 01       	movw	r20, r6
     fd0:	f1 d0       	rcall	.+482    	; 0x11b4 <__ultoa_invert>
     fd2:	88 2e       	mov	r8, r24
     fd4:	86 18       	sub	r8, r6
     fd6:	fb 2d       	mov	r31, r11
     fd8:	ff 77       	andi	r31, 0x7F	; 127
     fda:	3f 2e       	mov	r3, r31
     fdc:	36 fe       	sbrs	r3, 6
     fde:	0d c0       	rjmp	.+26     	; 0xffa <vfprintf+0x2e4>
     fe0:	23 2d       	mov	r18, r3
     fe2:	2e 7f       	andi	r18, 0xFE	; 254
     fe4:	a2 2e       	mov	r10, r18
     fe6:	89 14       	cp	r8, r9
     fe8:	58 f4       	brcc	.+22     	; 0x1000 <vfprintf+0x2ea>
     fea:	34 fe       	sbrs	r3, 4
     fec:	0b c0       	rjmp	.+22     	; 0x1004 <vfprintf+0x2ee>
     fee:	32 fc       	sbrc	r3, 2
     ff0:	09 c0       	rjmp	.+18     	; 0x1004 <vfprintf+0x2ee>
     ff2:	83 2d       	mov	r24, r3
     ff4:	8e 7e       	andi	r24, 0xEE	; 238
     ff6:	a8 2e       	mov	r10, r24
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <vfprintf+0x2ee>
     ffa:	b8 2c       	mov	r11, r8
     ffc:	a3 2c       	mov	r10, r3
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <vfprintf+0x2f0>
    1000:	b8 2c       	mov	r11, r8
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <vfprintf+0x2f0>
    1004:	b9 2c       	mov	r11, r9
    1006:	a4 fe       	sbrs	r10, 4
    1008:	0f c0       	rjmp	.+30     	; 0x1028 <vfprintf+0x312>
    100a:	fe 01       	movw	r30, r28
    100c:	e8 0d       	add	r30, r8
    100e:	f1 1d       	adc	r31, r1
    1010:	80 81       	ld	r24, Z
    1012:	80 33       	cpi	r24, 0x30	; 48
    1014:	21 f4       	brne	.+8      	; 0x101e <vfprintf+0x308>
    1016:	9a 2d       	mov	r25, r10
    1018:	99 7e       	andi	r25, 0xE9	; 233
    101a:	a9 2e       	mov	r10, r25
    101c:	09 c0       	rjmp	.+18     	; 0x1030 <vfprintf+0x31a>
    101e:	a2 fe       	sbrs	r10, 2
    1020:	06 c0       	rjmp	.+12     	; 0x102e <vfprintf+0x318>
    1022:	b3 94       	inc	r11
    1024:	b3 94       	inc	r11
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <vfprintf+0x31a>
    1028:	8a 2d       	mov	r24, r10
    102a:	86 78       	andi	r24, 0x86	; 134
    102c:	09 f0       	breq	.+2      	; 0x1030 <vfprintf+0x31a>
    102e:	b3 94       	inc	r11
    1030:	a3 fc       	sbrc	r10, 3
    1032:	10 c0       	rjmp	.+32     	; 0x1054 <vfprintf+0x33e>
    1034:	a0 fe       	sbrs	r10, 0
    1036:	06 c0       	rjmp	.+12     	; 0x1044 <vfprintf+0x32e>
    1038:	b2 14       	cp	r11, r2
    103a:	80 f4       	brcc	.+32     	; 0x105c <vfprintf+0x346>
    103c:	28 0c       	add	r2, r8
    103e:	92 2c       	mov	r9, r2
    1040:	9b 18       	sub	r9, r11
    1042:	0d c0       	rjmp	.+26     	; 0x105e <vfprintf+0x348>
    1044:	b2 14       	cp	r11, r2
    1046:	58 f4       	brcc	.+22     	; 0x105e <vfprintf+0x348>
    1048:	b6 01       	movw	r22, r12
    104a:	80 e2       	ldi	r24, 0x20	; 32
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	76 d0       	rcall	.+236    	; 0x113c <fputc>
    1050:	b3 94       	inc	r11
    1052:	f8 cf       	rjmp	.-16     	; 0x1044 <vfprintf+0x32e>
    1054:	b2 14       	cp	r11, r2
    1056:	18 f4       	brcc	.+6      	; 0x105e <vfprintf+0x348>
    1058:	2b 18       	sub	r2, r11
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <vfprintf+0x34a>
    105c:	98 2c       	mov	r9, r8
    105e:	21 2c       	mov	r2, r1
    1060:	a4 fe       	sbrs	r10, 4
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <vfprintf+0x36c>
    1064:	b6 01       	movw	r22, r12
    1066:	80 e3       	ldi	r24, 0x30	; 48
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	68 d0       	rcall	.+208    	; 0x113c <fputc>
    106c:	a2 fe       	sbrs	r10, 2
    106e:	16 c0       	rjmp	.+44     	; 0x109c <vfprintf+0x386>
    1070:	a1 fc       	sbrc	r10, 1
    1072:	03 c0       	rjmp	.+6      	; 0x107a <vfprintf+0x364>
    1074:	88 e7       	ldi	r24, 0x78	; 120
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 c0       	rjmp	.+4      	; 0x107e <vfprintf+0x368>
    107a:	88 e5       	ldi	r24, 0x58	; 88
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	b6 01       	movw	r22, r12
    1080:	0c c0       	rjmp	.+24     	; 0x109a <vfprintf+0x384>
    1082:	8a 2d       	mov	r24, r10
    1084:	86 78       	andi	r24, 0x86	; 134
    1086:	51 f0       	breq	.+20     	; 0x109c <vfprintf+0x386>
    1088:	a1 fe       	sbrs	r10, 1
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <vfprintf+0x37a>
    108c:	8b e2       	ldi	r24, 0x2B	; 43
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <vfprintf+0x37c>
    1090:	80 e2       	ldi	r24, 0x20	; 32
    1092:	a7 fc       	sbrc	r10, 7
    1094:	8d e2       	ldi	r24, 0x2D	; 45
    1096:	b6 01       	movw	r22, r12
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	50 d0       	rcall	.+160    	; 0x113c <fputc>
    109c:	89 14       	cp	r8, r9
    109e:	30 f4       	brcc	.+12     	; 0x10ac <vfprintf+0x396>
    10a0:	b6 01       	movw	r22, r12
    10a2:	80 e3       	ldi	r24, 0x30	; 48
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	4a d0       	rcall	.+148    	; 0x113c <fputc>
    10a8:	9a 94       	dec	r9
    10aa:	f8 cf       	rjmp	.-16     	; 0x109c <vfprintf+0x386>
    10ac:	8a 94       	dec	r8
    10ae:	f3 01       	movw	r30, r6
    10b0:	e8 0d       	add	r30, r8
    10b2:	f1 1d       	adc	r31, r1
    10b4:	80 81       	ld	r24, Z
    10b6:	b6 01       	movw	r22, r12
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	40 d0       	rcall	.+128    	; 0x113c <fputc>
    10bc:	81 10       	cpse	r8, r1
    10be:	f6 cf       	rjmp	.-20     	; 0x10ac <vfprintf+0x396>
    10c0:	22 20       	and	r2, r2
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <vfprintf+0x3b0>
    10c4:	4e ce       	rjmp	.-868    	; 0xd62 <vfprintf+0x4c>
    10c6:	b6 01       	movw	r22, r12
    10c8:	80 e2       	ldi	r24, 0x20	; 32
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	37 d0       	rcall	.+110    	; 0x113c <fputc>
    10ce:	2a 94       	dec	r2
    10d0:	f7 cf       	rjmp	.-18     	; 0x10c0 <vfprintf+0x3aa>
    10d2:	f6 01       	movw	r30, r12
    10d4:	86 81       	ldd	r24, Z+6	; 0x06
    10d6:	97 81       	ldd	r25, Z+7	; 0x07
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <vfprintf+0x3c8>
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	9f ef       	ldi	r25, 0xFF	; 255
    10de:	2b 96       	adiw	r28, 0x0b	; 11
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	cf 90       	pop	r12
    10fa:	bf 90       	pop	r11
    10fc:	af 90       	pop	r10
    10fe:	9f 90       	pop	r9
    1100:	8f 90       	pop	r8
    1102:	7f 90       	pop	r7
    1104:	6f 90       	pop	r6
    1106:	5f 90       	pop	r5
    1108:	4f 90       	pop	r4
    110a:	3f 90       	pop	r3
    110c:	2f 90       	pop	r2
    110e:	08 95       	ret

00001110 <strnlen_P>:
    1110:	fc 01       	movw	r30, r24
    1112:	05 90       	lpm	r0, Z+
    1114:	61 50       	subi	r22, 0x01	; 1
    1116:	70 40       	sbci	r23, 0x00	; 0
    1118:	01 10       	cpse	r0, r1
    111a:	d8 f7       	brcc	.-10     	; 0x1112 <strnlen_P+0x2>
    111c:	80 95       	com	r24
    111e:	90 95       	com	r25
    1120:	8e 0f       	add	r24, r30
    1122:	9f 1f       	adc	r25, r31
    1124:	08 95       	ret

00001126 <strnlen>:
    1126:	fc 01       	movw	r30, r24
    1128:	61 50       	subi	r22, 0x01	; 1
    112a:	70 40       	sbci	r23, 0x00	; 0
    112c:	01 90       	ld	r0, Z+
    112e:	01 10       	cpse	r0, r1
    1130:	d8 f7       	brcc	.-10     	; 0x1128 <strnlen+0x2>
    1132:	80 95       	com	r24
    1134:	90 95       	com	r25
    1136:	8e 0f       	add	r24, r30
    1138:	9f 1f       	adc	r25, r31
    113a:	08 95       	ret

0000113c <fputc>:
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	fb 01       	movw	r30, r22
    1146:	23 81       	ldd	r18, Z+3	; 0x03
    1148:	21 fd       	sbrc	r18, 1
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <fputc+0x16>
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	9f ef       	ldi	r25, 0xFF	; 255
    1150:	2c c0       	rjmp	.+88     	; 0x11aa <fputc+0x6e>
    1152:	22 ff       	sbrs	r18, 2
    1154:	16 c0       	rjmp	.+44     	; 0x1182 <fputc+0x46>
    1156:	46 81       	ldd	r20, Z+6	; 0x06
    1158:	57 81       	ldd	r21, Z+7	; 0x07
    115a:	24 81       	ldd	r18, Z+4	; 0x04
    115c:	35 81       	ldd	r19, Z+5	; 0x05
    115e:	42 17       	cp	r20, r18
    1160:	53 07       	cpc	r21, r19
    1162:	44 f4       	brge	.+16     	; 0x1174 <fputc+0x38>
    1164:	a0 81       	ld	r26, Z
    1166:	b1 81       	ldd	r27, Z+1	; 0x01
    1168:	9d 01       	movw	r18, r26
    116a:	2f 5f       	subi	r18, 0xFF	; 255
    116c:	3f 4f       	sbci	r19, 0xFF	; 255
    116e:	31 83       	std	Z+1, r19	; 0x01
    1170:	20 83       	st	Z, r18
    1172:	8c 93       	st	X, r24
    1174:	26 81       	ldd	r18, Z+6	; 0x06
    1176:	37 81       	ldd	r19, Z+7	; 0x07
    1178:	2f 5f       	subi	r18, 0xFF	; 255
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	37 83       	std	Z+7, r19	; 0x07
    117e:	26 83       	std	Z+6, r18	; 0x06
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <fputc+0x6e>
    1182:	8b 01       	movw	r16, r22
    1184:	ec 01       	movw	r28, r24
    1186:	fb 01       	movw	r30, r22
    1188:	00 84       	ldd	r0, Z+8	; 0x08
    118a:	f1 85       	ldd	r31, Z+9	; 0x09
    118c:	e0 2d       	mov	r30, r0
    118e:	09 95       	icall
    1190:	89 2b       	or	r24, r25
    1192:	e1 f6       	brne	.-72     	; 0x114c <fputc+0x10>
    1194:	d8 01       	movw	r26, r16
    1196:	16 96       	adiw	r26, 0x06	; 6
    1198:	8d 91       	ld	r24, X+
    119a:	9c 91       	ld	r25, X
    119c:	17 97       	sbiw	r26, 0x07	; 7
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	17 96       	adiw	r26, 0x07	; 7
    11a2:	9c 93       	st	X, r25
    11a4:	8e 93       	st	-X, r24
    11a6:	16 97       	sbiw	r26, 0x06	; 6
    11a8:	ce 01       	movw	r24, r28
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	08 95       	ret

000011b4 <__ultoa_invert>:
    11b4:	fa 01       	movw	r30, r20
    11b6:	aa 27       	eor	r26, r26
    11b8:	28 30       	cpi	r18, 0x08	; 8
    11ba:	51 f1       	breq	.+84     	; 0x1210 <__ultoa_invert+0x5c>
    11bc:	20 31       	cpi	r18, 0x10	; 16
    11be:	81 f1       	breq	.+96     	; 0x1220 <__ultoa_invert+0x6c>
    11c0:	e8 94       	clt
    11c2:	6f 93       	push	r22
    11c4:	6e 7f       	andi	r22, 0xFE	; 254
    11c6:	6e 5f       	subi	r22, 0xFE	; 254
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	af 4f       	sbci	r26, 0xFF	; 255
    11d0:	b1 e0       	ldi	r27, 0x01	; 1
    11d2:	3e d0       	rcall	.+124    	; 0x1250 <__ultoa_invert+0x9c>
    11d4:	b4 e0       	ldi	r27, 0x04	; 4
    11d6:	3c d0       	rcall	.+120    	; 0x1250 <__ultoa_invert+0x9c>
    11d8:	67 0f       	add	r22, r23
    11da:	78 1f       	adc	r23, r24
    11dc:	89 1f       	adc	r24, r25
    11de:	9a 1f       	adc	r25, r26
    11e0:	a1 1d       	adc	r26, r1
    11e2:	68 0f       	add	r22, r24
    11e4:	79 1f       	adc	r23, r25
    11e6:	8a 1f       	adc	r24, r26
    11e8:	91 1d       	adc	r25, r1
    11ea:	a1 1d       	adc	r26, r1
    11ec:	6a 0f       	add	r22, r26
    11ee:	71 1d       	adc	r23, r1
    11f0:	81 1d       	adc	r24, r1
    11f2:	91 1d       	adc	r25, r1
    11f4:	a1 1d       	adc	r26, r1
    11f6:	20 d0       	rcall	.+64     	; 0x1238 <__ultoa_invert+0x84>
    11f8:	09 f4       	brne	.+2      	; 0x11fc <__ultoa_invert+0x48>
    11fa:	68 94       	set
    11fc:	3f 91       	pop	r19
    11fe:	2a e0       	ldi	r18, 0x0A	; 10
    1200:	26 9f       	mul	r18, r22
    1202:	11 24       	eor	r1, r1
    1204:	30 19       	sub	r19, r0
    1206:	30 5d       	subi	r19, 0xD0	; 208
    1208:	31 93       	st	Z+, r19
    120a:	de f6       	brtc	.-74     	; 0x11c2 <__ultoa_invert+0xe>
    120c:	cf 01       	movw	r24, r30
    120e:	08 95       	ret
    1210:	46 2f       	mov	r20, r22
    1212:	47 70       	andi	r20, 0x07	; 7
    1214:	40 5d       	subi	r20, 0xD0	; 208
    1216:	41 93       	st	Z+, r20
    1218:	b3 e0       	ldi	r27, 0x03	; 3
    121a:	0f d0       	rcall	.+30     	; 0x123a <__ultoa_invert+0x86>
    121c:	c9 f7       	brne	.-14     	; 0x1210 <__ultoa_invert+0x5c>
    121e:	f6 cf       	rjmp	.-20     	; 0x120c <__ultoa_invert+0x58>
    1220:	46 2f       	mov	r20, r22
    1222:	4f 70       	andi	r20, 0x0F	; 15
    1224:	40 5d       	subi	r20, 0xD0	; 208
    1226:	4a 33       	cpi	r20, 0x3A	; 58
    1228:	18 f0       	brcs	.+6      	; 0x1230 <__ultoa_invert+0x7c>
    122a:	49 5d       	subi	r20, 0xD9	; 217
    122c:	31 fd       	sbrc	r19, 1
    122e:	40 52       	subi	r20, 0x20	; 32
    1230:	41 93       	st	Z+, r20
    1232:	02 d0       	rcall	.+4      	; 0x1238 <__ultoa_invert+0x84>
    1234:	a9 f7       	brne	.-22     	; 0x1220 <__ultoa_invert+0x6c>
    1236:	ea cf       	rjmp	.-44     	; 0x120c <__ultoa_invert+0x58>
    1238:	b4 e0       	ldi	r27, 0x04	; 4
    123a:	a6 95       	lsr	r26
    123c:	97 95       	ror	r25
    123e:	87 95       	ror	r24
    1240:	77 95       	ror	r23
    1242:	67 95       	ror	r22
    1244:	ba 95       	dec	r27
    1246:	c9 f7       	brne	.-14     	; 0x123a <__ultoa_invert+0x86>
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	61 05       	cpc	r22, r1
    124c:	71 05       	cpc	r23, r1
    124e:	08 95       	ret
    1250:	9b 01       	movw	r18, r22
    1252:	ac 01       	movw	r20, r24
    1254:	0a 2e       	mov	r0, r26
    1256:	06 94       	lsr	r0
    1258:	57 95       	ror	r21
    125a:	47 95       	ror	r20
    125c:	37 95       	ror	r19
    125e:	27 95       	ror	r18
    1260:	ba 95       	dec	r27
    1262:	c9 f7       	brne	.-14     	; 0x1256 <__ultoa_invert+0xa2>
    1264:	62 0f       	add	r22, r18
    1266:	73 1f       	adc	r23, r19
    1268:	84 1f       	adc	r24, r20
    126a:	95 1f       	adc	r25, r21
    126c:	a0 1d       	adc	r26, r0
    126e:	08 95       	ret

00001270 <_exit>:
    1270:	f8 94       	cli

00001272 <__stop_program>:
    1272:	ff cf       	rjmp	.-2      	; 0x1272 <__stop_program>
